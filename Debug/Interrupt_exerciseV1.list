
Interrupt_exerciseV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037ec  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b10  08003b10  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08003b10  08003b10  00013b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b18  08003b18  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b18  08003b18  00013b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b1c  08003b1c  00013b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08003b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          00000084  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000124  20000124  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000967f  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018ac  00000000  00000000  0002974f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  0002b000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000718  00000000  00000000  0002b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023578  00000000  00000000  0002bec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000944f  00000000  00000000  0004f440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2fb2  00000000  00000000  0005888f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012b841  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024bc  00000000  00000000  0012b894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000a0 	.word	0x200000a0
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003980 	.word	0x08003980

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000a4 	.word	0x200000a4
 80001e8:	08003980 	.word	0x08003980

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <toggle>:
/* USER CODE BEGIN 0 */
//---------------------//

//--------- Start - Toggle ---------//
void toggle (uint8_t cont, uint32_t frec)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	6039      	str	r1, [r7, #0]
 80004fa:	71fb      	strb	r3, [r7, #7]
	static uint32_t tick = 0;
	if (tick < HAL_GetTick()){
 80004fc:	f000 fc36 	bl	8000d6c <HAL_GetTick>
 8000500:	4602      	mov	r2, r0
 8000502:	4b14      	ldr	r3, [pc, #80]	; (8000554 <toggle+0x64>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	429a      	cmp	r2, r3
 8000508:	d91f      	bls.n	800054a <toggle+0x5a>
		tick = HAL_GetTick() + frec;
 800050a:	f000 fc2f 	bl	8000d6c <HAL_GetTick>
 800050e:	4602      	mov	r2, r0
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	4413      	add	r3, r2
 8000514:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <toggle+0x64>)
 8000516:	6013      	str	r3, [r2, #0]

		for (size_t i = 0; i < MAX_NUMBER_LEDs; i++)
 8000518:	2300      	movs	r3, #0
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	e00f      	b.n	800053e <toggle+0x4e>
			HAL_GPIO_TogglePin(led_gpio[i].port, led_gpio[i].pin);
 800051e:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <toggle+0x68>)
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	00db      	lsls	r3, r3, #3
 8000524:	4413      	add	r3, r2
 8000526:	685a      	ldr	r2, [r3, #4]
 8000528:	490b      	ldr	r1, [pc, #44]	; (8000558 <toggle+0x68>)
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8000530:	4619      	mov	r1, r3
 8000532:	4610      	mov	r0, r2
 8000534:	f000 ffbb 	bl	80014ae <HAL_GPIO_TogglePin>
		for (size_t i = 0; i < MAX_NUMBER_LEDs; i++)
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	3301      	adds	r3, #1
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	2b05      	cmp	r3, #5
 8000542:	d9ec      	bls.n	800051e <toggle+0x2e>
		cont++;
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	3301      	adds	r3, #1
 8000548:	71fb      	strb	r3, [r7, #7]
	}
}
 800054a:	bf00      	nop
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000108 	.word	0x20000108
 8000558:	20000000 	.word	0x20000000

0800055c <leds_sequence>:
//--------- END - Toggle ---------//


//--------- Start - Sequence ---------//
void leds_sequence()
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
	if(flag == 0)
 8000562:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <leds_sequence+0x78>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d115      	bne.n	8000596 <leds_sequence+0x3a>
	{
		for (size_t i = 0; i < MAX_NUMBER_LEDs; i++)
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	e00f      	b.n	8000590 <leds_sequence+0x34>
			HAL_GPIO_WritePin(led_gpio[i].port, led_gpio[i].pin, GPIO_PIN_RESET);
 8000570:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <leds_sequence+0x7c>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	00db      	lsls	r3, r3, #3
 8000576:	4413      	add	r3, r2
 8000578:	6858      	ldr	r0, [r3, #4]
 800057a:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <leds_sequence+0x7c>)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8000582:	2200      	movs	r2, #0
 8000584:	4619      	mov	r1, r3
 8000586:	f000 ff79 	bl	800147c <HAL_GPIO_WritePin>
		for (size_t i = 0; i < MAX_NUMBER_LEDs; i++)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3301      	adds	r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b05      	cmp	r3, #5
 8000594:	d9ec      	bls.n	8000570 <leds_sequence+0x14>

	}

	if(flag == 1)
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <leds_sequence+0x78>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d104      	bne.n	80005a8 <leds_sequence+0x4c>
	{
		toggle(1, 1000);
 800059e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005a2:	2001      	movs	r0, #1
 80005a4:	f7ff ffa4 	bl	80004f0 <toggle>
	}

	if(flag == 2)
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <leds_sequence+0x78>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d104      	bne.n	80005ba <leds_sequence+0x5e>
	{
		toggle(2, 500);
 80005b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005b4:	2002      	movs	r0, #2
 80005b6:	f7ff ff9b 	bl	80004f0 <toggle>
	}

	if(flag == 3)
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <leds_sequence+0x78>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b03      	cmp	r3, #3
 80005c0:	d103      	bne.n	80005ca <leds_sequence+0x6e>
	{
		toggle(3, 250);
 80005c2:	21fa      	movs	r1, #250	; 0xfa
 80005c4:	2003      	movs	r0, #3
 80005c6:	f7ff ff93 	bl	80004f0 <toggle>
	}
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000100 	.word	0x20000100
 80005d8:	20000000 	.word	0x20000000

080005dc <_write>:



//---------------------//
int _write(int file, char *ptr, int len)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, 5);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2305      	movs	r3, #5
 80005ee:	68b9      	ldr	r1, [r7, #8]
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <_write+0x24>)
 80005f2:	f001 fc74 	bl	8001ede <HAL_UART_Transmit>
	return len;
 80005f6:	687b      	ldr	r3, [r7, #4]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200000bc 	.word	0x200000bc

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fb4a 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f81c 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f8b0 	bl	8000774 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000614:	f000 f884 	bl	8000720 <MX_USART1_UART_Init>


  while (1)
  {
//--------- Principal Funct ---------//
	  leds_sequence();
 8000618:	f7ff ffa0 	bl	800055c <leds_sequence>
//--------------------------------//

    /* USER CODE END WHILE */

	  HAL_UART_Receive_IT(&huart1, buffer, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	4908      	ldr	r1, [pc, #32]	; (8000640 <main+0x3c>)
 8000620:	4808      	ldr	r0, [pc, #32]	; (8000644 <main+0x40>)
 8000622:	f001 fcee 	bl	8002002 <HAL_UART_Receive_IT>
	  HAL_NVIC_EnableIRQ(USART1_IRQn); 			// Enable the USART1 interrupt of the peripheral
 8000626:	2025      	movs	r0, #37	; 0x25
 8000628:	f000 fcc1 	bl	8000fae <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPendingIRQ(USART1_IRQn);		// the USART interrupt was setting in pending mode
 800062c:	2025      	movs	r0, #37	; 0x25
 800062e:	f000 fcd8 	bl	8000fe2 <HAL_NVIC_SetPendingIRQ>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn); 			// Enable the External interrupt (A0) of the GPIO peripheral
 8000632:	2006      	movs	r0, #6
 8000634:	f000 fcbb 	bl	8000fae <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPendingIRQ(EXTI0_IRQn);
 8000638:	2006      	movs	r0, #6
 800063a:	f000 fcd2 	bl	8000fe2 <HAL_NVIC_SetPendingIRQ>
	  leds_sequence();
 800063e:	e7eb      	b.n	8000618 <main+0x14>
 8000640:	20000104 	.word	0x20000104
 8000644:	200000bc 	.word	0x200000bc

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fc8c 	bl	8002f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <SystemClock_Config+0xd0>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a28      	ldr	r2, [pc, #160]	; (8000718 <SystemClock_Config+0xd0>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <SystemClock_Config+0xd0>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b23      	ldr	r3, [pc, #140]	; (800071c <SystemClock_Config+0xd4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <SystemClock_Config+0xd4>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <SystemClock_Config+0xd4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006bc:	2308      	movs	r3, #8
 80006be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80006c0:	2340      	movs	r3, #64	; 0x40
 80006c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c8:	2307      	movs	r3, #7
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 ff1f 	bl	8001514 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006dc:	f000 f962 	bl	80009a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 f980 	bl	8001a04 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800070a:	f000 f94b 	bl	80009a4 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	; 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_USART1_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_USART1_UART_Init+0x4c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USART1_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_USART1_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000758:	f001 fb74 	bl	8001e44 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 f91f 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000bc 	.word	0x200000bc
 8000770:	40011000 	.word	0x40011000

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b24      	ldr	r3, [pc, #144]	; (8000820 <MX_GPIO_Init+0xac>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a23      	ldr	r2, [pc, #140]	; (8000820 <MX_GPIO_Init+0xac>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b21      	ldr	r3, [pc, #132]	; (8000820 <MX_GPIO_Init+0xac>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <MX_GPIO_Init+0xac>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <MX_GPIO_Init+0xac>)
 80007b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_GPIO_Init+0xac>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_6_Pin|LED_5_Pin|LED_1_Pin|LED_2_Pin
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 41fc 	mov.w	r1, #32256	; 0x7e00
 80007c8:	4816      	ldr	r0, [pc, #88]	; (8000824 <MX_GPIO_Init+0xb0>)
 80007ca:	f000 fe57 	bl	800147c <HAL_GPIO_WritePin>
                          |LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ce:	2301      	movs	r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	4619      	mov	r1, r3
 80007e2:	4811      	ldr	r0, [pc, #68]	; (8000828 <MX_GPIO_Init+0xb4>)
 80007e4:	f000 fc9e 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_6_Pin LED_5_Pin LED_1_Pin LED_2_Pin
                           LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_5_Pin|LED_1_Pin|LED_2_Pin
 80007e8:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 80007ec:	60fb      	str	r3, [r7, #12]
                          |LED_3_Pin|LED_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	4619      	mov	r1, r3
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <MX_GPIO_Init+0xb0>)
 8000802:	f000 fc8f 	bl	8001124 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2105      	movs	r1, #5
 800080a:	2006      	movs	r0, #6
 800080c:	f000 fbb3 	bl	8000f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000810:	2006      	movs	r0, #6
 8000812:	f000 fbcc 	bl	8000fae <HAL_NVIC_EnableIRQ>

}
 8000816:	bf00      	nop
 8000818:	3720      	adds	r7, #32
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40021800 	.word	0x40021800
 8000828:	40020000 	.word	0x40020000

0800082c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	printf("UART1 Transfer complete IT\r\n");
 8000834:	4803      	ldr	r0, [pc, #12]	; (8000844 <HAL_UART_TxCpltCallback+0x18>)
 8000836:	f002 fc13 	bl	8003060 <puts>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	080039ac 	.word	0x080039ac

08000848 <HAL_UART_RxCpltCallback>:


//--------- Start - External interrupt SERIAL) ---------//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

	if(buffer[0] == 's')
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <HAL_UART_RxCpltCallback+0x94>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b73      	cmp	r3, #115	; 0x73
 8000856:	d13d      	bne.n	80008d4 <HAL_UART_RxCpltCallback+0x8c>
	{
		printf("------------|Key Pressed|------------\r\n");
 8000858:	4821      	ldr	r0, [pc, #132]	; (80008e0 <HAL_UART_RxCpltCallback+0x98>)
 800085a:	f002 fc01 	bl	8003060 <puts>

		if (flag == 0){
 800085e:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <HAL_UART_RxCpltCallback+0x9c>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d109      	bne.n	800087a <HAL_UART_RxCpltCallback+0x32>
			printf("----> State - LOW <----\r\n");
 8000866:	4820      	ldr	r0, [pc, #128]	; (80008e8 <HAL_UART_RxCpltCallback+0xa0>)
 8000868:	f002 fbfa 	bl	8003060 <puts>
			flag++;
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <HAL_UART_RxCpltCallback+0x9c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	b2da      	uxtb	r2, r3
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <HAL_UART_RxCpltCallback+0x9c>)
 8000876:	701a      	strb	r2, [r3, #0]
			return;
 8000878:	e02c      	b.n	80008d4 <HAL_UART_RxCpltCallback+0x8c>
		}
		if(flag == 1)
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <HAL_UART_RxCpltCallback+0x9c>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d109      	bne.n	8000896 <HAL_UART_RxCpltCallback+0x4e>
		{
			printf("----> State - MEDIUM <----\r\n");
 8000882:	481a      	ldr	r0, [pc, #104]	; (80008ec <HAL_UART_RxCpltCallback+0xa4>)
 8000884:	f002 fbec 	bl	8003060 <puts>
			flag++;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <HAL_UART_RxCpltCallback+0x9c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	3301      	adds	r3, #1
 800088e:	b2da      	uxtb	r2, r3
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_UART_RxCpltCallback+0x9c>)
 8000892:	701a      	strb	r2, [r3, #0]
			return;
 8000894:	e01e      	b.n	80008d4 <HAL_UART_RxCpltCallback+0x8c>
		}
		if(flag == 2)
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <HAL_UART_RxCpltCallback+0x9c>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b02      	cmp	r3, #2
 800089c:	d109      	bne.n	80008b2 <HAL_UART_RxCpltCallback+0x6a>
		{
			printf("----> State - FAST <----\r\n");
 800089e:	4814      	ldr	r0, [pc, #80]	; (80008f0 <HAL_UART_RxCpltCallback+0xa8>)
 80008a0:	f002 fbde 	bl	8003060 <puts>
			flag++;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <HAL_UART_RxCpltCallback+0x9c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <HAL_UART_RxCpltCallback+0x9c>)
 80008ae:	701a      	strb	r2, [r3, #0]
			return;
 80008b0:	e010      	b.n	80008d4 <HAL_UART_RxCpltCallback+0x8c>
		}
		if(flag == 3)
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_UART_RxCpltCallback+0x9c>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d106      	bne.n	80008c8 <HAL_UART_RxCpltCallback+0x80>
		{
			printf("----> State - OFF <----\r\n");
 80008ba:	480e      	ldr	r0, [pc, #56]	; (80008f4 <HAL_UART_RxCpltCallback+0xac>)
 80008bc:	f002 fbd0 	bl	8003060 <puts>
			flag = 0;
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_UART_RxCpltCallback+0x9c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
			return;
 80008c6:	e005      	b.n	80008d4 <HAL_UART_RxCpltCallback+0x8c>
		}
		flag++;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_UART_RxCpltCallback+0x9c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	3301      	adds	r3, #1
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <HAL_UART_RxCpltCallback+0x9c>)
 80008d2:	701a      	strb	r2, [r3, #0]
	}
}
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000104 	.word	0x20000104
 80008e0:	080039c8 	.word	0x080039c8
 80008e4:	20000100 	.word	0x20000100
 80008e8:	080039f0 	.word	0x080039f0
 80008ec:	08003a0c 	.word	0x08003a0c
 80008f0:	08003a28 	.word	0x08003a28
 80008f4:	08003a44 	.word	0x08003a44

080008f8 <HAL_GPIO_EXTI_Callback>:
//--------- End - External interrupt (SERIAL) ---------//


//--------- Start - External interrupt (BUTTON) ---------//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_0)
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d13d      	bne.n	8000984 <HAL_GPIO_EXTI_Callback+0x8c>
	{
		printf("------------| Push Button Pressed |------------\r\n");
 8000908:	4820      	ldr	r0, [pc, #128]	; (800098c <HAL_GPIO_EXTI_Callback+0x94>)
 800090a:	f002 fba9 	bl	8003060 <puts>


		if(flag == 0)
 800090e:	4b20      	ldr	r3, [pc, #128]	; (8000990 <HAL_GPIO_EXTI_Callback+0x98>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d109      	bne.n	800092a <HAL_GPIO_EXTI_Callback+0x32>
		{
			printf("----> State - LOW <----\r\n");
 8000916:	481f      	ldr	r0, [pc, #124]	; (8000994 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000918:	f002 fba2 	bl	8003060 <puts>
			flag++;
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <HAL_GPIO_EXTI_Callback+0x98>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	b2da      	uxtb	r2, r3
 8000924:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <HAL_GPIO_EXTI_Callback+0x98>)
 8000926:	701a      	strb	r2, [r3, #0]
			return;
 8000928:	e02c      	b.n	8000984 <HAL_GPIO_EXTI_Callback+0x8c>
		}
		if(flag == 1)
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <HAL_GPIO_EXTI_Callback+0x98>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d109      	bne.n	8000946 <HAL_GPIO_EXTI_Callback+0x4e>
		{
			printf("----> State - MEDIUM <----\r\n");
 8000932:	4819      	ldr	r0, [pc, #100]	; (8000998 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000934:	f002 fb94 	bl	8003060 <puts>
			flag++;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_GPIO_EXTI_Callback+0x98>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	b2da      	uxtb	r2, r3
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <HAL_GPIO_EXTI_Callback+0x98>)
 8000942:	701a      	strb	r2, [r3, #0]
			return;
 8000944:	e01e      	b.n	8000984 <HAL_GPIO_EXTI_Callback+0x8c>
		}
		if(flag == 2)
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_GPIO_EXTI_Callback+0x98>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b02      	cmp	r3, #2
 800094c:	d109      	bne.n	8000962 <HAL_GPIO_EXTI_Callback+0x6a>
		{
			printf("----> State - FAST <----\r\n");
 800094e:	4813      	ldr	r0, [pc, #76]	; (800099c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000950:	f002 fb86 	bl	8003060 <puts>
			flag++;
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <HAL_GPIO_EXTI_Callback+0x98>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <HAL_GPIO_EXTI_Callback+0x98>)
 800095e:	701a      	strb	r2, [r3, #0]
			return;
 8000960:	e010      	b.n	8000984 <HAL_GPIO_EXTI_Callback+0x8c>
		}
		if(flag == 3)
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <HAL_GPIO_EXTI_Callback+0x98>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b03      	cmp	r3, #3
 8000968:	d106      	bne.n	8000978 <HAL_GPIO_EXTI_Callback+0x80>
		{
			printf("----> State - OFF <----\r\n");
 800096a:	480d      	ldr	r0, [pc, #52]	; (80009a0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800096c:	f002 fb78 	bl	8003060 <puts>
			flag = 0;
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <HAL_GPIO_EXTI_Callback+0x98>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
			return;
 8000976:	e005      	b.n	8000984 <HAL_GPIO_EXTI_Callback+0x8c>
		}
		flag++;
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <HAL_GPIO_EXTI_Callback+0x98>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	b2da      	uxtb	r2, r3
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <HAL_GPIO_EXTI_Callback+0x98>)
 8000982:	701a      	strb	r2, [r3, #0]
	}

}
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	08003a60 	.word	0x08003a60
 8000990:	20000100 	.word	0x20000100
 8000994:	080039f0 	.word	0x080039f0
 8000998:	08003a0c 	.word	0x08003a0c
 800099c:	08003a28 	.word	0x08003a28
 80009a0:	08003a44 	.word	0x08003a44

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <HAL_MspInit+0x4c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a0f      	ldr	r2, [pc, #60]	; (80009fc <HAL_MspInit+0x4c>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_MspInit+0x4c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <HAL_MspInit+0x4c>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ee:	2007      	movs	r0, #7
 80009f0:	f000 fab6 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800

08000a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <HAL_UART_MspInit+0x94>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d134      	bne.n	8000a8c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <HAL_UART_MspInit+0x98>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <HAL_UART_MspInit+0x98>)
 8000a2c:	f043 0310 	orr.w	r3, r3, #16
 8000a30:	6453      	str	r3, [r2, #68]	; 0x44
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <HAL_UART_MspInit+0x98>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	f003 0310 	and.w	r3, r3, #16
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_UART_MspInit+0x98>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <HAL_UART_MspInit+0x98>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_UART_MspInit+0x98>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	4809      	ldr	r0, [pc, #36]	; (8000a9c <HAL_UART_MspInit+0x9c>)
 8000a78:	f000 fb54 	bl	8001124 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2025      	movs	r0, #37	; 0x25
 8000a82:	f000 fa78 	bl	8000f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a86:	2025      	movs	r0, #37	; 0x25
 8000a88:	f000 fa91 	bl	8000fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40011000 	.word	0x40011000
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 f92a 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f000 fcf3 	bl	80014e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <USART1_IRQHandler+0x10>)
 8000b0a:	f001 faab 	bl	8002064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200000bc 	.word	0x200000bc

08000b18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	e00a      	b.n	8000b40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b2a:	f3af 8000 	nop.w
 8000b2e:	4601      	mov	r1, r0
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	60ba      	str	r2, [r7, #8]
 8000b36:	b2ca      	uxtb	r2, r1
 8000b38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	dbf0      	blt.n	8000b2a <_read+0x12>
	}

return len;
 8000b48:	687b      	ldr	r3, [r7, #4]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
	return -1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b7a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <_isatty>:

int _isatty(int file)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
	return 1;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
	return 0;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc4:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <_sbrk+0x5c>)
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <_sbrk+0x60>)
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d102      	bne.n	8000bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <_sbrk+0x64>)
 8000bda:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <_sbrk+0x68>)
 8000bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d207      	bcs.n	8000bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bec:	f002 f998 	bl	8002f20 <__errno>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	e009      	b.n	8000c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <_sbrk+0x64>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <_sbrk+0x64>)
 8000c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20030000 	.word	0x20030000
 8000c1c:	00000400 	.word	0x00000400
 8000c20:	2000010c 	.word	0x2000010c
 8000c24:	20000128 	.word	0x20000128

08000c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c84 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c52:	490e      	ldr	r1, [pc, #56]	; (8000c8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c54:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c68:	4c0b      	ldr	r4, [pc, #44]	; (8000c98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c76:	f7ff ffd7 	bl	8000c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f002 f957 	bl	8002f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7e:	f7ff fcc1 	bl	8000604 <main>
  bx  lr    
 8000c82:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c84:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000c90:	08003b20 	.word	0x08003b20
  ldr r2, =_sbss
 8000c94:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000c98:	20000124 	.word	0x20000124

08000c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <HAL_Init+0x40>)
 8000caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_Init+0x40>)
 8000cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_Init+0x40>)
 8000cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 f949 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f808 	bl	8000ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd4:	f7ff fe6c 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023c00 	.word	0x40023c00

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_InitTick+0x54>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x58>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f961 	bl	8000fca <HAL_SYSTICK_Config>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00e      	b.n	8000d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d80a      	bhi.n	8000d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f000 f929 	bl	8000f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d24:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <HAL_InitTick+0x5c>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e000      	b.n	8000d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000030 	.word	0x20000030
 8000d3c:	20000038 	.word	0x20000038
 8000d40:	20000034 	.word	0x20000034

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x20>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x24>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_IncTick+0x24>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000038 	.word	0x20000038
 8000d68:	20000110 	.word	0x20000110

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_GetTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000110 	.word	0x20000110

08000d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db0b      	blt.n	8000e12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 021f 	and.w	r2, r3, #31
 8000e00:	4907      	ldr	r1, [pc, #28]	; (8000e20 <__NVIC_EnableIRQ+0x38>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	2001      	movs	r0, #1
 8000e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	db0c      	blt.n	8000e50 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f003 021f 	and.w	r2, r3, #31
 8000e3c:	4907      	ldr	r1, [pc, #28]	; (8000e5c <__NVIC_SetPendingIRQ+0x38>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	095b      	lsrs	r3, r3, #5
 8000e44:	2001      	movs	r0, #1
 8000e46:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4a:	3340      	adds	r3, #64	; 0x40
 8000e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100

08000e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0a      	blt.n	8000e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	490c      	ldr	r1, [pc, #48]	; (8000eac <__NVIC_SetPriority+0x4c>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e88:	e00a      	b.n	8000ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <__NVIC_SetPriority+0x50>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3b04      	subs	r3, #4
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	761a      	strb	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000e100 	.word	0xe000e100
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf28      	it	cs
 8000ed2:	2304      	movcs	r3, #4
 8000ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d902      	bls.n	8000ee4 <NVIC_EncodePriority+0x30>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	e000      	b.n	8000ee6 <NVIC_EncodePriority+0x32>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43d9      	mvns	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	4313      	orrs	r3, r2
         );
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	; 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f2c:	d301      	bcc.n	8000f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00f      	b.n	8000f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <SysTick_Config+0x40>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f7ff ff8e 	bl	8000e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <SysTick_Config+0x40>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4a:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <SysTick_Config+0x40>)
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ff0b 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f88:	f7ff ff20 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff ff8e 	bl	8000eb4 <NVIC_EncodePriority>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5d 	bl	8000e60 <__NVIC_SetPriority>
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff13 	bl	8000de8 <__NVIC_EnableIRQ>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffa2 	bl	8000f1c <SysTick_Config>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff17 	bl	8000e24 <__NVIC_SetPendingIRQ>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b084      	sub	sp, #16
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff feae 	bl	8000d6c <HAL_GetTick>
 8001010:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d008      	beq.n	8001030 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e052      	b.n	80010d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0216 	bic.w	r2, r2, #22
 800103e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	695a      	ldr	r2, [r3, #20]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800104e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	2b00      	cmp	r3, #0
 8001056:	d103      	bne.n	8001060 <HAL_DMA_Abort+0x62>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800105c:	2b00      	cmp	r3, #0
 800105e:	d007      	beq.n	8001070 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0208 	bic.w	r2, r2, #8
 800106e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0201 	bic.w	r2, r2, #1
 800107e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001080:	e013      	b.n	80010aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001082:	f7ff fe73 	bl	8000d6c <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b05      	cmp	r3, #5
 800108e:	d90c      	bls.n	80010aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2220      	movs	r2, #32
 8001094:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2203      	movs	r2, #3
 800109a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e015      	b.n	80010d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e4      	bne.n	8001082 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010bc:	223f      	movs	r2, #63	; 0x3f
 80010be:	409a      	lsls	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d004      	beq.n	80010fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2280      	movs	r2, #128	; 0x80
 80010f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e00c      	b.n	8001116 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2205      	movs	r2, #5
 8001100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 0201 	bic.w	r2, r2, #1
 8001112:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	e177      	b.n	8001430 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 8166 	bne.w	800142a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d005      	beq.n	8001176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	2b02      	cmp	r3, #2
 8001174:	d130      	bne.n	80011d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 0201 	and.w	r2, r3, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d017      	beq.n	8001214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d123      	bne.n	8001268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3208      	adds	r2, #8
 8001262:	69b9      	ldr	r1, [r7, #24]
 8001264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0203 	and.w	r2, r3, #3
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80c0 	beq.w	800142a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b66      	ldr	r3, [pc, #408]	; (8001448 <HAL_GPIO_Init+0x324>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a65      	ldr	r2, [pc, #404]	; (8001448 <HAL_GPIO_Init+0x324>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b63      	ldr	r3, [pc, #396]	; (8001448 <HAL_GPIO_Init+0x324>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c6:	4a61      	ldr	r2, [pc, #388]	; (800144c <HAL_GPIO_Init+0x328>)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3302      	adds	r3, #2
 80012ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a58      	ldr	r2, [pc, #352]	; (8001450 <HAL_GPIO_Init+0x32c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d037      	beq.n	8001362 <HAL_GPIO_Init+0x23e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a57      	ldr	r2, [pc, #348]	; (8001454 <HAL_GPIO_Init+0x330>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d031      	beq.n	800135e <HAL_GPIO_Init+0x23a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a56      	ldr	r2, [pc, #344]	; (8001458 <HAL_GPIO_Init+0x334>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d02b      	beq.n	800135a <HAL_GPIO_Init+0x236>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a55      	ldr	r2, [pc, #340]	; (800145c <HAL_GPIO_Init+0x338>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d025      	beq.n	8001356 <HAL_GPIO_Init+0x232>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a54      	ldr	r2, [pc, #336]	; (8001460 <HAL_GPIO_Init+0x33c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d01f      	beq.n	8001352 <HAL_GPIO_Init+0x22e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a53      	ldr	r2, [pc, #332]	; (8001464 <HAL_GPIO_Init+0x340>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d019      	beq.n	800134e <HAL_GPIO_Init+0x22a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a52      	ldr	r2, [pc, #328]	; (8001468 <HAL_GPIO_Init+0x344>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <HAL_GPIO_Init+0x226>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a51      	ldr	r2, [pc, #324]	; (800146c <HAL_GPIO_Init+0x348>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d00d      	beq.n	8001346 <HAL_GPIO_Init+0x222>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a50      	ldr	r2, [pc, #320]	; (8001470 <HAL_GPIO_Init+0x34c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d007      	beq.n	8001342 <HAL_GPIO_Init+0x21e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4f      	ldr	r2, [pc, #316]	; (8001474 <HAL_GPIO_Init+0x350>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d101      	bne.n	800133e <HAL_GPIO_Init+0x21a>
 800133a:	2309      	movs	r3, #9
 800133c:	e012      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800133e:	230a      	movs	r3, #10
 8001340:	e010      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001342:	2308      	movs	r3, #8
 8001344:	e00e      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001346:	2307      	movs	r3, #7
 8001348:	e00c      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800134a:	2306      	movs	r3, #6
 800134c:	e00a      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800134e:	2305      	movs	r3, #5
 8001350:	e008      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001352:	2304      	movs	r3, #4
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001356:	2303      	movs	r3, #3
 8001358:	e004      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800135a:	2302      	movs	r3, #2
 800135c:	e002      	b.n	8001364 <HAL_GPIO_Init+0x240>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_GPIO_Init+0x240>
 8001362:	2300      	movs	r3, #0
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	f002 0203 	and.w	r2, r2, #3
 800136a:	0092      	lsls	r2, r2, #2
 800136c:	4093      	lsls	r3, r2
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001374:	4935      	ldr	r1, [pc, #212]	; (800144c <HAL_GPIO_Init+0x328>)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <HAL_GPIO_Init+0x354>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013a6:	4a34      	ldr	r2, [pc, #208]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ac:	4b32      	ldr	r3, [pc, #200]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d0:	4a29      	ldr	r2, [pc, #164]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013d6:	4b28      	ldr	r3, [pc, #160]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013fa:	4a1f      	ldr	r2, [pc, #124]	; (8001478 <HAL_GPIO_Init+0x354>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <HAL_GPIO_Init+0x354>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <HAL_GPIO_Init+0x354>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3301      	adds	r3, #1
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	2b0f      	cmp	r3, #15
 8001434:	f67f ae84 	bls.w	8001140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40013800 	.word	0x40013800
 8001450:	40020000 	.word	0x40020000
 8001454:	40020400 	.word	0x40020400
 8001458:	40020800 	.word	0x40020800
 800145c:	40020c00 	.word	0x40020c00
 8001460:	40021000 	.word	0x40021000
 8001464:	40021400 	.word	0x40021400
 8001468:	40021800 	.word	0x40021800
 800146c:	40021c00 	.word	0x40021c00
 8001470:	40022000 	.word	0x40022000
 8001474:	40022400 	.word	0x40022400
 8001478:	40013c00 	.word	0x40013c00

0800147c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
 8001488:	4613      	mov	r3, r2
 800148a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800148c:	787b      	ldrb	r3, [r7, #1]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001498:	e003      	b.n	80014a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	041a      	lsls	r2, r3, #16
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	619a      	str	r2, [r3, #24]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	460b      	mov	r3, r1
 80014b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014c0:	887a      	ldrh	r2, [r7, #2]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4013      	ands	r3, r2
 80014c6:	041a      	lsls	r2, r3, #16
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	400b      	ands	r3, r1
 80014d0:	431a      	orrs	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	619a      	str	r2, [r3, #24]
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f0:	695a      	ldr	r2, [r3, #20]
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d006      	beq.n	8001508 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f9f8 	bl	80008f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40013c00 	.word	0x40013c00

08001514 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e267      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d075      	beq.n	800161e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001532:	4b88      	ldr	r3, [pc, #544]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b04      	cmp	r3, #4
 800153c:	d00c      	beq.n	8001558 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800153e:	4b85      	ldr	r3, [pc, #532]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001546:	2b08      	cmp	r3, #8
 8001548:	d112      	bne.n	8001570 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800154a:	4b82      	ldr	r3, [pc, #520]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001556:	d10b      	bne.n	8001570 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001558:	4b7e      	ldr	r3, [pc, #504]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d05b      	beq.n	800161c <HAL_RCC_OscConfig+0x108>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d157      	bne.n	800161c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e242      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001578:	d106      	bne.n	8001588 <HAL_RCC_OscConfig+0x74>
 800157a:	4b76      	ldr	r3, [pc, #472]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a75      	ldr	r2, [pc, #468]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	e01d      	b.n	80015c4 <HAL_RCC_OscConfig+0xb0>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001590:	d10c      	bne.n	80015ac <HAL_RCC_OscConfig+0x98>
 8001592:	4b70      	ldr	r3, [pc, #448]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a6f      	ldr	r2, [pc, #444]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	4b6d      	ldr	r3, [pc, #436]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a6c      	ldr	r2, [pc, #432]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e00b      	b.n	80015c4 <HAL_RCC_OscConfig+0xb0>
 80015ac:	4b69      	ldr	r3, [pc, #420]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a68      	ldr	r2, [pc, #416]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80015b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b66      	ldr	r3, [pc, #408]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a65      	ldr	r2, [pc, #404]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80015be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d013      	beq.n	80015f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fbce 	bl	8000d6c <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff fbca 	bl	8000d6c <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	; 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e207      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	4b5b      	ldr	r3, [pc, #364]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0xc0>
 80015f2:	e014      	b.n	800161e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fbba 	bl	8000d6c <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fbb6 	bl	8000d6c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	; 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e1f3      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	4b51      	ldr	r3, [pc, #324]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0xe8>
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d063      	beq.n	80016f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800162a:	4b4a      	ldr	r3, [pc, #296]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00b      	beq.n	800164e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001636:	4b47      	ldr	r3, [pc, #284]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800163e:	2b08      	cmp	r3, #8
 8001640:	d11c      	bne.n	800167c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001642:	4b44      	ldr	r3, [pc, #272]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d116      	bne.n	800167c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164e:	4b41      	ldr	r3, [pc, #260]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d005      	beq.n	8001666 <HAL_RCC_OscConfig+0x152>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d001      	beq.n	8001666 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e1c7      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001666:	4b3b      	ldr	r3, [pc, #236]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4937      	ldr	r1, [pc, #220]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167a:	e03a      	b.n	80016f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d020      	beq.n	80016c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001684:	4b34      	ldr	r3, [pc, #208]	; (8001758 <HAL_RCC_OscConfig+0x244>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168a:	f7ff fb6f 	bl	8000d6c <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001692:	f7ff fb6b 	bl	8000d6c <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e1a8      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a4:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4925      	ldr	r1, [pc, #148]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	600b      	str	r3, [r1, #0]
 80016c4:	e015      	b.n	80016f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c6:	4b24      	ldr	r3, [pc, #144]	; (8001758 <HAL_RCC_OscConfig+0x244>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fb4e 	bl	8000d6c <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d4:	f7ff fb4a 	bl	8000d6c <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e187      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d036      	beq.n	800176c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d016      	beq.n	8001734 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_RCC_OscConfig+0x248>)
 8001708:	2201      	movs	r2, #1
 800170a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170c:	f7ff fb2e 	bl	8000d6c <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001714:	f7ff fb2a 	bl	8000d6c <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e167      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_RCC_OscConfig+0x240>)
 8001728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0x200>
 8001732:	e01b      	b.n	800176c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_RCC_OscConfig+0x248>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173a:	f7ff fb17 	bl	8000d6c <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001740:	e00e      	b.n	8001760 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001742:	f7ff fb13 	bl	8000d6c <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d907      	bls.n	8001760 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e150      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
 8001754:	40023800 	.word	0x40023800
 8001758:	42470000 	.word	0x42470000
 800175c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001760:	4b88      	ldr	r3, [pc, #544]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1ea      	bne.n	8001742 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 8097 	beq.w	80018a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800177e:	4b81      	ldr	r3, [pc, #516]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10f      	bne.n	80017aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	4b7d      	ldr	r3, [pc, #500]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a7c      	ldr	r2, [pc, #496]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b7a      	ldr	r3, [pc, #488]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017a6:	2301      	movs	r3, #1
 80017a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017aa:	4b77      	ldr	r3, [pc, #476]	; (8001988 <HAL_RCC_OscConfig+0x474>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d118      	bne.n	80017e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017b6:	4b74      	ldr	r3, [pc, #464]	; (8001988 <HAL_RCC_OscConfig+0x474>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a73      	ldr	r2, [pc, #460]	; (8001988 <HAL_RCC_OscConfig+0x474>)
 80017bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c2:	f7ff fad3 	bl	8000d6c <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ca:	f7ff facf 	bl	8000d6c <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e10c      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017dc:	4b6a      	ldr	r3, [pc, #424]	; (8001988 <HAL_RCC_OscConfig+0x474>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d106      	bne.n	80017fe <HAL_RCC_OscConfig+0x2ea>
 80017f0:	4b64      	ldr	r3, [pc, #400]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f4:	4a63      	ldr	r2, [pc, #396]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6713      	str	r3, [r2, #112]	; 0x70
 80017fc:	e01c      	b.n	8001838 <HAL_RCC_OscConfig+0x324>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b05      	cmp	r3, #5
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x30c>
 8001806:	4b5f      	ldr	r3, [pc, #380]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180a:	4a5e      	ldr	r2, [pc, #376]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	6713      	str	r3, [r2, #112]	; 0x70
 8001812:	4b5c      	ldr	r3, [pc, #368]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001816:	4a5b      	ldr	r2, [pc, #364]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6713      	str	r3, [r2, #112]	; 0x70
 800181e:	e00b      	b.n	8001838 <HAL_RCC_OscConfig+0x324>
 8001820:	4b58      	ldr	r3, [pc, #352]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001824:	4a57      	ldr	r2, [pc, #348]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	6713      	str	r3, [r2, #112]	; 0x70
 800182c:	4b55      	ldr	r3, [pc, #340]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 800182e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001830:	4a54      	ldr	r2, [pc, #336]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001832:	f023 0304 	bic.w	r3, r3, #4
 8001836:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d015      	beq.n	800186c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001840:	f7ff fa94 	bl	8000d6c <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001846:	e00a      	b.n	800185e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001848:	f7ff fa90 	bl	8000d6c <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e0cb      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185e:	4b49      	ldr	r3, [pc, #292]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0ee      	beq.n	8001848 <HAL_RCC_OscConfig+0x334>
 800186a:	e014      	b.n	8001896 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186c:	f7ff fa7e 	bl	8000d6c <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001872:	e00a      	b.n	800188a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001874:	f7ff fa7a 	bl	8000d6c <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001882:	4293      	cmp	r3, r2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e0b5      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188a:	4b3e      	ldr	r3, [pc, #248]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 800188c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1ee      	bne.n	8001874 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001896:	7dfb      	ldrb	r3, [r7, #23]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d105      	bne.n	80018a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800189c:	4b39      	ldr	r3, [pc, #228]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	4a38      	ldr	r2, [pc, #224]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 80018a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80a1 	beq.w	80019f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018b2:	4b34      	ldr	r3, [pc, #208]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d05c      	beq.n	8001978 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d141      	bne.n	800194a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c6:	4b31      	ldr	r3, [pc, #196]	; (800198c <HAL_RCC_OscConfig+0x478>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fa4e 	bl	8000d6c <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff fa4a 	bl	8000d6c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e087      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e6:	4b27      	ldr	r3, [pc, #156]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69da      	ldr	r2, [r3, #28]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	019b      	lsls	r3, r3, #6
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001908:	085b      	lsrs	r3, r3, #1
 800190a:	3b01      	subs	r3, #1
 800190c:	041b      	lsls	r3, r3, #16
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	061b      	lsls	r3, r3, #24
 8001916:	491b      	ldr	r1, [pc, #108]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_RCC_OscConfig+0x478>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7ff fa23 	bl	8000d6c <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192a:	f7ff fa1f 	bl	8000d6c <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e05c      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x416>
 8001948:	e054      	b.n	80019f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <HAL_RCC_OscConfig+0x478>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff fa0c 	bl	8000d6c <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001958:	f7ff fa08 	bl	8000d6c <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e045      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_RCC_OscConfig+0x470>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x444>
 8001976:	e03d      	b.n	80019f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d107      	bne.n	8001990 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e038      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
 8001984:	40023800 	.word	0x40023800
 8001988:	40007000 	.word	0x40007000
 800198c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <HAL_RCC_OscConfig+0x4ec>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d028      	beq.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d121      	bne.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d11a      	bne.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019c0:	4013      	ands	r3, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d111      	bne.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	085b      	lsrs	r3, r3, #1
 80019d8:	3b01      	subs	r3, #1
 80019da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d107      	bne.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800

08001a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0cc      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a18:	4b68      	ldr	r3, [pc, #416]	; (8001bbc <HAL_RCC_ClockConfig+0x1b8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d90c      	bls.n	8001a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b65      	ldr	r3, [pc, #404]	; (8001bbc <HAL_RCC_ClockConfig+0x1b8>)
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	4b63      	ldr	r3, [pc, #396]	; (8001bbc <HAL_RCC_ClockConfig+0x1b8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0b8      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d020      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a58:	4b59      	ldr	r3, [pc, #356]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	4a58      	ldr	r2, [pc, #352]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a70:	4b53      	ldr	r3, [pc, #332]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a7c:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	494d      	ldr	r1, [pc, #308]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d044      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d107      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d119      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e07f      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d003      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d107      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac2:	4b3f      	ldr	r3, [pc, #252]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e06f      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e067      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae2:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f023 0203 	bic.w	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4934      	ldr	r1, [pc, #208]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af4:	f7ff f93a 	bl	8000d6c <HAL_GetTick>
 8001af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afc:	f7ff f936 	bl	8000d6c <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e04f      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b12:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 020c 	and.w	r2, r3, #12
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d1eb      	bne.n	8001afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b24:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 030f 	and.w	r3, r3, #15
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d20c      	bcs.n	8001b4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b32:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e032      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	4916      	ldr	r1, [pc, #88]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d009      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	490e      	ldr	r1, [pc, #56]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b8a:	f000 f821 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	490a      	ldr	r1, [pc, #40]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9c:	5ccb      	ldrb	r3, [r1, r3]
 8001b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba2:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff f89a 	bl	8000ce4 <HAL_InitTick>

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023c00 	.word	0x40023c00
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	08003a94 	.word	0x08003a94
 8001bc8:	20000030 	.word	0x20000030
 8001bcc:	20000034 	.word	0x20000034

08001bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bd4:	b094      	sub	sp, #80	; 0x50
 8001bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	647b      	str	r3, [r7, #68]	; 0x44
 8001bdc:	2300      	movs	r3, #0
 8001bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001be0:	2300      	movs	r3, #0
 8001be2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001be8:	4b79      	ldr	r3, [pc, #484]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d00d      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0x40>
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	f200 80e1 	bhi.w	8001dbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0x34>
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d003      	beq.n	8001c0a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c02:	e0db      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c04:	4b73      	ldr	r3, [pc, #460]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c08:	e0db      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c0a:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c0e:	e0d8      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c10:	4b6f      	ldr	r3, [pc, #444]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c1a:	4b6d      	ldr	r3, [pc, #436]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d063      	beq.n	8001cee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c26:	4b6a      	ldr	r3, [pc, #424]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	099b      	lsrs	r3, r3, #6
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c42:	4622      	mov	r2, r4
 8001c44:	462b      	mov	r3, r5
 8001c46:	f04f 0000 	mov.w	r0, #0
 8001c4a:	f04f 0100 	mov.w	r1, #0
 8001c4e:	0159      	lsls	r1, r3, #5
 8001c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c54:	0150      	lsls	r0, r2, #5
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	1a51      	subs	r1, r2, r1
 8001c5e:	6139      	str	r1, [r7, #16]
 8001c60:	4629      	mov	r1, r5
 8001c62:	eb63 0301 	sbc.w	r3, r3, r1
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c74:	4659      	mov	r1, fp
 8001c76:	018b      	lsls	r3, r1, #6
 8001c78:	4651      	mov	r1, sl
 8001c7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c7e:	4651      	mov	r1, sl
 8001c80:	018a      	lsls	r2, r1, #6
 8001c82:	4651      	mov	r1, sl
 8001c84:	ebb2 0801 	subs.w	r8, r2, r1
 8001c88:	4659      	mov	r1, fp
 8001c8a:	eb63 0901 	sbc.w	r9, r3, r1
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ca2:	4690      	mov	r8, r2
 8001ca4:	4699      	mov	r9, r3
 8001ca6:	4623      	mov	r3, r4
 8001ca8:	eb18 0303 	adds.w	r3, r8, r3
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	462b      	mov	r3, r5
 8001cb0:	eb49 0303 	adc.w	r3, r9, r3
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	024b      	lsls	r3, r1, #9
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ccc:	4621      	mov	r1, r4
 8001cce:	024a      	lsls	r2, r1, #9
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ce0:	f7fe fa84 	bl	80001ec <__aeabi_uldivmod>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4613      	mov	r3, r2
 8001cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cec:	e058      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cee:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	099b      	lsrs	r3, r3, #6
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cfe:	623b      	str	r3, [r7, #32]
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
 8001d04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d08:	4642      	mov	r2, r8
 8001d0a:	464b      	mov	r3, r9
 8001d0c:	f04f 0000 	mov.w	r0, #0
 8001d10:	f04f 0100 	mov.w	r1, #0
 8001d14:	0159      	lsls	r1, r3, #5
 8001d16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d1a:	0150      	lsls	r0, r2, #5
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4641      	mov	r1, r8
 8001d22:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d26:	4649      	mov	r1, r9
 8001d28:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d40:	ebb2 040a 	subs.w	r4, r2, sl
 8001d44:	eb63 050b 	sbc.w	r5, r3, fp
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	00eb      	lsls	r3, r5, #3
 8001d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d56:	00e2      	lsls	r2, r4, #3
 8001d58:	4614      	mov	r4, r2
 8001d5a:	461d      	mov	r5, r3
 8001d5c:	4643      	mov	r3, r8
 8001d5e:	18e3      	adds	r3, r4, r3
 8001d60:	603b      	str	r3, [r7, #0]
 8001d62:	464b      	mov	r3, r9
 8001d64:	eb45 0303 	adc.w	r3, r5, r3
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d76:	4629      	mov	r1, r5
 8001d78:	028b      	lsls	r3, r1, #10
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d80:	4621      	mov	r1, r4
 8001d82:	028a      	lsls	r2, r1, #10
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	61fa      	str	r2, [r7, #28]
 8001d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d94:	f7fe fa2a 	bl	80001ec <__aeabi_uldivmod>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	0c1b      	lsrs	r3, r3, #16
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	3301      	adds	r3, #1
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dba:	e002      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3750      	adds	r7, #80	; 0x50
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	00f42400 	.word	0x00f42400
 8001dd8:	007a1200 	.word	0x007a1200

08001ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000030 	.word	0x20000030

08001df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001df8:	f7ff fff0 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	0a9b      	lsrs	r3, r3, #10
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	4903      	ldr	r1, [pc, #12]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0a:	5ccb      	ldrb	r3, [r1, r3]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40023800 	.word	0x40023800
 8001e18:	08003aa4 	.word	0x08003aa4

08001e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e20:	f7ff ffdc 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	0b5b      	lsrs	r3, r3, #13
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	4903      	ldr	r1, [pc, #12]	; (8001e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e32:	5ccb      	ldrb	r3, [r1, r3]
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	08003aa4 	.word	0x08003aa4

08001e44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e03f      	b.n	8001ed6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7fe fdc8 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2224      	movs	r2, #36	; 0x24
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fdd5 	bl	8002a38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695a      	ldr	r2, [r3, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001eac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ebc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b08a      	sub	sp, #40	; 0x28
 8001ee2:	af02      	add	r7, sp, #8
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	4613      	mov	r3, r2
 8001eec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b20      	cmp	r3, #32
 8001efc:	d17c      	bne.n	8001ff8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d002      	beq.n	8001f0a <HAL_UART_Transmit+0x2c>
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e075      	b.n	8001ffa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_UART_Transmit+0x3e>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e06e      	b.n	8001ffa <HAL_UART_Transmit+0x11c>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2221      	movs	r2, #33	; 0x21
 8001f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f32:	f7fe ff1b 	bl	8000d6c <HAL_GetTick>
 8001f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	88fa      	ldrh	r2, [r7, #6]
 8001f3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	88fa      	ldrh	r2, [r7, #6]
 8001f42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f4c:	d108      	bne.n	8001f60 <HAL_UART_Transmit+0x82>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d104      	bne.n	8001f60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	61bb      	str	r3, [r7, #24]
 8001f5e:	e003      	b.n	8001f68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f70:	e02a      	b.n	8001fc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2180      	movs	r1, #128	; 0x80
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 fb15 	bl	80025ac <UART_WaitOnFlagUntilTimeout>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e036      	b.n	8001ffa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10b      	bne.n	8001faa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	e007      	b.n	8001fba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	781a      	ldrb	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1cf      	bne.n	8001f72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2140      	movs	r1, #64	; 0x40
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fae5 	bl	80025ac <UART_WaitOnFlagUntilTimeout>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e006      	b.n	8001ffa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	e000      	b.n	8001ffa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ff8:	2302      	movs	r3, #2
  }
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3720      	adds	r7, #32
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b084      	sub	sp, #16
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	4613      	mov	r3, r2
 800200e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b20      	cmp	r3, #32
 800201a:	d11d      	bne.n	8002058 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <HAL_UART_Receive_IT+0x26>
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e016      	b.n	800205a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_UART_Receive_IT+0x38>
 8002036:	2302      	movs	r3, #2
 8002038:	e00f      	b.n	800205a <HAL_UART_Receive_IT+0x58>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	461a      	mov	r2, r3
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 fb1a 	bl	8002688 <UART_Start_Receive_IT>
 8002054:	4603      	mov	r3, r0
 8002056:	e000      	b.n	800205a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002058:	2302      	movs	r3, #2
  }
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b0ba      	sub	sp, #232	; 0xe8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002090:	2300      	movs	r3, #0
 8002092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80020a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10f      	bne.n	80020ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020ae:	f003 0320 	and.w	r3, r3, #32
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <HAL_UART_IRQHandler+0x66>
 80020b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fbfd 	bl	80028c2 <UART_Receive_IT>
      return;
 80020c8:	e256      	b.n	8002578 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80020ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 80de 	beq.w	8002290 <HAL_UART_IRQHandler+0x22c>
 80020d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d106      	bne.n	80020ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80d1 	beq.w	8002290 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00b      	beq.n	8002112 <HAL_UART_IRQHandler+0xae>
 80020fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d005      	beq.n	8002112 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f043 0201 	orr.w	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00b      	beq.n	8002136 <HAL_UART_IRQHandler+0xd2>
 800211e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f043 0202 	orr.w	r2, r3, #2
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00b      	beq.n	800215a <HAL_UART_IRQHandler+0xf6>
 8002142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f043 0204 	orr.w	r2, r3, #4
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800215a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d011      	beq.n	800218a <HAL_UART_IRQHandler+0x126>
 8002166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800216a:	f003 0320 	and.w	r3, r3, #32
 800216e:	2b00      	cmp	r3, #0
 8002170:	d105      	bne.n	800217e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f043 0208 	orr.w	r2, r3, #8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 81ed 	beq.w	800256e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_UART_IRQHandler+0x14e>
 80021a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 fb88 	bl	80028c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021bc:	2b40      	cmp	r3, #64	; 0x40
 80021be:	bf0c      	ite	eq
 80021c0:	2301      	moveq	r3, #1
 80021c2:	2300      	movne	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d103      	bne.n	80021de <HAL_UART_IRQHandler+0x17a>
 80021d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d04f      	beq.n	800227e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 fa90 	bl	8002704 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ee:	2b40      	cmp	r3, #64	; 0x40
 80021f0:	d141      	bne.n	8002276 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	3314      	adds	r3, #20
 80021f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002200:	e853 3f00 	ldrex	r3, [r3]
 8002204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800220c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	3314      	adds	r3, #20
 800221a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800221e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002226:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800222a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800222e:	e841 2300 	strex	r3, r2, [r1]
 8002232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1d9      	bne.n	80021f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002242:	2b00      	cmp	r3, #0
 8002244:	d013      	beq.n	800226e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224a:	4a7d      	ldr	r2, [pc, #500]	; (8002440 <HAL_UART_IRQHandler+0x3dc>)
 800224c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe ff43 	bl	80010de <HAL_DMA_Abort_IT>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d016      	beq.n	800228c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002268:	4610      	mov	r0, r2
 800226a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800226c:	e00e      	b.n	800228c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f986 	bl	8002580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002274:	e00a      	b.n	800228c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f982 	bl	8002580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800227c:	e006      	b.n	800228c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f97e 	bl	8002580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800228a:	e170      	b.n	800256e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800228c:	bf00      	nop
    return;
 800228e:	e16e      	b.n	800256e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	2b01      	cmp	r3, #1
 8002296:	f040 814a 	bne.w	800252e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800229a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8143 	beq.w	800252e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80022a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 813c 	beq.w	800252e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d6:	2b40      	cmp	r3, #64	; 0x40
 80022d8:	f040 80b4 	bne.w	8002444 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80022e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 8140 	beq.w	8002572 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022fa:	429a      	cmp	r2, r3
 80022fc:	f080 8139 	bcs.w	8002572 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002306:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002312:	f000 8088 	beq.w	8002426 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	330c      	adds	r3, #12
 800231c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002320:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002324:	e853 3f00 	ldrex	r3, [r3]
 8002328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800232c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002334:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	330c      	adds	r3, #12
 800233e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002342:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800234a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800234e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002352:	e841 2300 	strex	r3, r2, [r1]
 8002356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800235a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1d9      	bne.n	8002316 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3314      	adds	r3, #20
 8002368:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800236c:	e853 3f00 	ldrex	r3, [r3]
 8002370:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	3314      	adds	r3, #20
 8002382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002386:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800238a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800238c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800238e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002392:	e841 2300 	strex	r3, r2, [r1]
 8002396:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1e1      	bne.n	8002362 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	3314      	adds	r3, #20
 80023a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023a8:	e853 3f00 	ldrex	r3, [r3]
 80023ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80023ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3314      	adds	r3, #20
 80023be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80023c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80023c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80023c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80023ca:	e841 2300 	strex	r3, r2, [r1]
 80023ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80023d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1e3      	bne.n	800239e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	330c      	adds	r3, #12
 80023ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ee:	e853 3f00 	ldrex	r3, [r3]
 80023f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80023f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f6:	f023 0310 	bic.w	r3, r3, #16
 80023fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	330c      	adds	r3, #12
 8002404:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002408:	65ba      	str	r2, [r7, #88]	; 0x58
 800240a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800240e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002410:	e841 2300 	strex	r3, r2, [r1]
 8002414:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1e3      	bne.n	80023e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe fdec 	bl	8000ffe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800242e:	b29b      	uxth	r3, r3
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	b29b      	uxth	r3, r3
 8002434:	4619      	mov	r1, r3
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f8ac 	bl	8002594 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800243c:	e099      	b.n	8002572 <HAL_UART_IRQHandler+0x50e>
 800243e:	bf00      	nop
 8002440:	080027cb 	.word	0x080027cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800244c:	b29b      	uxth	r3, r3
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002458:	b29b      	uxth	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 808b 	beq.w	8002576 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002460:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8086 	beq.w	8002576 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	330c      	adds	r3, #12
 8002470:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002474:	e853 3f00 	ldrex	r3, [r3]
 8002478:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800247a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002480:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	330c      	adds	r3, #12
 800248a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800248e:	647a      	str	r2, [r7, #68]	; 0x44
 8002490:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002492:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002496:	e841 2300 	strex	r3, r2, [r1]
 800249a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800249c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1e3      	bne.n	800246a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	3314      	adds	r3, #20
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	e853 3f00 	ldrex	r3, [r3]
 80024b0:	623b      	str	r3, [r7, #32]
   return(result);
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	3314      	adds	r3, #20
 80024c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80024c6:	633a      	str	r2, [r7, #48]	; 0x30
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ce:	e841 2300 	strex	r3, r2, [r1]
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80024d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1e3      	bne.n	80024a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	330c      	adds	r3, #12
 80024ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	e853 3f00 	ldrex	r3, [r3]
 80024f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f023 0310 	bic.w	r3, r3, #16
 80024fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	330c      	adds	r3, #12
 8002508:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800250c:	61fa      	str	r2, [r7, #28]
 800250e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002510:	69b9      	ldr	r1, [r7, #24]
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	e841 2300 	strex	r3, r2, [r1]
 8002518:	617b      	str	r3, [r7, #20]
   return(result);
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1e3      	bne.n	80024e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002524:	4619      	mov	r1, r3
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f834 	bl	8002594 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800252c:	e023      	b.n	8002576 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800252e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002536:	2b00      	cmp	r3, #0
 8002538:	d009      	beq.n	800254e <HAL_UART_IRQHandler+0x4ea>
 800253a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800253e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f953 	bl	80027f2 <UART_Transmit_IT>
    return;
 800254c:	e014      	b.n	8002578 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800254e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00e      	beq.n	8002578 <HAL_UART_IRQHandler+0x514>
 800255a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800255e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	d008      	beq.n	8002578 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f993 	bl	8002892 <UART_EndTransmit_IT>
    return;
 800256c:	e004      	b.n	8002578 <HAL_UART_IRQHandler+0x514>
    return;
 800256e:	bf00      	nop
 8002570:	e002      	b.n	8002578 <HAL_UART_IRQHandler+0x514>
      return;
 8002572:	bf00      	nop
 8002574:	e000      	b.n	8002578 <HAL_UART_IRQHandler+0x514>
      return;
 8002576:	bf00      	nop
  }
}
 8002578:	37e8      	adds	r7, #232	; 0xe8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop

08002580 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b090      	sub	sp, #64	; 0x40
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025bc:	e050      	b.n	8002660 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c4:	d04c      	beq.n	8002660 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <UART_WaitOnFlagUntilTimeout+0x30>
 80025cc:	f7fe fbce 	bl	8000d6c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025d8:	429a      	cmp	r2, r3
 80025da:	d241      	bcs.n	8002660 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	330c      	adds	r3, #12
 80025e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e6:	e853 3f00 	ldrex	r3, [r3]
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80025f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	330c      	adds	r3, #12
 80025fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025fc:	637a      	str	r2, [r7, #52]	; 0x34
 80025fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002600:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002604:	e841 2300 	strex	r3, r2, [r1]
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800260a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e5      	bne.n	80025dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3314      	adds	r3, #20
 8002616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	e853 3f00 	ldrex	r3, [r3]
 800261e:	613b      	str	r3, [r7, #16]
   return(result);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	63bb      	str	r3, [r7, #56]	; 0x38
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3314      	adds	r3, #20
 800262e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002630:	623a      	str	r2, [r7, #32]
 8002632:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002634:	69f9      	ldr	r1, [r7, #28]
 8002636:	6a3a      	ldr	r2, [r7, #32]
 8002638:	e841 2300 	strex	r3, r2, [r1]
 800263c:	61bb      	str	r3, [r7, #24]
   return(result);
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1e5      	bne.n	8002610 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e00f      	b.n	8002680 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	4013      	ands	r3, r2
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	429a      	cmp	r2, r3
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	429a      	cmp	r2, r3
 800267c:	d09f      	beq.n	80025be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3740      	adds	r7, #64	; 0x40
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	4613      	mov	r3, r2
 8002694:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	88fa      	ldrh	r2, [r7, #6]
 80026a0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	88fa      	ldrh	r2, [r7, #6]
 80026a6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2222      	movs	r2, #34	; 0x22
 80026b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026d4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0201 	orr.w	r2, r2, #1
 80026e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 0220 	orr.w	r2, r2, #32
 80026f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002704:	b480      	push	{r7}
 8002706:	b095      	sub	sp, #84	; 0x54
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	330c      	adds	r3, #12
 8002712:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002716:	e853 3f00 	ldrex	r3, [r3]
 800271a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800271c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	330c      	adds	r3, #12
 800272a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800272c:	643a      	str	r2, [r7, #64]	; 0x40
 800272e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002730:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002732:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002734:	e841 2300 	strex	r3, r2, [r1]
 8002738:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1e5      	bne.n	800270c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3314      	adds	r3, #20
 8002746:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	e853 3f00 	ldrex	r3, [r3]
 800274e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f023 0301 	bic.w	r3, r3, #1
 8002756:	64bb      	str	r3, [r7, #72]	; 0x48
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	3314      	adds	r3, #20
 800275e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002760:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002768:	e841 2300 	strex	r3, r2, [r1]
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e5      	bne.n	8002740 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	2b01      	cmp	r3, #1
 800277a:	d119      	bne.n	80027b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	330c      	adds	r3, #12
 8002782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	e853 3f00 	ldrex	r3, [r3]
 800278a:	60bb      	str	r3, [r7, #8]
   return(result);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f023 0310 	bic.w	r3, r3, #16
 8002792:	647b      	str	r3, [r7, #68]	; 0x44
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	330c      	adds	r3, #12
 800279a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800279c:	61ba      	str	r2, [r7, #24]
 800279e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a0:	6979      	ldr	r1, [r7, #20]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	e841 2300 	strex	r3, r2, [r1]
 80027a8:	613b      	str	r3, [r7, #16]
   return(result);
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e5      	bne.n	800277c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027be:	bf00      	nop
 80027c0:	3754      	adds	r7, #84	; 0x54
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7ff fecb 	bl	8002580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b21      	cmp	r3, #33	; 0x21
 8002804:	d13e      	bne.n	8002884 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280e:	d114      	bne.n	800283a <UART_Transmit_IT+0x48>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d110      	bne.n	800283a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800282c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	1c9a      	adds	r2, r3, #2
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	621a      	str	r2, [r3, #32]
 8002838:	e008      	b.n	800284c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	1c59      	adds	r1, r3, #1
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6211      	str	r1, [r2, #32]
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29b      	uxth	r3, r3
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4619      	mov	r1, r3
 800285a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10f      	bne.n	8002880 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800286e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800287e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e000      	b.n	8002886 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002884:	2302      	movs	r3, #2
  }
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fd ffba 	bl	800082c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b08c      	sub	sp, #48	; 0x30
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b22      	cmp	r3, #34	; 0x22
 80028d4:	f040 80ab 	bne.w	8002a2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e0:	d117      	bne.n	8002912 <UART_Receive_IT+0x50>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d113      	bne.n	8002912 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002900:	b29a      	uxth	r2, r3
 8002902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002904:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	1c9a      	adds	r2, r3, #2
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	629a      	str	r2, [r3, #40]	; 0x28
 8002910:	e026      	b.n	8002960 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002918:	2300      	movs	r3, #0
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002924:	d007      	beq.n	8002936 <UART_Receive_IT+0x74>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10a      	bne.n	8002944 <UART_Receive_IT+0x82>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	e008      	b.n	8002956 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002950:	b2da      	uxtb	r2, r3
 8002952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002954:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29b      	uxth	r3, r3
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4619      	mov	r1, r3
 800296e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002970:	2b00      	cmp	r3, #0
 8002972:	d15a      	bne.n	8002a2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0220 	bic.w	r2, r2, #32
 8002982:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002992:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d135      	bne.n	8002a20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	330c      	adds	r3, #12
 80029c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	e853 3f00 	ldrex	r3, [r3]
 80029c8:	613b      	str	r3, [r7, #16]
   return(result);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	f023 0310 	bic.w	r3, r3, #16
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	330c      	adds	r3, #12
 80029d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029da:	623a      	str	r2, [r7, #32]
 80029dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029de:	69f9      	ldr	r1, [r7, #28]
 80029e0:	6a3a      	ldr	r2, [r7, #32]
 80029e2:	e841 2300 	strex	r3, r2, [r1]
 80029e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1e5      	bne.n	80029ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b10      	cmp	r3, #16
 80029fa:	d10a      	bne.n	8002a12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a16:	4619      	mov	r1, r3
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff fdbb 	bl	8002594 <HAL_UARTEx_RxEventCallback>
 8002a1e:	e002      	b.n	8002a26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7fd ff11 	bl	8000848 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e002      	b.n	8002a30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e000      	b.n	8002a30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002a2e:	2302      	movs	r3, #2
  }
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3730      	adds	r7, #48	; 0x30
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a3c:	b0c0      	sub	sp, #256	; 0x100
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a54:	68d9      	ldr	r1, [r3, #12]
 8002a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	ea40 0301 	orr.w	r3, r0, r1
 8002a60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a90:	f021 010c 	bic.w	r1, r1, #12
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a9e:	430b      	orrs	r3, r1
 8002aa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab2:	6999      	ldr	r1, [r3, #24]
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	ea40 0301 	orr.w	r3, r0, r1
 8002abe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4b8f      	ldr	r3, [pc, #572]	; (8002d04 <UART_SetConfig+0x2cc>)
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d005      	beq.n	8002ad8 <UART_SetConfig+0xa0>
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4b8d      	ldr	r3, [pc, #564]	; (8002d08 <UART_SetConfig+0x2d0>)
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d104      	bne.n	8002ae2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ad8:	f7ff f9a0 	bl	8001e1c <HAL_RCC_GetPCLK2Freq>
 8002adc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ae0:	e003      	b.n	8002aea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ae2:	f7ff f987 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 8002ae6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002af4:	f040 810c 	bne.w	8002d10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002afc:	2200      	movs	r2, #0
 8002afe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b0a:	4622      	mov	r2, r4
 8002b0c:	462b      	mov	r3, r5
 8002b0e:	1891      	adds	r1, r2, r2
 8002b10:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b12:	415b      	adcs	r3, r3
 8002b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	eb12 0801 	adds.w	r8, r2, r1
 8002b20:	4629      	mov	r1, r5
 8002b22:	eb43 0901 	adc.w	r9, r3, r1
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b3a:	4690      	mov	r8, r2
 8002b3c:	4699      	mov	r9, r3
 8002b3e:	4623      	mov	r3, r4
 8002b40:	eb18 0303 	adds.w	r3, r8, r3
 8002b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b48:	462b      	mov	r3, r5
 8002b4a:	eb49 0303 	adc.w	r3, r9, r3
 8002b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b66:	460b      	mov	r3, r1
 8002b68:	18db      	adds	r3, r3, r3
 8002b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	eb42 0303 	adc.w	r3, r2, r3
 8002b72:	657b      	str	r3, [r7, #84]	; 0x54
 8002b74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b7c:	f7fd fb36 	bl	80001ec <__aeabi_uldivmod>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4b61      	ldr	r3, [pc, #388]	; (8002d0c <UART_SetConfig+0x2d4>)
 8002b86:	fba3 2302 	umull	r2, r3, r3, r2
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	011c      	lsls	r4, r3, #4
 8002b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b92:	2200      	movs	r2, #0
 8002b94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ba0:	4642      	mov	r2, r8
 8002ba2:	464b      	mov	r3, r9
 8002ba4:	1891      	adds	r1, r2, r2
 8002ba6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ba8:	415b      	adcs	r3, r3
 8002baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bb0:	4641      	mov	r1, r8
 8002bb2:	eb12 0a01 	adds.w	sl, r2, r1
 8002bb6:	4649      	mov	r1, r9
 8002bb8:	eb43 0b01 	adc.w	fp, r3, r1
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bd0:	4692      	mov	sl, r2
 8002bd2:	469b      	mov	fp, r3
 8002bd4:	4643      	mov	r3, r8
 8002bd6:	eb1a 0303 	adds.w	r3, sl, r3
 8002bda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bde:	464b      	mov	r3, r9
 8002be0:	eb4b 0303 	adc.w	r3, fp, r3
 8002be4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bf4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	18db      	adds	r3, r3, r3
 8002c00:	643b      	str	r3, [r7, #64]	; 0x40
 8002c02:	4613      	mov	r3, r2
 8002c04:	eb42 0303 	adc.w	r3, r2, r3
 8002c08:	647b      	str	r3, [r7, #68]	; 0x44
 8002c0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c12:	f7fd faeb 	bl	80001ec <__aeabi_uldivmod>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4b3b      	ldr	r3, [pc, #236]	; (8002d0c <UART_SetConfig+0x2d4>)
 8002c1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	2264      	movs	r2, #100	; 0x64
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	1acb      	subs	r3, r1, r3
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c32:	4b36      	ldr	r3, [pc, #216]	; (8002d0c <UART_SetConfig+0x2d4>)
 8002c34:	fba3 2302 	umull	r2, r3, r3, r2
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c40:	441c      	add	r4, r3
 8002c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c46:	2200      	movs	r2, #0
 8002c48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c54:	4642      	mov	r2, r8
 8002c56:	464b      	mov	r3, r9
 8002c58:	1891      	adds	r1, r2, r2
 8002c5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c5c:	415b      	adcs	r3, r3
 8002c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c64:	4641      	mov	r1, r8
 8002c66:	1851      	adds	r1, r2, r1
 8002c68:	6339      	str	r1, [r7, #48]	; 0x30
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	414b      	adcs	r3, r1
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	00cb      	lsls	r3, r1, #3
 8002c80:	4651      	mov	r1, sl
 8002c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c86:	4651      	mov	r1, sl
 8002c88:	00ca      	lsls	r2, r1, #3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4642      	mov	r2, r8
 8002c92:	189b      	adds	r3, r3, r2
 8002c94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c98:	464b      	mov	r3, r9
 8002c9a:	460a      	mov	r2, r1
 8002c9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cb8:	460b      	mov	r3, r1
 8002cba:	18db      	adds	r3, r3, r3
 8002cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	eb42 0303 	adc.w	r3, r2, r3
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002cce:	f7fd fa8d 	bl	80001ec <__aeabi_uldivmod>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <UART_SetConfig+0x2d4>)
 8002cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	2164      	movs	r1, #100	; 0x64
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	3332      	adds	r3, #50	; 0x32
 8002cea:	4a08      	ldr	r2, [pc, #32]	; (8002d0c <UART_SetConfig+0x2d4>)
 8002cec:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	f003 0207 	and.w	r2, r3, #7
 8002cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4422      	add	r2, r4
 8002cfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d00:	e105      	b.n	8002f0e <UART_SetConfig+0x4d6>
 8002d02:	bf00      	nop
 8002d04:	40011000 	.word	0x40011000
 8002d08:	40011400 	.word	0x40011400
 8002d0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d14:	2200      	movs	r2, #0
 8002d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d22:	4642      	mov	r2, r8
 8002d24:	464b      	mov	r3, r9
 8002d26:	1891      	adds	r1, r2, r2
 8002d28:	6239      	str	r1, [r7, #32]
 8002d2a:	415b      	adcs	r3, r3
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d32:	4641      	mov	r1, r8
 8002d34:	1854      	adds	r4, r2, r1
 8002d36:	4649      	mov	r1, r9
 8002d38:	eb43 0501 	adc.w	r5, r3, r1
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	00eb      	lsls	r3, r5, #3
 8002d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d4a:	00e2      	lsls	r2, r4, #3
 8002d4c:	4614      	mov	r4, r2
 8002d4e:	461d      	mov	r5, r3
 8002d50:	4643      	mov	r3, r8
 8002d52:	18e3      	adds	r3, r4, r3
 8002d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d58:	464b      	mov	r3, r9
 8002d5a:	eb45 0303 	adc.w	r3, r5, r3
 8002d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d7e:	4629      	mov	r1, r5
 8002d80:	008b      	lsls	r3, r1, #2
 8002d82:	4621      	mov	r1, r4
 8002d84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d88:	4621      	mov	r1, r4
 8002d8a:	008a      	lsls	r2, r1, #2
 8002d8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d90:	f7fd fa2c 	bl	80001ec <__aeabi_uldivmod>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4b60      	ldr	r3, [pc, #384]	; (8002f1c <UART_SetConfig+0x4e4>)
 8002d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	011c      	lsls	r4, r3, #4
 8002da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002dac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002db0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002db4:	4642      	mov	r2, r8
 8002db6:	464b      	mov	r3, r9
 8002db8:	1891      	adds	r1, r2, r2
 8002dba:	61b9      	str	r1, [r7, #24]
 8002dbc:	415b      	adcs	r3, r3
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dc4:	4641      	mov	r1, r8
 8002dc6:	1851      	adds	r1, r2, r1
 8002dc8:	6139      	str	r1, [r7, #16]
 8002dca:	4649      	mov	r1, r9
 8002dcc:	414b      	adcs	r3, r1
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ddc:	4659      	mov	r1, fp
 8002dde:	00cb      	lsls	r3, r1, #3
 8002de0:	4651      	mov	r1, sl
 8002de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002de6:	4651      	mov	r1, sl
 8002de8:	00ca      	lsls	r2, r1, #3
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	4603      	mov	r3, r0
 8002df0:	4642      	mov	r2, r8
 8002df2:	189b      	adds	r3, r3, r2
 8002df4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002df8:	464b      	mov	r3, r9
 8002dfa:	460a      	mov	r2, r1
 8002dfc:	eb42 0303 	adc.w	r3, r2, r3
 8002e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e1c:	4649      	mov	r1, r9
 8002e1e:	008b      	lsls	r3, r1, #2
 8002e20:	4641      	mov	r1, r8
 8002e22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e26:	4641      	mov	r1, r8
 8002e28:	008a      	lsls	r2, r1, #2
 8002e2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e2e:	f7fd f9dd 	bl	80001ec <__aeabi_uldivmod>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4b39      	ldr	r3, [pc, #228]	; (8002f1c <UART_SetConfig+0x4e4>)
 8002e38:	fba3 1302 	umull	r1, r3, r3, r2
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	2164      	movs	r1, #100	; 0x64
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	3332      	adds	r3, #50	; 0x32
 8002e4a:	4a34      	ldr	r2, [pc, #208]	; (8002f1c <UART_SetConfig+0x4e4>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e56:	441c      	add	r4, r3
 8002e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	673b      	str	r3, [r7, #112]	; 0x70
 8002e60:	677a      	str	r2, [r7, #116]	; 0x74
 8002e62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e66:	4642      	mov	r2, r8
 8002e68:	464b      	mov	r3, r9
 8002e6a:	1891      	adds	r1, r2, r2
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	415b      	adcs	r3, r3
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e76:	4641      	mov	r1, r8
 8002e78:	1851      	adds	r1, r2, r1
 8002e7a:	6039      	str	r1, [r7, #0]
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	414b      	adcs	r3, r1
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e8e:	4659      	mov	r1, fp
 8002e90:	00cb      	lsls	r3, r1, #3
 8002e92:	4651      	mov	r1, sl
 8002e94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e98:	4651      	mov	r1, sl
 8002e9a:	00ca      	lsls	r2, r1, #3
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4642      	mov	r2, r8
 8002ea4:	189b      	adds	r3, r3, r2
 8002ea6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ea8:	464b      	mov	r3, r9
 8002eaa:	460a      	mov	r2, r1
 8002eac:	eb42 0303 	adc.w	r3, r2, r3
 8002eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	663b      	str	r3, [r7, #96]	; 0x60
 8002ebc:	667a      	str	r2, [r7, #100]	; 0x64
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002eca:	4649      	mov	r1, r9
 8002ecc:	008b      	lsls	r3, r1, #2
 8002ece:	4641      	mov	r1, r8
 8002ed0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ed4:	4641      	mov	r1, r8
 8002ed6:	008a      	lsls	r2, r1, #2
 8002ed8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002edc:	f7fd f986 	bl	80001ec <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <UART_SetConfig+0x4e4>)
 8002ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	2164      	movs	r1, #100	; 0x64
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	3332      	adds	r3, #50	; 0x32
 8002ef8:	4a08      	ldr	r2, [pc, #32]	; (8002f1c <UART_SetConfig+0x4e4>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	f003 020f 	and.w	r2, r3, #15
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4422      	add	r2, r4
 8002f0c:	609a      	str	r2, [r3, #8]
}
 8002f0e:	bf00      	nop
 8002f10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f14:	46bd      	mov	sp, r7
 8002f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f1a:	bf00      	nop
 8002f1c:	51eb851f 	.word	0x51eb851f

08002f20 <__errno>:
 8002f20:	4b01      	ldr	r3, [pc, #4]	; (8002f28 <__errno+0x8>)
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	2000003c 	.word	0x2000003c

08002f2c <__libc_init_array>:
 8002f2c:	b570      	push	{r4, r5, r6, lr}
 8002f2e:	4d0d      	ldr	r5, [pc, #52]	; (8002f64 <__libc_init_array+0x38>)
 8002f30:	4c0d      	ldr	r4, [pc, #52]	; (8002f68 <__libc_init_array+0x3c>)
 8002f32:	1b64      	subs	r4, r4, r5
 8002f34:	10a4      	asrs	r4, r4, #2
 8002f36:	2600      	movs	r6, #0
 8002f38:	42a6      	cmp	r6, r4
 8002f3a:	d109      	bne.n	8002f50 <__libc_init_array+0x24>
 8002f3c:	4d0b      	ldr	r5, [pc, #44]	; (8002f6c <__libc_init_array+0x40>)
 8002f3e:	4c0c      	ldr	r4, [pc, #48]	; (8002f70 <__libc_init_array+0x44>)
 8002f40:	f000 fd1e 	bl	8003980 <_init>
 8002f44:	1b64      	subs	r4, r4, r5
 8002f46:	10a4      	asrs	r4, r4, #2
 8002f48:	2600      	movs	r6, #0
 8002f4a:	42a6      	cmp	r6, r4
 8002f4c:	d105      	bne.n	8002f5a <__libc_init_array+0x2e>
 8002f4e:	bd70      	pop	{r4, r5, r6, pc}
 8002f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f54:	4798      	blx	r3
 8002f56:	3601      	adds	r6, #1
 8002f58:	e7ee      	b.n	8002f38 <__libc_init_array+0xc>
 8002f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f5e:	4798      	blx	r3
 8002f60:	3601      	adds	r6, #1
 8002f62:	e7f2      	b.n	8002f4a <__libc_init_array+0x1e>
 8002f64:	08003b18 	.word	0x08003b18
 8002f68:	08003b18 	.word	0x08003b18
 8002f6c:	08003b18 	.word	0x08003b18
 8002f70:	08003b1c 	.word	0x08003b1c

08002f74 <memset>:
 8002f74:	4402      	add	r2, r0
 8002f76:	4603      	mov	r3, r0
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d100      	bne.n	8002f7e <memset+0xa>
 8002f7c:	4770      	bx	lr
 8002f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f82:	e7f9      	b.n	8002f78 <memset+0x4>

08002f84 <_puts_r>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	460e      	mov	r6, r1
 8002f88:	4605      	mov	r5, r0
 8002f8a:	b118      	cbz	r0, 8002f94 <_puts_r+0x10>
 8002f8c:	6983      	ldr	r3, [r0, #24]
 8002f8e:	b90b      	cbnz	r3, 8002f94 <_puts_r+0x10>
 8002f90:	f000 fa48 	bl	8003424 <__sinit>
 8002f94:	69ab      	ldr	r3, [r5, #24]
 8002f96:	68ac      	ldr	r4, [r5, #8]
 8002f98:	b913      	cbnz	r3, 8002fa0 <_puts_r+0x1c>
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	f000 fa42 	bl	8003424 <__sinit>
 8002fa0:	4b2c      	ldr	r3, [pc, #176]	; (8003054 <_puts_r+0xd0>)
 8002fa2:	429c      	cmp	r4, r3
 8002fa4:	d120      	bne.n	8002fe8 <_puts_r+0x64>
 8002fa6:	686c      	ldr	r4, [r5, #4]
 8002fa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002faa:	07db      	lsls	r3, r3, #31
 8002fac:	d405      	bmi.n	8002fba <_puts_r+0x36>
 8002fae:	89a3      	ldrh	r3, [r4, #12]
 8002fb0:	0598      	lsls	r0, r3, #22
 8002fb2:	d402      	bmi.n	8002fba <_puts_r+0x36>
 8002fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fb6:	f000 fad3 	bl	8003560 <__retarget_lock_acquire_recursive>
 8002fba:	89a3      	ldrh	r3, [r4, #12]
 8002fbc:	0719      	lsls	r1, r3, #28
 8002fbe:	d51d      	bpl.n	8002ffc <_puts_r+0x78>
 8002fc0:	6923      	ldr	r3, [r4, #16]
 8002fc2:	b1db      	cbz	r3, 8002ffc <_puts_r+0x78>
 8002fc4:	3e01      	subs	r6, #1
 8002fc6:	68a3      	ldr	r3, [r4, #8]
 8002fc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	60a3      	str	r3, [r4, #8]
 8002fd0:	bb39      	cbnz	r1, 8003022 <_puts_r+0x9e>
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	da38      	bge.n	8003048 <_puts_r+0xc4>
 8002fd6:	4622      	mov	r2, r4
 8002fd8:	210a      	movs	r1, #10
 8002fda:	4628      	mov	r0, r5
 8002fdc:	f000 f848 	bl	8003070 <__swbuf_r>
 8002fe0:	3001      	adds	r0, #1
 8002fe2:	d011      	beq.n	8003008 <_puts_r+0x84>
 8002fe4:	250a      	movs	r5, #10
 8002fe6:	e011      	b.n	800300c <_puts_r+0x88>
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <_puts_r+0xd4>)
 8002fea:	429c      	cmp	r4, r3
 8002fec:	d101      	bne.n	8002ff2 <_puts_r+0x6e>
 8002fee:	68ac      	ldr	r4, [r5, #8]
 8002ff0:	e7da      	b.n	8002fa8 <_puts_r+0x24>
 8002ff2:	4b1a      	ldr	r3, [pc, #104]	; (800305c <_puts_r+0xd8>)
 8002ff4:	429c      	cmp	r4, r3
 8002ff6:	bf08      	it	eq
 8002ff8:	68ec      	ldreq	r4, [r5, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <_puts_r+0x24>
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	4628      	mov	r0, r5
 8003000:	f000 f888 	bl	8003114 <__swsetup_r>
 8003004:	2800      	cmp	r0, #0
 8003006:	d0dd      	beq.n	8002fc4 <_puts_r+0x40>
 8003008:	f04f 35ff 	mov.w	r5, #4294967295
 800300c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800300e:	07da      	lsls	r2, r3, #31
 8003010:	d405      	bmi.n	800301e <_puts_r+0x9a>
 8003012:	89a3      	ldrh	r3, [r4, #12]
 8003014:	059b      	lsls	r3, r3, #22
 8003016:	d402      	bmi.n	800301e <_puts_r+0x9a>
 8003018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800301a:	f000 faa2 	bl	8003562 <__retarget_lock_release_recursive>
 800301e:	4628      	mov	r0, r5
 8003020:	bd70      	pop	{r4, r5, r6, pc}
 8003022:	2b00      	cmp	r3, #0
 8003024:	da04      	bge.n	8003030 <_puts_r+0xac>
 8003026:	69a2      	ldr	r2, [r4, #24]
 8003028:	429a      	cmp	r2, r3
 800302a:	dc06      	bgt.n	800303a <_puts_r+0xb6>
 800302c:	290a      	cmp	r1, #10
 800302e:	d004      	beq.n	800303a <_puts_r+0xb6>
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	6022      	str	r2, [r4, #0]
 8003036:	7019      	strb	r1, [r3, #0]
 8003038:	e7c5      	b.n	8002fc6 <_puts_r+0x42>
 800303a:	4622      	mov	r2, r4
 800303c:	4628      	mov	r0, r5
 800303e:	f000 f817 	bl	8003070 <__swbuf_r>
 8003042:	3001      	adds	r0, #1
 8003044:	d1bf      	bne.n	8002fc6 <_puts_r+0x42>
 8003046:	e7df      	b.n	8003008 <_puts_r+0x84>
 8003048:	6823      	ldr	r3, [r4, #0]
 800304a:	250a      	movs	r5, #10
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	6022      	str	r2, [r4, #0]
 8003050:	701d      	strb	r5, [r3, #0]
 8003052:	e7db      	b.n	800300c <_puts_r+0x88>
 8003054:	08003ad0 	.word	0x08003ad0
 8003058:	08003af0 	.word	0x08003af0
 800305c:	08003ab0 	.word	0x08003ab0

08003060 <puts>:
 8003060:	4b02      	ldr	r3, [pc, #8]	; (800306c <puts+0xc>)
 8003062:	4601      	mov	r1, r0
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	f7ff bf8d 	b.w	8002f84 <_puts_r>
 800306a:	bf00      	nop
 800306c:	2000003c 	.word	0x2000003c

08003070 <__swbuf_r>:
 8003070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003072:	460e      	mov	r6, r1
 8003074:	4614      	mov	r4, r2
 8003076:	4605      	mov	r5, r0
 8003078:	b118      	cbz	r0, 8003082 <__swbuf_r+0x12>
 800307a:	6983      	ldr	r3, [r0, #24]
 800307c:	b90b      	cbnz	r3, 8003082 <__swbuf_r+0x12>
 800307e:	f000 f9d1 	bl	8003424 <__sinit>
 8003082:	4b21      	ldr	r3, [pc, #132]	; (8003108 <__swbuf_r+0x98>)
 8003084:	429c      	cmp	r4, r3
 8003086:	d12b      	bne.n	80030e0 <__swbuf_r+0x70>
 8003088:	686c      	ldr	r4, [r5, #4]
 800308a:	69a3      	ldr	r3, [r4, #24]
 800308c:	60a3      	str	r3, [r4, #8]
 800308e:	89a3      	ldrh	r3, [r4, #12]
 8003090:	071a      	lsls	r2, r3, #28
 8003092:	d52f      	bpl.n	80030f4 <__swbuf_r+0x84>
 8003094:	6923      	ldr	r3, [r4, #16]
 8003096:	b36b      	cbz	r3, 80030f4 <__swbuf_r+0x84>
 8003098:	6923      	ldr	r3, [r4, #16]
 800309a:	6820      	ldr	r0, [r4, #0]
 800309c:	1ac0      	subs	r0, r0, r3
 800309e:	6963      	ldr	r3, [r4, #20]
 80030a0:	b2f6      	uxtb	r6, r6
 80030a2:	4283      	cmp	r3, r0
 80030a4:	4637      	mov	r7, r6
 80030a6:	dc04      	bgt.n	80030b2 <__swbuf_r+0x42>
 80030a8:	4621      	mov	r1, r4
 80030aa:	4628      	mov	r0, r5
 80030ac:	f000 f926 	bl	80032fc <_fflush_r>
 80030b0:	bb30      	cbnz	r0, 8003100 <__swbuf_r+0x90>
 80030b2:	68a3      	ldr	r3, [r4, #8]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	60a3      	str	r3, [r4, #8]
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	6022      	str	r2, [r4, #0]
 80030be:	701e      	strb	r6, [r3, #0]
 80030c0:	6963      	ldr	r3, [r4, #20]
 80030c2:	3001      	adds	r0, #1
 80030c4:	4283      	cmp	r3, r0
 80030c6:	d004      	beq.n	80030d2 <__swbuf_r+0x62>
 80030c8:	89a3      	ldrh	r3, [r4, #12]
 80030ca:	07db      	lsls	r3, r3, #31
 80030cc:	d506      	bpl.n	80030dc <__swbuf_r+0x6c>
 80030ce:	2e0a      	cmp	r6, #10
 80030d0:	d104      	bne.n	80030dc <__swbuf_r+0x6c>
 80030d2:	4621      	mov	r1, r4
 80030d4:	4628      	mov	r0, r5
 80030d6:	f000 f911 	bl	80032fc <_fflush_r>
 80030da:	b988      	cbnz	r0, 8003100 <__swbuf_r+0x90>
 80030dc:	4638      	mov	r0, r7
 80030de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030e0:	4b0a      	ldr	r3, [pc, #40]	; (800310c <__swbuf_r+0x9c>)
 80030e2:	429c      	cmp	r4, r3
 80030e4:	d101      	bne.n	80030ea <__swbuf_r+0x7a>
 80030e6:	68ac      	ldr	r4, [r5, #8]
 80030e8:	e7cf      	b.n	800308a <__swbuf_r+0x1a>
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <__swbuf_r+0xa0>)
 80030ec:	429c      	cmp	r4, r3
 80030ee:	bf08      	it	eq
 80030f0:	68ec      	ldreq	r4, [r5, #12]
 80030f2:	e7ca      	b.n	800308a <__swbuf_r+0x1a>
 80030f4:	4621      	mov	r1, r4
 80030f6:	4628      	mov	r0, r5
 80030f8:	f000 f80c 	bl	8003114 <__swsetup_r>
 80030fc:	2800      	cmp	r0, #0
 80030fe:	d0cb      	beq.n	8003098 <__swbuf_r+0x28>
 8003100:	f04f 37ff 	mov.w	r7, #4294967295
 8003104:	e7ea      	b.n	80030dc <__swbuf_r+0x6c>
 8003106:	bf00      	nop
 8003108:	08003ad0 	.word	0x08003ad0
 800310c:	08003af0 	.word	0x08003af0
 8003110:	08003ab0 	.word	0x08003ab0

08003114 <__swsetup_r>:
 8003114:	4b32      	ldr	r3, [pc, #200]	; (80031e0 <__swsetup_r+0xcc>)
 8003116:	b570      	push	{r4, r5, r6, lr}
 8003118:	681d      	ldr	r5, [r3, #0]
 800311a:	4606      	mov	r6, r0
 800311c:	460c      	mov	r4, r1
 800311e:	b125      	cbz	r5, 800312a <__swsetup_r+0x16>
 8003120:	69ab      	ldr	r3, [r5, #24]
 8003122:	b913      	cbnz	r3, 800312a <__swsetup_r+0x16>
 8003124:	4628      	mov	r0, r5
 8003126:	f000 f97d 	bl	8003424 <__sinit>
 800312a:	4b2e      	ldr	r3, [pc, #184]	; (80031e4 <__swsetup_r+0xd0>)
 800312c:	429c      	cmp	r4, r3
 800312e:	d10f      	bne.n	8003150 <__swsetup_r+0x3c>
 8003130:	686c      	ldr	r4, [r5, #4]
 8003132:	89a3      	ldrh	r3, [r4, #12]
 8003134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003138:	0719      	lsls	r1, r3, #28
 800313a:	d42c      	bmi.n	8003196 <__swsetup_r+0x82>
 800313c:	06dd      	lsls	r5, r3, #27
 800313e:	d411      	bmi.n	8003164 <__swsetup_r+0x50>
 8003140:	2309      	movs	r3, #9
 8003142:	6033      	str	r3, [r6, #0]
 8003144:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003148:	81a3      	strh	r3, [r4, #12]
 800314a:	f04f 30ff 	mov.w	r0, #4294967295
 800314e:	e03e      	b.n	80031ce <__swsetup_r+0xba>
 8003150:	4b25      	ldr	r3, [pc, #148]	; (80031e8 <__swsetup_r+0xd4>)
 8003152:	429c      	cmp	r4, r3
 8003154:	d101      	bne.n	800315a <__swsetup_r+0x46>
 8003156:	68ac      	ldr	r4, [r5, #8]
 8003158:	e7eb      	b.n	8003132 <__swsetup_r+0x1e>
 800315a:	4b24      	ldr	r3, [pc, #144]	; (80031ec <__swsetup_r+0xd8>)
 800315c:	429c      	cmp	r4, r3
 800315e:	bf08      	it	eq
 8003160:	68ec      	ldreq	r4, [r5, #12]
 8003162:	e7e6      	b.n	8003132 <__swsetup_r+0x1e>
 8003164:	0758      	lsls	r0, r3, #29
 8003166:	d512      	bpl.n	800318e <__swsetup_r+0x7a>
 8003168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800316a:	b141      	cbz	r1, 800317e <__swsetup_r+0x6a>
 800316c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003170:	4299      	cmp	r1, r3
 8003172:	d002      	beq.n	800317a <__swsetup_r+0x66>
 8003174:	4630      	mov	r0, r6
 8003176:	f000 fa5b 	bl	8003630 <_free_r>
 800317a:	2300      	movs	r3, #0
 800317c:	6363      	str	r3, [r4, #52]	; 0x34
 800317e:	89a3      	ldrh	r3, [r4, #12]
 8003180:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003184:	81a3      	strh	r3, [r4, #12]
 8003186:	2300      	movs	r3, #0
 8003188:	6063      	str	r3, [r4, #4]
 800318a:	6923      	ldr	r3, [r4, #16]
 800318c:	6023      	str	r3, [r4, #0]
 800318e:	89a3      	ldrh	r3, [r4, #12]
 8003190:	f043 0308 	orr.w	r3, r3, #8
 8003194:	81a3      	strh	r3, [r4, #12]
 8003196:	6923      	ldr	r3, [r4, #16]
 8003198:	b94b      	cbnz	r3, 80031ae <__swsetup_r+0x9a>
 800319a:	89a3      	ldrh	r3, [r4, #12]
 800319c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80031a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a4:	d003      	beq.n	80031ae <__swsetup_r+0x9a>
 80031a6:	4621      	mov	r1, r4
 80031a8:	4630      	mov	r0, r6
 80031aa:	f000 fa01 	bl	80035b0 <__smakebuf_r>
 80031ae:	89a0      	ldrh	r0, [r4, #12]
 80031b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031b4:	f010 0301 	ands.w	r3, r0, #1
 80031b8:	d00a      	beq.n	80031d0 <__swsetup_r+0xbc>
 80031ba:	2300      	movs	r3, #0
 80031bc:	60a3      	str	r3, [r4, #8]
 80031be:	6963      	ldr	r3, [r4, #20]
 80031c0:	425b      	negs	r3, r3
 80031c2:	61a3      	str	r3, [r4, #24]
 80031c4:	6923      	ldr	r3, [r4, #16]
 80031c6:	b943      	cbnz	r3, 80031da <__swsetup_r+0xc6>
 80031c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80031cc:	d1ba      	bne.n	8003144 <__swsetup_r+0x30>
 80031ce:	bd70      	pop	{r4, r5, r6, pc}
 80031d0:	0781      	lsls	r1, r0, #30
 80031d2:	bf58      	it	pl
 80031d4:	6963      	ldrpl	r3, [r4, #20]
 80031d6:	60a3      	str	r3, [r4, #8]
 80031d8:	e7f4      	b.n	80031c4 <__swsetup_r+0xb0>
 80031da:	2000      	movs	r0, #0
 80031dc:	e7f7      	b.n	80031ce <__swsetup_r+0xba>
 80031de:	bf00      	nop
 80031e0:	2000003c 	.word	0x2000003c
 80031e4:	08003ad0 	.word	0x08003ad0
 80031e8:	08003af0 	.word	0x08003af0
 80031ec:	08003ab0 	.word	0x08003ab0

080031f0 <__sflush_r>:
 80031f0:	898a      	ldrh	r2, [r1, #12]
 80031f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031f6:	4605      	mov	r5, r0
 80031f8:	0710      	lsls	r0, r2, #28
 80031fa:	460c      	mov	r4, r1
 80031fc:	d458      	bmi.n	80032b0 <__sflush_r+0xc0>
 80031fe:	684b      	ldr	r3, [r1, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	dc05      	bgt.n	8003210 <__sflush_r+0x20>
 8003204:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	dc02      	bgt.n	8003210 <__sflush_r+0x20>
 800320a:	2000      	movs	r0, #0
 800320c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003210:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003212:	2e00      	cmp	r6, #0
 8003214:	d0f9      	beq.n	800320a <__sflush_r+0x1a>
 8003216:	2300      	movs	r3, #0
 8003218:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800321c:	682f      	ldr	r7, [r5, #0]
 800321e:	602b      	str	r3, [r5, #0]
 8003220:	d032      	beq.n	8003288 <__sflush_r+0x98>
 8003222:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003224:	89a3      	ldrh	r3, [r4, #12]
 8003226:	075a      	lsls	r2, r3, #29
 8003228:	d505      	bpl.n	8003236 <__sflush_r+0x46>
 800322a:	6863      	ldr	r3, [r4, #4]
 800322c:	1ac0      	subs	r0, r0, r3
 800322e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003230:	b10b      	cbz	r3, 8003236 <__sflush_r+0x46>
 8003232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003234:	1ac0      	subs	r0, r0, r3
 8003236:	2300      	movs	r3, #0
 8003238:	4602      	mov	r2, r0
 800323a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800323c:	6a21      	ldr	r1, [r4, #32]
 800323e:	4628      	mov	r0, r5
 8003240:	47b0      	blx	r6
 8003242:	1c43      	adds	r3, r0, #1
 8003244:	89a3      	ldrh	r3, [r4, #12]
 8003246:	d106      	bne.n	8003256 <__sflush_r+0x66>
 8003248:	6829      	ldr	r1, [r5, #0]
 800324a:	291d      	cmp	r1, #29
 800324c:	d82c      	bhi.n	80032a8 <__sflush_r+0xb8>
 800324e:	4a2a      	ldr	r2, [pc, #168]	; (80032f8 <__sflush_r+0x108>)
 8003250:	40ca      	lsrs	r2, r1
 8003252:	07d6      	lsls	r6, r2, #31
 8003254:	d528      	bpl.n	80032a8 <__sflush_r+0xb8>
 8003256:	2200      	movs	r2, #0
 8003258:	6062      	str	r2, [r4, #4]
 800325a:	04d9      	lsls	r1, r3, #19
 800325c:	6922      	ldr	r2, [r4, #16]
 800325e:	6022      	str	r2, [r4, #0]
 8003260:	d504      	bpl.n	800326c <__sflush_r+0x7c>
 8003262:	1c42      	adds	r2, r0, #1
 8003264:	d101      	bne.n	800326a <__sflush_r+0x7a>
 8003266:	682b      	ldr	r3, [r5, #0]
 8003268:	b903      	cbnz	r3, 800326c <__sflush_r+0x7c>
 800326a:	6560      	str	r0, [r4, #84]	; 0x54
 800326c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800326e:	602f      	str	r7, [r5, #0]
 8003270:	2900      	cmp	r1, #0
 8003272:	d0ca      	beq.n	800320a <__sflush_r+0x1a>
 8003274:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003278:	4299      	cmp	r1, r3
 800327a:	d002      	beq.n	8003282 <__sflush_r+0x92>
 800327c:	4628      	mov	r0, r5
 800327e:	f000 f9d7 	bl	8003630 <_free_r>
 8003282:	2000      	movs	r0, #0
 8003284:	6360      	str	r0, [r4, #52]	; 0x34
 8003286:	e7c1      	b.n	800320c <__sflush_r+0x1c>
 8003288:	6a21      	ldr	r1, [r4, #32]
 800328a:	2301      	movs	r3, #1
 800328c:	4628      	mov	r0, r5
 800328e:	47b0      	blx	r6
 8003290:	1c41      	adds	r1, r0, #1
 8003292:	d1c7      	bne.n	8003224 <__sflush_r+0x34>
 8003294:	682b      	ldr	r3, [r5, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0c4      	beq.n	8003224 <__sflush_r+0x34>
 800329a:	2b1d      	cmp	r3, #29
 800329c:	d001      	beq.n	80032a2 <__sflush_r+0xb2>
 800329e:	2b16      	cmp	r3, #22
 80032a0:	d101      	bne.n	80032a6 <__sflush_r+0xb6>
 80032a2:	602f      	str	r7, [r5, #0]
 80032a4:	e7b1      	b.n	800320a <__sflush_r+0x1a>
 80032a6:	89a3      	ldrh	r3, [r4, #12]
 80032a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ac:	81a3      	strh	r3, [r4, #12]
 80032ae:	e7ad      	b.n	800320c <__sflush_r+0x1c>
 80032b0:	690f      	ldr	r7, [r1, #16]
 80032b2:	2f00      	cmp	r7, #0
 80032b4:	d0a9      	beq.n	800320a <__sflush_r+0x1a>
 80032b6:	0793      	lsls	r3, r2, #30
 80032b8:	680e      	ldr	r6, [r1, #0]
 80032ba:	bf08      	it	eq
 80032bc:	694b      	ldreq	r3, [r1, #20]
 80032be:	600f      	str	r7, [r1, #0]
 80032c0:	bf18      	it	ne
 80032c2:	2300      	movne	r3, #0
 80032c4:	eba6 0807 	sub.w	r8, r6, r7
 80032c8:	608b      	str	r3, [r1, #8]
 80032ca:	f1b8 0f00 	cmp.w	r8, #0
 80032ce:	dd9c      	ble.n	800320a <__sflush_r+0x1a>
 80032d0:	6a21      	ldr	r1, [r4, #32]
 80032d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80032d4:	4643      	mov	r3, r8
 80032d6:	463a      	mov	r2, r7
 80032d8:	4628      	mov	r0, r5
 80032da:	47b0      	blx	r6
 80032dc:	2800      	cmp	r0, #0
 80032de:	dc06      	bgt.n	80032ee <__sflush_r+0xfe>
 80032e0:	89a3      	ldrh	r3, [r4, #12]
 80032e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e6:	81a3      	strh	r3, [r4, #12]
 80032e8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ec:	e78e      	b.n	800320c <__sflush_r+0x1c>
 80032ee:	4407      	add	r7, r0
 80032f0:	eba8 0800 	sub.w	r8, r8, r0
 80032f4:	e7e9      	b.n	80032ca <__sflush_r+0xda>
 80032f6:	bf00      	nop
 80032f8:	20400001 	.word	0x20400001

080032fc <_fflush_r>:
 80032fc:	b538      	push	{r3, r4, r5, lr}
 80032fe:	690b      	ldr	r3, [r1, #16]
 8003300:	4605      	mov	r5, r0
 8003302:	460c      	mov	r4, r1
 8003304:	b913      	cbnz	r3, 800330c <_fflush_r+0x10>
 8003306:	2500      	movs	r5, #0
 8003308:	4628      	mov	r0, r5
 800330a:	bd38      	pop	{r3, r4, r5, pc}
 800330c:	b118      	cbz	r0, 8003316 <_fflush_r+0x1a>
 800330e:	6983      	ldr	r3, [r0, #24]
 8003310:	b90b      	cbnz	r3, 8003316 <_fflush_r+0x1a>
 8003312:	f000 f887 	bl	8003424 <__sinit>
 8003316:	4b14      	ldr	r3, [pc, #80]	; (8003368 <_fflush_r+0x6c>)
 8003318:	429c      	cmp	r4, r3
 800331a:	d11b      	bne.n	8003354 <_fflush_r+0x58>
 800331c:	686c      	ldr	r4, [r5, #4]
 800331e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0ef      	beq.n	8003306 <_fflush_r+0xa>
 8003326:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003328:	07d0      	lsls	r0, r2, #31
 800332a:	d404      	bmi.n	8003336 <_fflush_r+0x3a>
 800332c:	0599      	lsls	r1, r3, #22
 800332e:	d402      	bmi.n	8003336 <_fflush_r+0x3a>
 8003330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003332:	f000 f915 	bl	8003560 <__retarget_lock_acquire_recursive>
 8003336:	4628      	mov	r0, r5
 8003338:	4621      	mov	r1, r4
 800333a:	f7ff ff59 	bl	80031f0 <__sflush_r>
 800333e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003340:	07da      	lsls	r2, r3, #31
 8003342:	4605      	mov	r5, r0
 8003344:	d4e0      	bmi.n	8003308 <_fflush_r+0xc>
 8003346:	89a3      	ldrh	r3, [r4, #12]
 8003348:	059b      	lsls	r3, r3, #22
 800334a:	d4dd      	bmi.n	8003308 <_fflush_r+0xc>
 800334c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800334e:	f000 f908 	bl	8003562 <__retarget_lock_release_recursive>
 8003352:	e7d9      	b.n	8003308 <_fflush_r+0xc>
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <_fflush_r+0x70>)
 8003356:	429c      	cmp	r4, r3
 8003358:	d101      	bne.n	800335e <_fflush_r+0x62>
 800335a:	68ac      	ldr	r4, [r5, #8]
 800335c:	e7df      	b.n	800331e <_fflush_r+0x22>
 800335e:	4b04      	ldr	r3, [pc, #16]	; (8003370 <_fflush_r+0x74>)
 8003360:	429c      	cmp	r4, r3
 8003362:	bf08      	it	eq
 8003364:	68ec      	ldreq	r4, [r5, #12]
 8003366:	e7da      	b.n	800331e <_fflush_r+0x22>
 8003368:	08003ad0 	.word	0x08003ad0
 800336c:	08003af0 	.word	0x08003af0
 8003370:	08003ab0 	.word	0x08003ab0

08003374 <std>:
 8003374:	2300      	movs	r3, #0
 8003376:	b510      	push	{r4, lr}
 8003378:	4604      	mov	r4, r0
 800337a:	e9c0 3300 	strd	r3, r3, [r0]
 800337e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003382:	6083      	str	r3, [r0, #8]
 8003384:	8181      	strh	r1, [r0, #12]
 8003386:	6643      	str	r3, [r0, #100]	; 0x64
 8003388:	81c2      	strh	r2, [r0, #14]
 800338a:	6183      	str	r3, [r0, #24]
 800338c:	4619      	mov	r1, r3
 800338e:	2208      	movs	r2, #8
 8003390:	305c      	adds	r0, #92	; 0x5c
 8003392:	f7ff fdef 	bl	8002f74 <memset>
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <std+0x38>)
 8003398:	6263      	str	r3, [r4, #36]	; 0x24
 800339a:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <std+0x3c>)
 800339c:	62a3      	str	r3, [r4, #40]	; 0x28
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <std+0x40>)
 80033a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033a2:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <std+0x44>)
 80033a4:	6224      	str	r4, [r4, #32]
 80033a6:	6323      	str	r3, [r4, #48]	; 0x30
 80033a8:	bd10      	pop	{r4, pc}
 80033aa:	bf00      	nop
 80033ac:	08003811 	.word	0x08003811
 80033b0:	08003833 	.word	0x08003833
 80033b4:	0800386b 	.word	0x0800386b
 80033b8:	0800388f 	.word	0x0800388f

080033bc <_cleanup_r>:
 80033bc:	4901      	ldr	r1, [pc, #4]	; (80033c4 <_cleanup_r+0x8>)
 80033be:	f000 b8af 	b.w	8003520 <_fwalk_reent>
 80033c2:	bf00      	nop
 80033c4:	080032fd 	.word	0x080032fd

080033c8 <__sfmoreglue>:
 80033c8:	b570      	push	{r4, r5, r6, lr}
 80033ca:	2268      	movs	r2, #104	; 0x68
 80033cc:	1e4d      	subs	r5, r1, #1
 80033ce:	4355      	muls	r5, r2
 80033d0:	460e      	mov	r6, r1
 80033d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80033d6:	f000 f997 	bl	8003708 <_malloc_r>
 80033da:	4604      	mov	r4, r0
 80033dc:	b140      	cbz	r0, 80033f0 <__sfmoreglue+0x28>
 80033de:	2100      	movs	r1, #0
 80033e0:	e9c0 1600 	strd	r1, r6, [r0]
 80033e4:	300c      	adds	r0, #12
 80033e6:	60a0      	str	r0, [r4, #8]
 80033e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80033ec:	f7ff fdc2 	bl	8002f74 <memset>
 80033f0:	4620      	mov	r0, r4
 80033f2:	bd70      	pop	{r4, r5, r6, pc}

080033f4 <__sfp_lock_acquire>:
 80033f4:	4801      	ldr	r0, [pc, #4]	; (80033fc <__sfp_lock_acquire+0x8>)
 80033f6:	f000 b8b3 	b.w	8003560 <__retarget_lock_acquire_recursive>
 80033fa:	bf00      	nop
 80033fc:	20000115 	.word	0x20000115

08003400 <__sfp_lock_release>:
 8003400:	4801      	ldr	r0, [pc, #4]	; (8003408 <__sfp_lock_release+0x8>)
 8003402:	f000 b8ae 	b.w	8003562 <__retarget_lock_release_recursive>
 8003406:	bf00      	nop
 8003408:	20000115 	.word	0x20000115

0800340c <__sinit_lock_acquire>:
 800340c:	4801      	ldr	r0, [pc, #4]	; (8003414 <__sinit_lock_acquire+0x8>)
 800340e:	f000 b8a7 	b.w	8003560 <__retarget_lock_acquire_recursive>
 8003412:	bf00      	nop
 8003414:	20000116 	.word	0x20000116

08003418 <__sinit_lock_release>:
 8003418:	4801      	ldr	r0, [pc, #4]	; (8003420 <__sinit_lock_release+0x8>)
 800341a:	f000 b8a2 	b.w	8003562 <__retarget_lock_release_recursive>
 800341e:	bf00      	nop
 8003420:	20000116 	.word	0x20000116

08003424 <__sinit>:
 8003424:	b510      	push	{r4, lr}
 8003426:	4604      	mov	r4, r0
 8003428:	f7ff fff0 	bl	800340c <__sinit_lock_acquire>
 800342c:	69a3      	ldr	r3, [r4, #24]
 800342e:	b11b      	cbz	r3, 8003438 <__sinit+0x14>
 8003430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003434:	f7ff bff0 	b.w	8003418 <__sinit_lock_release>
 8003438:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800343c:	6523      	str	r3, [r4, #80]	; 0x50
 800343e:	4b13      	ldr	r3, [pc, #76]	; (800348c <__sinit+0x68>)
 8003440:	4a13      	ldr	r2, [pc, #76]	; (8003490 <__sinit+0x6c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	62a2      	str	r2, [r4, #40]	; 0x28
 8003446:	42a3      	cmp	r3, r4
 8003448:	bf04      	itt	eq
 800344a:	2301      	moveq	r3, #1
 800344c:	61a3      	streq	r3, [r4, #24]
 800344e:	4620      	mov	r0, r4
 8003450:	f000 f820 	bl	8003494 <__sfp>
 8003454:	6060      	str	r0, [r4, #4]
 8003456:	4620      	mov	r0, r4
 8003458:	f000 f81c 	bl	8003494 <__sfp>
 800345c:	60a0      	str	r0, [r4, #8]
 800345e:	4620      	mov	r0, r4
 8003460:	f000 f818 	bl	8003494 <__sfp>
 8003464:	2200      	movs	r2, #0
 8003466:	60e0      	str	r0, [r4, #12]
 8003468:	2104      	movs	r1, #4
 800346a:	6860      	ldr	r0, [r4, #4]
 800346c:	f7ff ff82 	bl	8003374 <std>
 8003470:	68a0      	ldr	r0, [r4, #8]
 8003472:	2201      	movs	r2, #1
 8003474:	2109      	movs	r1, #9
 8003476:	f7ff ff7d 	bl	8003374 <std>
 800347a:	68e0      	ldr	r0, [r4, #12]
 800347c:	2202      	movs	r2, #2
 800347e:	2112      	movs	r1, #18
 8003480:	f7ff ff78 	bl	8003374 <std>
 8003484:	2301      	movs	r3, #1
 8003486:	61a3      	str	r3, [r4, #24]
 8003488:	e7d2      	b.n	8003430 <__sinit+0xc>
 800348a:	bf00      	nop
 800348c:	08003aac 	.word	0x08003aac
 8003490:	080033bd 	.word	0x080033bd

08003494 <__sfp>:
 8003494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003496:	4607      	mov	r7, r0
 8003498:	f7ff ffac 	bl	80033f4 <__sfp_lock_acquire>
 800349c:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <__sfp+0x84>)
 800349e:	681e      	ldr	r6, [r3, #0]
 80034a0:	69b3      	ldr	r3, [r6, #24]
 80034a2:	b913      	cbnz	r3, 80034aa <__sfp+0x16>
 80034a4:	4630      	mov	r0, r6
 80034a6:	f7ff ffbd 	bl	8003424 <__sinit>
 80034aa:	3648      	adds	r6, #72	; 0x48
 80034ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	d503      	bpl.n	80034bc <__sfp+0x28>
 80034b4:	6833      	ldr	r3, [r6, #0]
 80034b6:	b30b      	cbz	r3, 80034fc <__sfp+0x68>
 80034b8:	6836      	ldr	r6, [r6, #0]
 80034ba:	e7f7      	b.n	80034ac <__sfp+0x18>
 80034bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80034c0:	b9d5      	cbnz	r5, 80034f8 <__sfp+0x64>
 80034c2:	4b16      	ldr	r3, [pc, #88]	; (800351c <__sfp+0x88>)
 80034c4:	60e3      	str	r3, [r4, #12]
 80034c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80034ca:	6665      	str	r5, [r4, #100]	; 0x64
 80034cc:	f000 f847 	bl	800355e <__retarget_lock_init_recursive>
 80034d0:	f7ff ff96 	bl	8003400 <__sfp_lock_release>
 80034d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80034d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80034dc:	6025      	str	r5, [r4, #0]
 80034de:	61a5      	str	r5, [r4, #24]
 80034e0:	2208      	movs	r2, #8
 80034e2:	4629      	mov	r1, r5
 80034e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80034e8:	f7ff fd44 	bl	8002f74 <memset>
 80034ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80034f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80034f4:	4620      	mov	r0, r4
 80034f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034f8:	3468      	adds	r4, #104	; 0x68
 80034fa:	e7d9      	b.n	80034b0 <__sfp+0x1c>
 80034fc:	2104      	movs	r1, #4
 80034fe:	4638      	mov	r0, r7
 8003500:	f7ff ff62 	bl	80033c8 <__sfmoreglue>
 8003504:	4604      	mov	r4, r0
 8003506:	6030      	str	r0, [r6, #0]
 8003508:	2800      	cmp	r0, #0
 800350a:	d1d5      	bne.n	80034b8 <__sfp+0x24>
 800350c:	f7ff ff78 	bl	8003400 <__sfp_lock_release>
 8003510:	230c      	movs	r3, #12
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	e7ee      	b.n	80034f4 <__sfp+0x60>
 8003516:	bf00      	nop
 8003518:	08003aac 	.word	0x08003aac
 800351c:	ffff0001 	.word	0xffff0001

08003520 <_fwalk_reent>:
 8003520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003524:	4606      	mov	r6, r0
 8003526:	4688      	mov	r8, r1
 8003528:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800352c:	2700      	movs	r7, #0
 800352e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003532:	f1b9 0901 	subs.w	r9, r9, #1
 8003536:	d505      	bpl.n	8003544 <_fwalk_reent+0x24>
 8003538:	6824      	ldr	r4, [r4, #0]
 800353a:	2c00      	cmp	r4, #0
 800353c:	d1f7      	bne.n	800352e <_fwalk_reent+0xe>
 800353e:	4638      	mov	r0, r7
 8003540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003544:	89ab      	ldrh	r3, [r5, #12]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d907      	bls.n	800355a <_fwalk_reent+0x3a>
 800354a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800354e:	3301      	adds	r3, #1
 8003550:	d003      	beq.n	800355a <_fwalk_reent+0x3a>
 8003552:	4629      	mov	r1, r5
 8003554:	4630      	mov	r0, r6
 8003556:	47c0      	blx	r8
 8003558:	4307      	orrs	r7, r0
 800355a:	3568      	adds	r5, #104	; 0x68
 800355c:	e7e9      	b.n	8003532 <_fwalk_reent+0x12>

0800355e <__retarget_lock_init_recursive>:
 800355e:	4770      	bx	lr

08003560 <__retarget_lock_acquire_recursive>:
 8003560:	4770      	bx	lr

08003562 <__retarget_lock_release_recursive>:
 8003562:	4770      	bx	lr

08003564 <__swhatbuf_r>:
 8003564:	b570      	push	{r4, r5, r6, lr}
 8003566:	460e      	mov	r6, r1
 8003568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800356c:	2900      	cmp	r1, #0
 800356e:	b096      	sub	sp, #88	; 0x58
 8003570:	4614      	mov	r4, r2
 8003572:	461d      	mov	r5, r3
 8003574:	da08      	bge.n	8003588 <__swhatbuf_r+0x24>
 8003576:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	602a      	str	r2, [r5, #0]
 800357e:	061a      	lsls	r2, r3, #24
 8003580:	d410      	bmi.n	80035a4 <__swhatbuf_r+0x40>
 8003582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003586:	e00e      	b.n	80035a6 <__swhatbuf_r+0x42>
 8003588:	466a      	mov	r2, sp
 800358a:	f000 f9a7 	bl	80038dc <_fstat_r>
 800358e:	2800      	cmp	r0, #0
 8003590:	dbf1      	blt.n	8003576 <__swhatbuf_r+0x12>
 8003592:	9a01      	ldr	r2, [sp, #4]
 8003594:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003598:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800359c:	425a      	negs	r2, r3
 800359e:	415a      	adcs	r2, r3
 80035a0:	602a      	str	r2, [r5, #0]
 80035a2:	e7ee      	b.n	8003582 <__swhatbuf_r+0x1e>
 80035a4:	2340      	movs	r3, #64	; 0x40
 80035a6:	2000      	movs	r0, #0
 80035a8:	6023      	str	r3, [r4, #0]
 80035aa:	b016      	add	sp, #88	; 0x58
 80035ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080035b0 <__smakebuf_r>:
 80035b0:	898b      	ldrh	r3, [r1, #12]
 80035b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80035b4:	079d      	lsls	r5, r3, #30
 80035b6:	4606      	mov	r6, r0
 80035b8:	460c      	mov	r4, r1
 80035ba:	d507      	bpl.n	80035cc <__smakebuf_r+0x1c>
 80035bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80035c0:	6023      	str	r3, [r4, #0]
 80035c2:	6123      	str	r3, [r4, #16]
 80035c4:	2301      	movs	r3, #1
 80035c6:	6163      	str	r3, [r4, #20]
 80035c8:	b002      	add	sp, #8
 80035ca:	bd70      	pop	{r4, r5, r6, pc}
 80035cc:	ab01      	add	r3, sp, #4
 80035ce:	466a      	mov	r2, sp
 80035d0:	f7ff ffc8 	bl	8003564 <__swhatbuf_r>
 80035d4:	9900      	ldr	r1, [sp, #0]
 80035d6:	4605      	mov	r5, r0
 80035d8:	4630      	mov	r0, r6
 80035da:	f000 f895 	bl	8003708 <_malloc_r>
 80035de:	b948      	cbnz	r0, 80035f4 <__smakebuf_r+0x44>
 80035e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035e4:	059a      	lsls	r2, r3, #22
 80035e6:	d4ef      	bmi.n	80035c8 <__smakebuf_r+0x18>
 80035e8:	f023 0303 	bic.w	r3, r3, #3
 80035ec:	f043 0302 	orr.w	r3, r3, #2
 80035f0:	81a3      	strh	r3, [r4, #12]
 80035f2:	e7e3      	b.n	80035bc <__smakebuf_r+0xc>
 80035f4:	4b0d      	ldr	r3, [pc, #52]	; (800362c <__smakebuf_r+0x7c>)
 80035f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80035f8:	89a3      	ldrh	r3, [r4, #12]
 80035fa:	6020      	str	r0, [r4, #0]
 80035fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003600:	81a3      	strh	r3, [r4, #12]
 8003602:	9b00      	ldr	r3, [sp, #0]
 8003604:	6163      	str	r3, [r4, #20]
 8003606:	9b01      	ldr	r3, [sp, #4]
 8003608:	6120      	str	r0, [r4, #16]
 800360a:	b15b      	cbz	r3, 8003624 <__smakebuf_r+0x74>
 800360c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003610:	4630      	mov	r0, r6
 8003612:	f000 f975 	bl	8003900 <_isatty_r>
 8003616:	b128      	cbz	r0, 8003624 <__smakebuf_r+0x74>
 8003618:	89a3      	ldrh	r3, [r4, #12]
 800361a:	f023 0303 	bic.w	r3, r3, #3
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	81a3      	strh	r3, [r4, #12]
 8003624:	89a0      	ldrh	r0, [r4, #12]
 8003626:	4305      	orrs	r5, r0
 8003628:	81a5      	strh	r5, [r4, #12]
 800362a:	e7cd      	b.n	80035c8 <__smakebuf_r+0x18>
 800362c:	080033bd 	.word	0x080033bd

08003630 <_free_r>:
 8003630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003632:	2900      	cmp	r1, #0
 8003634:	d044      	beq.n	80036c0 <_free_r+0x90>
 8003636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800363a:	9001      	str	r0, [sp, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	f1a1 0404 	sub.w	r4, r1, #4
 8003642:	bfb8      	it	lt
 8003644:	18e4      	addlt	r4, r4, r3
 8003646:	f000 f97d 	bl	8003944 <__malloc_lock>
 800364a:	4a1e      	ldr	r2, [pc, #120]	; (80036c4 <_free_r+0x94>)
 800364c:	9801      	ldr	r0, [sp, #4]
 800364e:	6813      	ldr	r3, [r2, #0]
 8003650:	b933      	cbnz	r3, 8003660 <_free_r+0x30>
 8003652:	6063      	str	r3, [r4, #4]
 8003654:	6014      	str	r4, [r2, #0]
 8003656:	b003      	add	sp, #12
 8003658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800365c:	f000 b978 	b.w	8003950 <__malloc_unlock>
 8003660:	42a3      	cmp	r3, r4
 8003662:	d908      	bls.n	8003676 <_free_r+0x46>
 8003664:	6825      	ldr	r5, [r4, #0]
 8003666:	1961      	adds	r1, r4, r5
 8003668:	428b      	cmp	r3, r1
 800366a:	bf01      	itttt	eq
 800366c:	6819      	ldreq	r1, [r3, #0]
 800366e:	685b      	ldreq	r3, [r3, #4]
 8003670:	1949      	addeq	r1, r1, r5
 8003672:	6021      	streq	r1, [r4, #0]
 8003674:	e7ed      	b.n	8003652 <_free_r+0x22>
 8003676:	461a      	mov	r2, r3
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	b10b      	cbz	r3, 8003680 <_free_r+0x50>
 800367c:	42a3      	cmp	r3, r4
 800367e:	d9fa      	bls.n	8003676 <_free_r+0x46>
 8003680:	6811      	ldr	r1, [r2, #0]
 8003682:	1855      	adds	r5, r2, r1
 8003684:	42a5      	cmp	r5, r4
 8003686:	d10b      	bne.n	80036a0 <_free_r+0x70>
 8003688:	6824      	ldr	r4, [r4, #0]
 800368a:	4421      	add	r1, r4
 800368c:	1854      	adds	r4, r2, r1
 800368e:	42a3      	cmp	r3, r4
 8003690:	6011      	str	r1, [r2, #0]
 8003692:	d1e0      	bne.n	8003656 <_free_r+0x26>
 8003694:	681c      	ldr	r4, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	6053      	str	r3, [r2, #4]
 800369a:	4421      	add	r1, r4
 800369c:	6011      	str	r1, [r2, #0]
 800369e:	e7da      	b.n	8003656 <_free_r+0x26>
 80036a0:	d902      	bls.n	80036a8 <_free_r+0x78>
 80036a2:	230c      	movs	r3, #12
 80036a4:	6003      	str	r3, [r0, #0]
 80036a6:	e7d6      	b.n	8003656 <_free_r+0x26>
 80036a8:	6825      	ldr	r5, [r4, #0]
 80036aa:	1961      	adds	r1, r4, r5
 80036ac:	428b      	cmp	r3, r1
 80036ae:	bf04      	itt	eq
 80036b0:	6819      	ldreq	r1, [r3, #0]
 80036b2:	685b      	ldreq	r3, [r3, #4]
 80036b4:	6063      	str	r3, [r4, #4]
 80036b6:	bf04      	itt	eq
 80036b8:	1949      	addeq	r1, r1, r5
 80036ba:	6021      	streq	r1, [r4, #0]
 80036bc:	6054      	str	r4, [r2, #4]
 80036be:	e7ca      	b.n	8003656 <_free_r+0x26>
 80036c0:	b003      	add	sp, #12
 80036c2:	bd30      	pop	{r4, r5, pc}
 80036c4:	20000118 	.word	0x20000118

080036c8 <sbrk_aligned>:
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	4e0e      	ldr	r6, [pc, #56]	; (8003704 <sbrk_aligned+0x3c>)
 80036cc:	460c      	mov	r4, r1
 80036ce:	6831      	ldr	r1, [r6, #0]
 80036d0:	4605      	mov	r5, r0
 80036d2:	b911      	cbnz	r1, 80036da <sbrk_aligned+0x12>
 80036d4:	f000 f88c 	bl	80037f0 <_sbrk_r>
 80036d8:	6030      	str	r0, [r6, #0]
 80036da:	4621      	mov	r1, r4
 80036dc:	4628      	mov	r0, r5
 80036de:	f000 f887 	bl	80037f0 <_sbrk_r>
 80036e2:	1c43      	adds	r3, r0, #1
 80036e4:	d00a      	beq.n	80036fc <sbrk_aligned+0x34>
 80036e6:	1cc4      	adds	r4, r0, #3
 80036e8:	f024 0403 	bic.w	r4, r4, #3
 80036ec:	42a0      	cmp	r0, r4
 80036ee:	d007      	beq.n	8003700 <sbrk_aligned+0x38>
 80036f0:	1a21      	subs	r1, r4, r0
 80036f2:	4628      	mov	r0, r5
 80036f4:	f000 f87c 	bl	80037f0 <_sbrk_r>
 80036f8:	3001      	adds	r0, #1
 80036fa:	d101      	bne.n	8003700 <sbrk_aligned+0x38>
 80036fc:	f04f 34ff 	mov.w	r4, #4294967295
 8003700:	4620      	mov	r0, r4
 8003702:	bd70      	pop	{r4, r5, r6, pc}
 8003704:	2000011c 	.word	0x2000011c

08003708 <_malloc_r>:
 8003708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800370c:	1ccd      	adds	r5, r1, #3
 800370e:	f025 0503 	bic.w	r5, r5, #3
 8003712:	3508      	adds	r5, #8
 8003714:	2d0c      	cmp	r5, #12
 8003716:	bf38      	it	cc
 8003718:	250c      	movcc	r5, #12
 800371a:	2d00      	cmp	r5, #0
 800371c:	4607      	mov	r7, r0
 800371e:	db01      	blt.n	8003724 <_malloc_r+0x1c>
 8003720:	42a9      	cmp	r1, r5
 8003722:	d905      	bls.n	8003730 <_malloc_r+0x28>
 8003724:	230c      	movs	r3, #12
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	2600      	movs	r6, #0
 800372a:	4630      	mov	r0, r6
 800372c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003730:	4e2e      	ldr	r6, [pc, #184]	; (80037ec <_malloc_r+0xe4>)
 8003732:	f000 f907 	bl	8003944 <__malloc_lock>
 8003736:	6833      	ldr	r3, [r6, #0]
 8003738:	461c      	mov	r4, r3
 800373a:	bb34      	cbnz	r4, 800378a <_malloc_r+0x82>
 800373c:	4629      	mov	r1, r5
 800373e:	4638      	mov	r0, r7
 8003740:	f7ff ffc2 	bl	80036c8 <sbrk_aligned>
 8003744:	1c43      	adds	r3, r0, #1
 8003746:	4604      	mov	r4, r0
 8003748:	d14d      	bne.n	80037e6 <_malloc_r+0xde>
 800374a:	6834      	ldr	r4, [r6, #0]
 800374c:	4626      	mov	r6, r4
 800374e:	2e00      	cmp	r6, #0
 8003750:	d140      	bne.n	80037d4 <_malloc_r+0xcc>
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	4631      	mov	r1, r6
 8003756:	4638      	mov	r0, r7
 8003758:	eb04 0803 	add.w	r8, r4, r3
 800375c:	f000 f848 	bl	80037f0 <_sbrk_r>
 8003760:	4580      	cmp	r8, r0
 8003762:	d13a      	bne.n	80037da <_malloc_r+0xd2>
 8003764:	6821      	ldr	r1, [r4, #0]
 8003766:	3503      	adds	r5, #3
 8003768:	1a6d      	subs	r5, r5, r1
 800376a:	f025 0503 	bic.w	r5, r5, #3
 800376e:	3508      	adds	r5, #8
 8003770:	2d0c      	cmp	r5, #12
 8003772:	bf38      	it	cc
 8003774:	250c      	movcc	r5, #12
 8003776:	4629      	mov	r1, r5
 8003778:	4638      	mov	r0, r7
 800377a:	f7ff ffa5 	bl	80036c8 <sbrk_aligned>
 800377e:	3001      	adds	r0, #1
 8003780:	d02b      	beq.n	80037da <_malloc_r+0xd2>
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	442b      	add	r3, r5
 8003786:	6023      	str	r3, [r4, #0]
 8003788:	e00e      	b.n	80037a8 <_malloc_r+0xa0>
 800378a:	6822      	ldr	r2, [r4, #0]
 800378c:	1b52      	subs	r2, r2, r5
 800378e:	d41e      	bmi.n	80037ce <_malloc_r+0xc6>
 8003790:	2a0b      	cmp	r2, #11
 8003792:	d916      	bls.n	80037c2 <_malloc_r+0xba>
 8003794:	1961      	adds	r1, r4, r5
 8003796:	42a3      	cmp	r3, r4
 8003798:	6025      	str	r5, [r4, #0]
 800379a:	bf18      	it	ne
 800379c:	6059      	strne	r1, [r3, #4]
 800379e:	6863      	ldr	r3, [r4, #4]
 80037a0:	bf08      	it	eq
 80037a2:	6031      	streq	r1, [r6, #0]
 80037a4:	5162      	str	r2, [r4, r5]
 80037a6:	604b      	str	r3, [r1, #4]
 80037a8:	4638      	mov	r0, r7
 80037aa:	f104 060b 	add.w	r6, r4, #11
 80037ae:	f000 f8cf 	bl	8003950 <__malloc_unlock>
 80037b2:	f026 0607 	bic.w	r6, r6, #7
 80037b6:	1d23      	adds	r3, r4, #4
 80037b8:	1af2      	subs	r2, r6, r3
 80037ba:	d0b6      	beq.n	800372a <_malloc_r+0x22>
 80037bc:	1b9b      	subs	r3, r3, r6
 80037be:	50a3      	str	r3, [r4, r2]
 80037c0:	e7b3      	b.n	800372a <_malloc_r+0x22>
 80037c2:	6862      	ldr	r2, [r4, #4]
 80037c4:	42a3      	cmp	r3, r4
 80037c6:	bf0c      	ite	eq
 80037c8:	6032      	streq	r2, [r6, #0]
 80037ca:	605a      	strne	r2, [r3, #4]
 80037cc:	e7ec      	b.n	80037a8 <_malloc_r+0xa0>
 80037ce:	4623      	mov	r3, r4
 80037d0:	6864      	ldr	r4, [r4, #4]
 80037d2:	e7b2      	b.n	800373a <_malloc_r+0x32>
 80037d4:	4634      	mov	r4, r6
 80037d6:	6876      	ldr	r6, [r6, #4]
 80037d8:	e7b9      	b.n	800374e <_malloc_r+0x46>
 80037da:	230c      	movs	r3, #12
 80037dc:	603b      	str	r3, [r7, #0]
 80037de:	4638      	mov	r0, r7
 80037e0:	f000 f8b6 	bl	8003950 <__malloc_unlock>
 80037e4:	e7a1      	b.n	800372a <_malloc_r+0x22>
 80037e6:	6025      	str	r5, [r4, #0]
 80037e8:	e7de      	b.n	80037a8 <_malloc_r+0xa0>
 80037ea:	bf00      	nop
 80037ec:	20000118 	.word	0x20000118

080037f0 <_sbrk_r>:
 80037f0:	b538      	push	{r3, r4, r5, lr}
 80037f2:	4d06      	ldr	r5, [pc, #24]	; (800380c <_sbrk_r+0x1c>)
 80037f4:	2300      	movs	r3, #0
 80037f6:	4604      	mov	r4, r0
 80037f8:	4608      	mov	r0, r1
 80037fa:	602b      	str	r3, [r5, #0]
 80037fc:	f7fd f9de 	bl	8000bbc <_sbrk>
 8003800:	1c43      	adds	r3, r0, #1
 8003802:	d102      	bne.n	800380a <_sbrk_r+0x1a>
 8003804:	682b      	ldr	r3, [r5, #0]
 8003806:	b103      	cbz	r3, 800380a <_sbrk_r+0x1a>
 8003808:	6023      	str	r3, [r4, #0]
 800380a:	bd38      	pop	{r3, r4, r5, pc}
 800380c:	20000120 	.word	0x20000120

08003810 <__sread>:
 8003810:	b510      	push	{r4, lr}
 8003812:	460c      	mov	r4, r1
 8003814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003818:	f000 f8a0 	bl	800395c <_read_r>
 800381c:	2800      	cmp	r0, #0
 800381e:	bfab      	itete	ge
 8003820:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003822:	89a3      	ldrhlt	r3, [r4, #12]
 8003824:	181b      	addge	r3, r3, r0
 8003826:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800382a:	bfac      	ite	ge
 800382c:	6563      	strge	r3, [r4, #84]	; 0x54
 800382e:	81a3      	strhlt	r3, [r4, #12]
 8003830:	bd10      	pop	{r4, pc}

08003832 <__swrite>:
 8003832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003836:	461f      	mov	r7, r3
 8003838:	898b      	ldrh	r3, [r1, #12]
 800383a:	05db      	lsls	r3, r3, #23
 800383c:	4605      	mov	r5, r0
 800383e:	460c      	mov	r4, r1
 8003840:	4616      	mov	r6, r2
 8003842:	d505      	bpl.n	8003850 <__swrite+0x1e>
 8003844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003848:	2302      	movs	r3, #2
 800384a:	2200      	movs	r2, #0
 800384c:	f000 f868 	bl	8003920 <_lseek_r>
 8003850:	89a3      	ldrh	r3, [r4, #12]
 8003852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003856:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800385a:	81a3      	strh	r3, [r4, #12]
 800385c:	4632      	mov	r2, r6
 800385e:	463b      	mov	r3, r7
 8003860:	4628      	mov	r0, r5
 8003862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003866:	f000 b817 	b.w	8003898 <_write_r>

0800386a <__sseek>:
 800386a:	b510      	push	{r4, lr}
 800386c:	460c      	mov	r4, r1
 800386e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003872:	f000 f855 	bl	8003920 <_lseek_r>
 8003876:	1c43      	adds	r3, r0, #1
 8003878:	89a3      	ldrh	r3, [r4, #12]
 800387a:	bf15      	itete	ne
 800387c:	6560      	strne	r0, [r4, #84]	; 0x54
 800387e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003882:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003886:	81a3      	strheq	r3, [r4, #12]
 8003888:	bf18      	it	ne
 800388a:	81a3      	strhne	r3, [r4, #12]
 800388c:	bd10      	pop	{r4, pc}

0800388e <__sclose>:
 800388e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003892:	f000 b813 	b.w	80038bc <_close_r>
	...

08003898 <_write_r>:
 8003898:	b538      	push	{r3, r4, r5, lr}
 800389a:	4d07      	ldr	r5, [pc, #28]	; (80038b8 <_write_r+0x20>)
 800389c:	4604      	mov	r4, r0
 800389e:	4608      	mov	r0, r1
 80038a0:	4611      	mov	r1, r2
 80038a2:	2200      	movs	r2, #0
 80038a4:	602a      	str	r2, [r5, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	f7fc fe98 	bl	80005dc <_write>
 80038ac:	1c43      	adds	r3, r0, #1
 80038ae:	d102      	bne.n	80038b6 <_write_r+0x1e>
 80038b0:	682b      	ldr	r3, [r5, #0]
 80038b2:	b103      	cbz	r3, 80038b6 <_write_r+0x1e>
 80038b4:	6023      	str	r3, [r4, #0]
 80038b6:	bd38      	pop	{r3, r4, r5, pc}
 80038b8:	20000120 	.word	0x20000120

080038bc <_close_r>:
 80038bc:	b538      	push	{r3, r4, r5, lr}
 80038be:	4d06      	ldr	r5, [pc, #24]	; (80038d8 <_close_r+0x1c>)
 80038c0:	2300      	movs	r3, #0
 80038c2:	4604      	mov	r4, r0
 80038c4:	4608      	mov	r0, r1
 80038c6:	602b      	str	r3, [r5, #0]
 80038c8:	f7fd f943 	bl	8000b52 <_close>
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	d102      	bne.n	80038d6 <_close_r+0x1a>
 80038d0:	682b      	ldr	r3, [r5, #0]
 80038d2:	b103      	cbz	r3, 80038d6 <_close_r+0x1a>
 80038d4:	6023      	str	r3, [r4, #0]
 80038d6:	bd38      	pop	{r3, r4, r5, pc}
 80038d8:	20000120 	.word	0x20000120

080038dc <_fstat_r>:
 80038dc:	b538      	push	{r3, r4, r5, lr}
 80038de:	4d07      	ldr	r5, [pc, #28]	; (80038fc <_fstat_r+0x20>)
 80038e0:	2300      	movs	r3, #0
 80038e2:	4604      	mov	r4, r0
 80038e4:	4608      	mov	r0, r1
 80038e6:	4611      	mov	r1, r2
 80038e8:	602b      	str	r3, [r5, #0]
 80038ea:	f7fd f93e 	bl	8000b6a <_fstat>
 80038ee:	1c43      	adds	r3, r0, #1
 80038f0:	d102      	bne.n	80038f8 <_fstat_r+0x1c>
 80038f2:	682b      	ldr	r3, [r5, #0]
 80038f4:	b103      	cbz	r3, 80038f8 <_fstat_r+0x1c>
 80038f6:	6023      	str	r3, [r4, #0]
 80038f8:	bd38      	pop	{r3, r4, r5, pc}
 80038fa:	bf00      	nop
 80038fc:	20000120 	.word	0x20000120

08003900 <_isatty_r>:
 8003900:	b538      	push	{r3, r4, r5, lr}
 8003902:	4d06      	ldr	r5, [pc, #24]	; (800391c <_isatty_r+0x1c>)
 8003904:	2300      	movs	r3, #0
 8003906:	4604      	mov	r4, r0
 8003908:	4608      	mov	r0, r1
 800390a:	602b      	str	r3, [r5, #0]
 800390c:	f7fd f93d 	bl	8000b8a <_isatty>
 8003910:	1c43      	adds	r3, r0, #1
 8003912:	d102      	bne.n	800391a <_isatty_r+0x1a>
 8003914:	682b      	ldr	r3, [r5, #0]
 8003916:	b103      	cbz	r3, 800391a <_isatty_r+0x1a>
 8003918:	6023      	str	r3, [r4, #0]
 800391a:	bd38      	pop	{r3, r4, r5, pc}
 800391c:	20000120 	.word	0x20000120

08003920 <_lseek_r>:
 8003920:	b538      	push	{r3, r4, r5, lr}
 8003922:	4d07      	ldr	r5, [pc, #28]	; (8003940 <_lseek_r+0x20>)
 8003924:	4604      	mov	r4, r0
 8003926:	4608      	mov	r0, r1
 8003928:	4611      	mov	r1, r2
 800392a:	2200      	movs	r2, #0
 800392c:	602a      	str	r2, [r5, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	f7fd f936 	bl	8000ba0 <_lseek>
 8003934:	1c43      	adds	r3, r0, #1
 8003936:	d102      	bne.n	800393e <_lseek_r+0x1e>
 8003938:	682b      	ldr	r3, [r5, #0]
 800393a:	b103      	cbz	r3, 800393e <_lseek_r+0x1e>
 800393c:	6023      	str	r3, [r4, #0]
 800393e:	bd38      	pop	{r3, r4, r5, pc}
 8003940:	20000120 	.word	0x20000120

08003944 <__malloc_lock>:
 8003944:	4801      	ldr	r0, [pc, #4]	; (800394c <__malloc_lock+0x8>)
 8003946:	f7ff be0b 	b.w	8003560 <__retarget_lock_acquire_recursive>
 800394a:	bf00      	nop
 800394c:	20000114 	.word	0x20000114

08003950 <__malloc_unlock>:
 8003950:	4801      	ldr	r0, [pc, #4]	; (8003958 <__malloc_unlock+0x8>)
 8003952:	f7ff be06 	b.w	8003562 <__retarget_lock_release_recursive>
 8003956:	bf00      	nop
 8003958:	20000114 	.word	0x20000114

0800395c <_read_r>:
 800395c:	b538      	push	{r3, r4, r5, lr}
 800395e:	4d07      	ldr	r5, [pc, #28]	; (800397c <_read_r+0x20>)
 8003960:	4604      	mov	r4, r0
 8003962:	4608      	mov	r0, r1
 8003964:	4611      	mov	r1, r2
 8003966:	2200      	movs	r2, #0
 8003968:	602a      	str	r2, [r5, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	f7fd f8d4 	bl	8000b18 <_read>
 8003970:	1c43      	adds	r3, r0, #1
 8003972:	d102      	bne.n	800397a <_read_r+0x1e>
 8003974:	682b      	ldr	r3, [r5, #0]
 8003976:	b103      	cbz	r3, 800397a <_read_r+0x1e>
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	bd38      	pop	{r3, r4, r5, pc}
 800397c:	20000120 	.word	0x20000120

08003980 <_init>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	bf00      	nop
 8003984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003986:	bc08      	pop	{r3}
 8003988:	469e      	mov	lr, r3
 800398a:	4770      	bx	lr

0800398c <_fini>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr
