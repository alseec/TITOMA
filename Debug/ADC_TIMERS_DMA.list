
ADC_TIMERS_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008784  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  08008938  08008938  00018938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ff4  08008ff4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008ff4  08008ff4  00018ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ffc  08008ffc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ffc  08008ffc  00018ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009000  08009000  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000188  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000368  20000368  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ffaf  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020fe  00000000  00000000  000301bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  000322c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e90  00000000  00000000  00033218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000328d  00000000  00000000  000340a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010884  00000000  00000000  00037335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd787  00000000  00000000  00047bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00125340  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000521c  00000000  00000000  00125390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800891c 	.word	0x0800891c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800891c 	.word	0x0800891c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <CS_Config_Low>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//---------------START - CS Configurations----------------------//

void CS_Config_Low() {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

		HAL_GPIO_WritePin(BMP280_CS_GPIO_Port, BMP280_CS_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2110      	movs	r1, #16
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <CS_Config_Low+0x14>)
 8000f76:	f002 f99f 	bl	80032b8 <HAL_GPIO_WritePin>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020800 	.word	0x40020800

08000f84 <CS_Config_High>:


void CS_Config_High() {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BMP280_CS_GPIO_Port, BMP280_CS_Pin, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <CS_Config_High+0x14>)
 8000f8e:	f002 f993 	bl	80032b8 <HAL_GPIO_WritePin>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40020800 	.word	0x40020800

08000f9c <SPI_Read_Write>:
//---------------END - CS Configurations----------------------//

//---------------START - READ/WRITE FUNCTIONS----------------------//
uint8_t SPI_Read_Write(uint8_t spi_tx_data)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
	uint8_t spi_rx_data = 255;
 8000fa6:	23ff      	movs	r3, #255	; 0xff
 8000fa8:	73fb      	strb	r3, [r7, #15]
	if (HAL_SPI_Transmit(&hspi1, &spi_tx_data, 1, 100) == HAL_OK){
 8000faa:	1df9      	adds	r1, r7, #7
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	2201      	movs	r2, #1
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <SPI_Read_Write+0x44>)
 8000fb2:	f002 feee 	bl	8003d92 <HAL_SPI_Transmit>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d10b      	bne.n	8000fd4 <SPI_Read_Write+0x38>
		if (HAL_SPI_Receive(&hspi1, &spi_rx_data, 1, 100) == HAL_OK){
 8000fbc:	f107 010f 	add.w	r1, r7, #15
 8000fc0:	2364      	movs	r3, #100	; 0x64
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <SPI_Read_Write+0x44>)
 8000fc6:	f003 f820 	bl	800400a <HAL_SPI_Receive>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d101      	bne.n	8000fd4 <SPI_Read_Write+0x38>
			return spi_rx_data;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	e000      	b.n	8000fd6 <SPI_Read_Write+0x3a>
		}
	}
	return 0;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200001fc 	.word	0x200001fc

08000fe4 <Read_Register>:
uint8_t Read_Register(uint16_t Register_Address)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
	CS_Config_Low();
 8000fee:	f7ff ffbd 	bl	8000f6c <CS_Config_Low>
	SPI_Read_Write(Register_Address & BMP280_SPI_READING_MASK);
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ffd0 	bl	8000f9c <SPI_Read_Write>
	uint8_t value = SPI_Read_Write(0);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff ffcd 	bl	8000f9c <SPI_Read_Write>
 8001002:	4603      	mov	r3, r0
 8001004:	73fb      	strb	r3, [r7, #15]
	CS_Config_High();
 8001006:	f7ff ffbd 	bl	8000f84 <CS_Config_High>
	return value;
 800100a:	7bfb      	ldrb	r3, [r7, #15]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <Write_Register>:


void Write_Register(uint8_t Register_Address, uint8_t value)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	460a      	mov	r2, r1
 800101e:	71fb      	strb	r3, [r7, #7]
 8001020:	4613      	mov	r3, r2
 8001022:	71bb      	strb	r3, [r7, #6]
	CS_Config_Low();
 8001024:	f7ff ffa2 	bl	8000f6c <CS_Config_Low>
	SPI_Read_Write(Register_Address & BMP280_SPI_WRITING_MASK);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800102e:	b2db      	uxtb	r3, r3
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ffb3 	bl	8000f9c <SPI_Read_Write>
	SPI_Read_Write(value);
 8001036:	79bb      	ldrb	r3, [r7, #6]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ffaf 	bl	8000f9c <SPI_Read_Write>
	CS_Config_High();
 800103e:	f7ff ffa1 	bl	8000f84 <CS_Config_High>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <Filter_IIR>:
//---------------END - READ/WRITE FUNCTIONS----------------------//

//---------------START - CONFIG SENSOR FUNCTIONS----------------------//

void Filter_IIR(BMP280_IIR_Filter data_f){
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]

	uint8_t conf = Read_Register(BMP280_REG_ADDR_CONFIG);
 8001054:	20f5      	movs	r0, #245	; 0xf5
 8001056:	f7ff ffc5 	bl	8000fe4 <Read_Register>
 800105a:	4603      	mov	r3, r0
 800105c:	73fb      	strb	r3, [r7, #15]
	conf = (conf & 0b11100011) | (data_f << 2); // off (000)
 800105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001062:	f023 031c 	bic.w	r3, r3, #28
 8001066:	b25a      	sxtb	r2, r3
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	b25b      	sxtb	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b25b      	sxtb	r3, r3
 8001072:	73fb      	strb	r3, [r7, #15]
	Write_Register(BMP280_REG_ADDR_CONFIG, conf);
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	4619      	mov	r1, r3
 8001078:	20f5      	movs	r0, #245	; 0xf5
 800107a:	f7ff ffcb 	bl	8001014 <Write_Register>
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <Power_Mode>:

void Power_Mode(BMP280_Power_Mode mode)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b084      	sub	sp, #16
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	71fb      	strb	r3, [r7, #7]
	uint8_t value = Read_Register(BMP280_REG_ADDR_CTRL_MEAS);
 8001090:	20f4      	movs	r0, #244	; 0xf4
 8001092:	f7ff ffa7 	bl	8000fe4 <Read_Register>
 8001096:	4603      	mov	r3, r0
 8001098:	73fb      	strb	r3, [r7, #15]
	value = (value & 0b11111100) | mode; //Sleep_mode (00)
 800109a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109e:	f023 0303 	bic.w	r3, r3, #3
 80010a2:	b25a      	sxtb	r2, r3
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	73fb      	strb	r3, [r7, #15]
	Write_Register(BMP280_REG_ADDR_CTRL_MEAS, value);
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	4619      	mov	r1, r3
 80010b2:	20f4      	movs	r0, #244	; 0xf4
 80010b4:	f7ff ffae 	bl	8001014 <Write_Register>
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <Temperature_OS>:

void Temperature_OS(BMP280_OverS osrs_t)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	uint8_t conf = Read_Register(BMP280_REG_ADDR_CTRL_MEAS);
 80010ca:	20f4      	movs	r0, #244	; 0xf4
 80010cc:	f7ff ff8a 	bl	8000fe4 <Read_Register>
 80010d0:	4603      	mov	r3, r0
 80010d2:	73fb      	strb	r3, [r7, #15]
	conf = (conf & 0b00011111) | (osrs_t << 5);
 80010d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d8:	f003 031f 	and.w	r3, r3, #31
 80010dc:	b25a      	sxtb	r2, r3
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	015b      	lsls	r3, r3, #5
 80010e2:	b25b      	sxtb	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	73fb      	strb	r3, [r7, #15]
	Write_Register(BMP280_REG_ADDR_CTRL_MEAS, conf);
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	4619      	mov	r1, r3
 80010ee:	20f4      	movs	r0, #244	; 0xf4
 80010f0:	f7ff ff90 	bl	8001014 <Write_Register>
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <StandbyTime>:

void StandbyTime(BMP280_StandbyTime t_sb)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	uint8_t conf = Read_Register(BMP280_REG_ADDR_CONFIG);
 8001106:	20f5      	movs	r0, #245	; 0xf5
 8001108:	f7ff ff6c 	bl	8000fe4 <Read_Register>
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]
	conf = (conf & 0b00011111) | (t_sb << 5);
 8001110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001114:	f003 031f 	and.w	r3, r3, #31
 8001118:	b25a      	sxtb	r2, r3
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	015b      	lsls	r3, r3, #5
 800111e:	b25b      	sxtb	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b25b      	sxtb	r3, r3
 8001124:	73fb      	strb	r3, [r7, #15]
	Write_Register(BMP280_REG_ADDR_CONFIG, conf);
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	4619      	mov	r1, r3
 800112a:	20f5      	movs	r0, #245	; 0xf5
 800112c:	f7ff ff72 	bl	8001014 <Write_Register>
}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <getID>:
//---------------END - CONFIG SENSOR FUNCTIONS----------------------//

//---------------START - SENSOR COMMANDS----------------------//
uint8_t getID()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	return Read_Register(BMP280_REG_ADDR_ID);
 800113c:	20d0      	movs	r0, #208	; 0xd0
 800113e:	f7ff ff51 	bl	8000fe4 <Read_Register>
 8001142:	4603      	mov	r3, r0
}
 8001144:	4618      	mov	r0, r3
 8001146:	bd80      	pop	{r7, pc}

08001148 <Reset>:


void Reset()
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	Write_Register(BMP280_REG_ADDR_CAL_START_ADDR, BMP280_REG_ADDR_RESET_V);
 800114c:	21b6      	movs	r1, #182	; 0xb6
 800114e:	2088      	movs	r0, #136	; 0x88
 8001150:	f7ff ff60 	bl	8001014 <Write_Register>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <BMP280_Convert_Formula>:
//---------------START - SENSOR COMMANDS----------------------//


//---------------START - TEMPERATURE CONFIG----------------------//
float BMP280_Convert_Formula (double mea_temp){
 8001158:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800115c:	b088      	sub	sp, #32
 800115e:	af00      	add	r7, sp, #0
 8001160:	ed87 0b00 	vstr	d0, [r7]
	double var1 = 0, var2 = 0;
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	f04f 0300 	mov.w	r3, #0
 800116c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	f04f 0300 	mov.w	r3, #0
 8001178:	e9c7 2304 	strd	r2, r3, [r7, #16]
	float T = 0;
 800117c:	f04f 0300 	mov.w	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]

	var1 = (((double)mea_temp) / 16384.0 - ((double)dig_T1) / 1024.0) * ((double)dig_T2);
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	4b4e      	ldr	r3, [pc, #312]	; (80012c0 <BMP280_Convert_Formula+0x168>)
 8001188:	e9d7 0100 	ldrd	r0, r1, [r7]
 800118c:	f7ff fb6e 	bl	800086c <__aeabi_ddiv>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4614      	mov	r4, r2
 8001196:	461d      	mov	r5, r3
 8001198:	f646 3370 	movw	r3, #27504	; 0x6b70
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9c1 	bl	8000524 <__aeabi_ui2d>
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <BMP280_Convert_Formula+0x16c>)
 80011a8:	f7ff fb60 	bl	800086c <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4620      	mov	r0, r4
 80011b2:	4629      	mov	r1, r5
 80011b4:	f7ff f878 	bl	80002a8 <__aeabi_dsub>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4614      	mov	r4, r2
 80011be:	461d      	mov	r5, r3
 80011c0:	f246 7343 	movw	r3, #26435	; 0x6743
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f9bd 	bl	8000544 <__aeabi_i2d>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4620      	mov	r0, r4
 80011d0:	4629      	mov	r1, r5
 80011d2:	f7ff fa21 	bl	8000618 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = ((((double)mea_temp) / 131072.0 - ((double)dig_T1) / 8192.0) * (((double)mea_temp)/131072.0 - ((double)dig_T1) / 8192.0)) * ((double)dig_T3);
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80011e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011ea:	f7ff fb3f 	bl	800086c <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4614      	mov	r4, r2
 80011f4:	461d      	mov	r5, r3
 80011f6:	f646 3370 	movw	r3, #27504	; 0x6b70
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f992 	bl	8000524 <__aeabi_ui2d>
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <BMP280_Convert_Formula+0x170>)
 8001206:	f7ff fb31 	bl	800086c <__aeabi_ddiv>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4620      	mov	r0, r4
 8001210:	4629      	mov	r1, r5
 8001212:	f7ff f849 	bl	80002a8 <__aeabi_dsub>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4614      	mov	r4, r2
 800121c:	461d      	mov	r5, r3
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001226:	e9d7 0100 	ldrd	r0, r1, [r7]
 800122a:	f7ff fb1f 	bl	800086c <__aeabi_ddiv>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4690      	mov	r8, r2
 8001234:	4699      	mov	r9, r3
 8001236:	f646 3370 	movw	r3, #27504	; 0x6b70
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f972 	bl	8000524 <__aeabi_ui2d>
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <BMP280_Convert_Formula+0x170>)
 8001246:	f7ff fb11 	bl	800086c <__aeabi_ddiv>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4640      	mov	r0, r8
 8001250:	4649      	mov	r1, r9
 8001252:	f7ff f829 	bl	80002a8 <__aeabi_dsub>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4620      	mov	r0, r4
 800125c:	4629      	mov	r1, r5
 800125e:	f7ff f9db 	bl	8000618 <__aeabi_dmul>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4614      	mov	r4, r2
 8001268:	461d      	mov	r5, r3
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <BMP280_Convert_Formula+0x174>)
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f969 	bl	8000544 <__aeabi_i2d>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4620      	mov	r0, r4
 8001278:	4629      	mov	r1, r5
 800127a:	f7ff f9cd 	bl	8000618 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	e9c7 2304 	strd	r2, r3, [r7, #16]
	T = (float)(var1 + var2) / 5120.0;
 8001286:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800128a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800128e:	f7ff f80d 	bl	80002ac <__adddf3>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f7ff fc95 	bl	8000bc8 <__aeabi_d2f>
 800129e:	ee06 0a90 	vmov	s13, r0
 80012a2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80012d0 <BMP280_Convert_Formula+0x178>
 80012a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012aa:	edc7 7a03 	vstr	s15, [r7, #12]
	return T;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	ee07 3a90 	vmov	s15, r3
}
 80012b4:	eeb0 0a67 	vmov.f32	s0, s15
 80012b8:	3720      	adds	r7, #32
 80012ba:	46bd      	mov	sp, r7
 80012bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012c0:	40d00000 	.word	0x40d00000
 80012c4:	40900000 	.word	0x40900000
 80012c8:	40c00000 	.word	0x40c00000
 80012cc:	fffffc18 	.word	0xfffffc18
 80012d0:	45a00000 	.word	0x45a00000

080012d4 <Measure>:


void Measure()
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	uint8_t tx_data = BMP280_REG_ADDR_TEMP_MSB;
 80012da:	23fa      	movs	r3, #250	; 0xfa
 80012dc:	70fb      	strb	r3, [r7, #3]
	uint8_t rx_data[3] = {0x00};
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <Measure+0x8c>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	803b      	strh	r3, [r7, #0]
 80012e4:	2300      	movs	r3, #0
 80012e6:	70bb      	strb	r3, [r7, #2]


	HAL_GPIO_WritePin(BMP280_CS_GPIO_Port, BMP280_CS_Pin, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2110      	movs	r1, #16
 80012ec:	481d      	ldr	r0, [pc, #116]	; (8001364 <Measure+0x90>)
 80012ee:	f001 ffe3 	bl	80032b8 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(&hspi1, &tx_data, 1, 100)==HAL_OK){
 80012f2:	1cf9      	adds	r1, r7, #3
 80012f4:	2364      	movs	r3, #100	; 0x64
 80012f6:	2201      	movs	r2, #1
 80012f8:	481b      	ldr	r0, [pc, #108]	; (8001368 <Measure+0x94>)
 80012fa:	f002 fd4a 	bl	8003d92 <HAL_SPI_Transmit>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d124      	bne.n	800134e <Measure+0x7a>
		if (HAL_SPI_Receive(&hspi1, rx_data, 3, 100)== HAL_OK){
 8001304:	4639      	mov	r1, r7
 8001306:	2364      	movs	r3, #100	; 0x64
 8001308:	2203      	movs	r2, #3
 800130a:	4817      	ldr	r0, [pc, #92]	; (8001368 <Measure+0x94>)
 800130c:	f002 fe7d 	bl	800400a <HAL_SPI_Receive>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d11b      	bne.n	800134e <Measure+0x7a>

			int32_t adc_T = (int32_t)(rx_data[2] & 0b00001111) | (rx_data[1] << 4) | (rx_data[0] << 12);
 8001316:	78bb      	ldrb	r3, [r7, #2]
 8001318:	f003 020f 	and.w	r2, r3, #15
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	431a      	orrs	r2, r3
 8001322:	783b      	ldrb	r3, [r7, #0]
 8001324:	031b      	lsls	r3, r3, #12
 8001326:	4313      	orrs	r3, r2
 8001328:	607b      	str	r3, [r7, #4]
			temperature_in_degrees = (float)(BMP280_Convert_Formula(adc_T));
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff f90a 	bl	8000544 <__aeabi_i2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	ec43 2b10 	vmov	d0, r2, r3
 8001338:	f7ff ff0e 	bl	8001158 <BMP280_Convert_Formula>
 800133c:	eef0 7a40 	vmov.f32	s15, s0
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <Measure+0x98>)
 8001342:	edc3 7a00 	vstr	s15, [r3]
			Temperature_to_show = temperature_in_degrees;
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <Measure+0x98>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a09      	ldr	r2, [pc, #36]	; (8001370 <Measure+0x9c>)
 800134c:	6013      	str	r3, [r2, #0]
		}
	}
	HAL_GPIO_WritePin(BMP280_CS_GPIO_Port, BMP280_CS_Pin, GPIO_PIN_SET);
 800134e:	2201      	movs	r2, #1
 8001350:	2110      	movs	r1, #16
 8001352:	4804      	ldr	r0, [pc, #16]	; (8001364 <Measure+0x90>)
 8001354:	f001 ffb0 	bl	80032b8 <HAL_GPIO_WritePin>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	08008938 	.word	0x08008938
 8001364:	40020800 	.word	0x40020800
 8001368:	200001fc 	.word	0x200001fc
 800136c:	20000340 	.word	0x20000340
 8001370:	20000344 	.word	0x20000344

08001374 <Init_Sensor>:

//---------------END - TEMPERATURE CONFIG----------------------//

//---------------START - PRINCIPAL INIT----------------------//
uint8_t Init_Sensor()
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	if (getID() != BMP280_ID)
 8001378:	f7ff fede 	bl	8001138 <getID>
 800137c:	4603      	mov	r3, r0
 800137e:	2b58      	cmp	r3, #88	; 0x58
 8001380:	d001      	beq.n	8001386 <Init_Sensor+0x12>
	{
		return 1;
 8001382:	2301      	movs	r3, #1
 8001384:	e00e      	b.n	80013a4 <Init_Sensor+0x30>
	}
	Reset();
 8001386:	f7ff fedf 	bl	8001148 <Reset>

	//------ Start Config sensor ----//
	Temperature_OS(Oversamplingx2);
 800138a:	2002      	movs	r0, #2
 800138c:	f7ff fe98 	bl	80010c0 <Temperature_OS>

	Power_Mode(Normal_Mode);
 8001390:	2003      	movs	r0, #3
 8001392:	f7ff fe78 	bl	8001086 <Power_Mode>
	Filter_IIR(Filter_coeff_16);
 8001396:	2004      	movs	r0, #4
 8001398:	f7ff fe57 	bl	800104a <Filter_IIR>
	StandbyTime(standby_time_1000ms);
 800139c:	2005      	movs	r0, #5
 800139e:	f7ff fead 	bl	80010fc <StandbyTime>
	//----- End Config sensor-----//

	return 0;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <_write>:
//---------------END - PRINCIPAL INIT----------------------//
int _write(int file, char *ptr, int len)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 10);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	230a      	movs	r3, #10
 80013ba:	68b9      	ldr	r1, [r7, #8]
 80013bc:	4803      	ldr	r0, [pc, #12]	; (80013cc <_write+0x24>)
 80013be:	f004 f962 	bl	8005686 <HAL_UART_Transmit>

	return len;
 80013c2:	687b      	ldr	r3, [r7, #4]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200002fc 	.word	0x200002fc

080013d0 <heartbeat>:
//---------------START - Heartbeat----------------------//
void heartbeat(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	static uint32_t tick = 0;
	if (tick < HAL_GetTick()){
 80013d4:	f001 f912 	bl	80025fc <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <heartbeat+0x30>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d90b      	bls.n	80013fa <heartbeat+0x2a>
		tick = HAL_GetTick() + 1000;
 80013e2:	f001 f90b 	bl	80025fc <HAL_GetTick>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <heartbeat+0x30>)
 80013ee:	6013      	str	r3, [r2, #0]
		//HAL_ADC_Start(&hadc1);
		//HAL_ADC_Start_IT(&hadc1);
		HAL_GPIO_TogglePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin);
 80013f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <heartbeat+0x34>)
 80013f6:	f001 ff78 	bl	80032ea <HAL_GPIO_TogglePin>
	}
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000034c 	.word	0x2000034c
 8001404:	40021800 	.word	0x40021800

08001408 <HAL_GPIO_EXTI_Callback>:
/*/
//---------------END - DOOR with ADC----------------------//


//---------------START - DOOR with INTERRUPT (In use)----------------------//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_0){
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d12a      	bne.n	800146e <HAL_GPIO_EXTI_Callback+0x66>
		printf("------------| USER Button Pressed |------------\r\n");
 8001418:	4817      	ldr	r0, [pc, #92]	; (8001478 <HAL_GPIO_EXTI_Callback+0x70>)
 800141a:	f005 f9cb 	bl	80067b4 <puts>
		cont_door++;
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_GPIO_EXTI_Callback+0x74>)
 8001420:	f993 3000 	ldrsb.w	r3, [r3]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	3301      	adds	r3, #1
 8001428:	b2db      	uxtb	r3, r3
 800142a:	b25a      	sxtb	r2, r3
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_GPIO_EXTI_Callback+0x74>)
 800142e:	701a      	strb	r2, [r3, #0]

		if(cont_door == 1){
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_GPIO_EXTI_Callback+0x74>)
 8001432:	f993 3000 	ldrsb.w	r3, [r3]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d10b      	bne.n	8001452 <HAL_GPIO_EXTI_Callback+0x4a>
			HAL_GPIO_WritePin(DOOR_GPIO_Port, DOOR_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001440:	480f      	ldr	r0, [pc, #60]	; (8001480 <HAL_GPIO_EXTI_Callback+0x78>)
 8001442:	f001 ff39 	bl	80032b8 <HAL_GPIO_WritePin>
			printf("------------| OPENING DOOR |------------\r\n");
 8001446:	480f      	ldr	r0, [pc, #60]	; (8001484 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001448:	f005 f9b4 	bl	80067b4 <puts>
			cont_door = -1;
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_GPIO_EXTI_Callback+0x74>)
 800144e:	22ff      	movs	r2, #255	; 0xff
 8001450:	701a      	strb	r2, [r3, #0]
		}

		if(cont_door == HAL_OK){
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_GPIO_EXTI_Callback+0x74>)
 8001454:	f993 3000 	ldrsb.w	r3, [r3]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d108      	bne.n	800146e <HAL_GPIO_EXTI_Callback+0x66>
			HAL_GPIO_WritePin(DOOR_GPIO_Port, DOOR_Pin, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001462:	4807      	ldr	r0, [pc, #28]	; (8001480 <HAL_GPIO_EXTI_Callback+0x78>)
 8001464:	f001 ff28 	bl	80032b8 <HAL_GPIO_WritePin>
			printf("------------| CLOSING DOOR |------------\r\n");
 8001468:	4807      	ldr	r0, [pc, #28]	; (8001488 <HAL_GPIO_EXTI_Callback+0x80>)
 800146a:	f005 f9a3 	bl	80067b4 <puts>
		}
	}
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	0800893c 	.word	0x0800893c
 800147c:	20000349 	.word	0x20000349
 8001480:	40021800 	.word	0x40021800
 8001484:	08008970 	.word	0x08008970
 8001488:	0800899c 	.word	0x0800899c

0800148c <State_func>:
//---------------END - DOOR with INTERRUPT (In use)----------------------//

//---------------START - PWM-ADC Control ----------------------//
void State_func(uint8_t mode){
 800148c:	b580      	push	{r7, lr}
 800148e:	f5ad 4d9c 	sub.w	sp, sp, #19968	; 0x4e00
 8001492:	b08c      	sub	sp, #48	; 0x30
 8001494:	af00      	add	r7, sp, #0
 8001496:	4602      	mov	r2, r0
 8001498:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800149c:	f6a3 6329 	subw	r3, r3, #3625	; 0xe29
 80014a0:	701a      	strb	r2, [r3, #0]


	if (mode == v_cold){
 80014a2:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 80014a6:	f6a3 6329 	subw	r3, r3, #3625	; 0xe29
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d11e      	bne.n	80014ee <State_func+0x62>
		printf("------------------------ \r\n");
 80014b0:	48cb      	ldr	r0, [pc, #812]	; (80017e0 <State_func+0x354>)
 80014b2:	f005 f97f 	bl	80067b4 <puts>
		printf("------------| Very Cold |------------ \r\n");
 80014b6:	48cb      	ldr	r0, [pc, #812]	; (80017e4 <State_func+0x358>)
 80014b8:	f005 f97c 	bl	80067b4 <puts>
		printf("------------------------ \r\n");
 80014bc:	48c8      	ldr	r0, [pc, #800]	; (80017e0 <State_func+0x354>)
 80014be:	f005 f979 	bl	80067b4 <puts>
		HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014c8:	48c7      	ldr	r0, [pc, #796]	; (80017e8 <State_func+0x35c>)
 80014ca:	f001 fef5 	bl	80032b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COOLER_GPIO_Port, COOLER_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2110      	movs	r1, #16
 80014d2:	48c6      	ldr	r0, [pc, #792]	; (80017ec <State_func+0x360>)
 80014d4:	f001 fef0 	bl	80032b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, GPIO_PIN_SET);
 80014d8:	2201      	movs	r2, #1
 80014da:	2120      	movs	r1, #32
 80014dc:	48c3      	ldr	r0, [pc, #780]	; (80017ec <State_func+0x360>)
 80014de:	f001 feeb 	bl	80032b8 <HAL_GPIO_WritePin>
		printf ("ALARM -> OFF\r\nCOOLER -> OFF\r\nHEATER -> ON\r\n");
 80014e2:	48c3      	ldr	r0, [pc, #780]	; (80017f0 <State_func+0x364>)
 80014e4:	f005 f966 	bl	80067b4 <puts>
		printf("------------------------ \r\n");
 80014e8:	48bd      	ldr	r0, [pc, #756]	; (80017e0 <State_func+0x354>)
 80014ea:	f005 f963 	bl	80067b4 <puts>
	}

	if (mode == cold){
 80014ee:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 80014f2:	f6a3 6329 	subw	r3, r3, #3625	; 0xe29
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d11e      	bne.n	800153a <State_func+0xae>
		printf("------------------------ \r\n");
 80014fc:	48b8      	ldr	r0, [pc, #736]	; (80017e0 <State_func+0x354>)
 80014fe:	f005 f959 	bl	80067b4 <puts>
		printf("------------| Cold |------------ \r\n");
 8001502:	48bc      	ldr	r0, [pc, #752]	; (80017f4 <State_func+0x368>)
 8001504:	f005 f956 	bl	80067b4 <puts>
		printf("------------------------ \r\n");
 8001508:	48b5      	ldr	r0, [pc, #724]	; (80017e0 <State_func+0x354>)
 800150a:	f005 f953 	bl	80067b4 <puts>
		HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001514:	48b4      	ldr	r0, [pc, #720]	; (80017e8 <State_func+0x35c>)
 8001516:	f001 fecf 	bl	80032b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COOLER_GPIO_Port, COOLER_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	2110      	movs	r1, #16
 800151e:	48b3      	ldr	r0, [pc, #716]	; (80017ec <State_func+0x360>)
 8001520:	f001 feca 	bl	80032b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	2120      	movs	r1, #32
 8001528:	48b0      	ldr	r0, [pc, #704]	; (80017ec <State_func+0x360>)
 800152a:	f001 fec5 	bl	80032b8 <HAL_GPIO_WritePin>
		printf ("ALARM -> OFF\r\nCOOLER -> OFF\r\nHEATER -> OFF\r\n");
 800152e:	48b2      	ldr	r0, [pc, #712]	; (80017f8 <State_func+0x36c>)
 8001530:	f005 f940 	bl	80067b4 <puts>
		printf("------------------------ \r\n");
 8001534:	48aa      	ldr	r0, [pc, #680]	; (80017e0 <State_func+0x354>)
 8001536:	f005 f93d 	bl	80067b4 <puts>
	}

	if (mode == mild){
 800153a:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800153e:	f6a3 6329 	subw	r3, r3, #3625	; 0xe29
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d17e      	bne.n	8001646 <State_func+0x1ba>
		printf("------------------------ \r\n");
 8001548:	48a5      	ldr	r0, [pc, #660]	; (80017e0 <State_func+0x354>)
 800154a:	f005 f933 	bl	80067b4 <puts>
		printf("------------| Mild |------------ \r\n");
 800154e:	48ab      	ldr	r0, [pc, #684]	; (80017fc <State_func+0x370>)
 8001550:	f005 f930 	bl	80067b4 <puts>
		printf("------------------------ \r\n");
 8001554:	48a2      	ldr	r0, [pc, #648]	; (80017e0 <State_func+0x354>)
 8001556:	f005 f92d 	bl	80067b4 <puts>
		HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001560:	48a1      	ldr	r0, [pc, #644]	; (80017e8 <State_func+0x35c>)
 8001562:	f001 fea9 	bl	80032b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2120      	movs	r1, #32
 800156a:	48a0      	ldr	r0, [pc, #640]	; (80017ec <State_func+0x360>)
 800156c:	f001 fea4 	bl	80032b8 <HAL_GPIO_WritePin>

		uint16_t pwm_dma_buff[BUFF_SIZE] = {0};
 8001570:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8001574:	f6a3 6328 	subw	r3, r3, #3624	; 0xe28
 8001578:	4618      	mov	r0, r3
 800157a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800157e:	461a      	mov	r2, r3
 8001580:	2100      	movs	r1, #0
 8001582:	f004 fc1f 	bl	8005dc4 <memset>
		for (uint16_t index = 100; index < BUFF_SIZE; index++){
 8001586:	2364      	movs	r3, #100	; 0x64
 8001588:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 800158c:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 8001590:	8013      	strh	r3, [r2, #0]
 8001592:	e040      	b.n	8001616 <State_func+0x18a>
			if (index < 300){
 8001594:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8001598:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80015a2:	d20c      	bcs.n	80015be <State_func+0x132>
				pwm_dma_buff[index] = 10;
 80015a4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80015a8:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 80015ac:	881a      	ldrh	r2, [r3, #0]
 80015ae:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 80015b2:	f6a3 6328 	subw	r3, r3, #3624	; 0xe28
 80015b6:	210a      	movs	r1, #10
 80015b8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80015bc:	e020      	b.n	8001600 <State_func+0x174>
			}else if (index < 500){
 80015be:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80015c2:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015cc:	d20c      	bcs.n	80015e8 <State_func+0x15c>
				pwm_dma_buff[index] = 100;
 80015ce:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80015d2:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 80015d6:	881a      	ldrh	r2, [r3, #0]
 80015d8:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 80015dc:	f6a3 6328 	subw	r3, r3, #3624	; 0xe28
 80015e0:	2164      	movs	r1, #100	; 0x64
 80015e2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80015e6:	e00b      	b.n	8001600 <State_func+0x174>
			}else{
				pwm_dma_buff[index] = 200;
 80015e8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80015ec:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 80015f0:	881a      	ldrh	r2, [r3, #0]
 80015f2:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 80015f6:	f6a3 6328 	subw	r3, r3, #3624	; 0xe28
 80015fa:	21c8      	movs	r1, #200	; 0xc8
 80015fc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (uint16_t index = 100; index < BUFF_SIZE; index++){
 8001600:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8001604:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	3301      	adds	r3, #1
 800160c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8001610:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 8001614:	8013      	strh	r3, [r2, #0]
 8001616:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 800161a:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	f242 720f 	movw	r2, #9999	; 0x270f
 8001624:	4293      	cmp	r3, r2
 8001626:	d9b5      	bls.n	8001594 <State_func+0x108>
			}
		}
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwm_dma_buff, BUFF_SIZE);
 8001628:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800162c:	3a28      	subs	r2, #40	; 0x28
 800162e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001632:	2100      	movs	r1, #0
 8001634:	4872      	ldr	r0, [pc, #456]	; (8001800 <State_func+0x374>)
 8001636:	f003 f91b 	bl	8004870 <HAL_TIM_PWM_Start_DMA>
		printf ("ALARM -> OFF\r\nCOOLER -> ON |20|\r\nHEATER -> OFF\r\n");
 800163a:	4872      	ldr	r0, [pc, #456]	; (8001804 <State_func+0x378>)
 800163c:	f005 f8ba 	bl	80067b4 <puts>
		printf("------------------------ \r\n");
 8001640:	4867      	ldr	r0, [pc, #412]	; (80017e0 <State_func+0x354>)
 8001642:	f005 f8b7 	bl	80067b4 <puts>
		//FAN 20%
	}

	if (mode == hot){
 8001646:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800164a:	f6a3 6329 	subw	r3, r3, #3625	; 0xe29
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b03      	cmp	r3, #3
 8001652:	f040 8096 	bne.w	8001782 <State_func+0x2f6>
		printf("------------------------ \r\n");
 8001656:	4862      	ldr	r0, [pc, #392]	; (80017e0 <State_func+0x354>)
 8001658:	f005 f8ac 	bl	80067b4 <puts>
		printf("------------| Hot |------------ \r\n");
 800165c:	486a      	ldr	r0, [pc, #424]	; (8001808 <State_func+0x37c>)
 800165e:	f005 f8a9 	bl	80067b4 <puts>
printf("------------------------ \r\n");
 8001662:	485f      	ldr	r0, [pc, #380]	; (80017e0 <State_func+0x354>)
 8001664:	f005 f8a6 	bl	80067b4 <puts>
		HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800166e:	485e      	ldr	r0, [pc, #376]	; (80017e8 <State_func+0x35c>)
 8001670:	f001 fe22 	bl	80032b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	2120      	movs	r1, #32
 8001678:	485c      	ldr	r0, [pc, #368]	; (80017ec <State_func+0x360>)
 800167a:	f001 fe1d 	bl	80032b8 <HAL_GPIO_WritePin>

		uint16_t pwm_dma_buff[BUFF_SIZE] = {0};
 800167e:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8001682:	f6a3 6328 	subw	r3, r3, #3624	; 0xe28
 8001686:	4618      	mov	r0, r3
 8001688:	f644 6320 	movw	r3, #20000	; 0x4e20
 800168c:	461a      	mov	r2, r3
 800168e:	2100      	movs	r1, #0
 8001690:	f004 fb98 	bl	8005dc4 <memset>
		for (uint16_t index = 100; index < BUFF_SIZE; index++){
 8001694:	2364      	movs	r3, #100	; 0x64
 8001696:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 800169a:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800169e:	8013      	strh	r3, [r2, #0]
 80016a0:	e057      	b.n	8001752 <State_func+0x2c6>
			if (index < 300){
 80016a2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80016a6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80016b0:	d20c      	bcs.n	80016cc <State_func+0x240>
				pwm_dma_buff[index] = 10;
 80016b2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80016b6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80016ba:	881a      	ldrh	r2, [r3, #0]
 80016bc:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 80016c0:	f6a3 6328 	subw	r3, r3, #3624	; 0xe28
 80016c4:	210a      	movs	r1, #10
 80016c6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80016ca:	e037      	b.n	800173c <State_func+0x2b0>
			}else if (index < 500){
 80016cc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80016d0:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016da:	d20c      	bcs.n	80016f6 <State_func+0x26a>
				pwm_dma_buff[index] = 100;
 80016dc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80016e0:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80016e4:	881a      	ldrh	r2, [r3, #0]
 80016e6:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 80016ea:	f6a3 6328 	subw	r3, r3, #3624	; 0xe28
 80016ee:	2164      	movs	r1, #100	; 0x64
 80016f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80016f4:	e022      	b.n	800173c <State_func+0x2b0>
			}else if (index < 800){
 80016f6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80016fa:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001704:	d20d      	bcs.n	8001722 <State_func+0x296>
				pwm_dma_buff[index] = 300;
 8001706:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 800170a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800170e:	881a      	ldrh	r2, [r3, #0]
 8001710:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8001714:	f6a3 6328 	subw	r3, r3, #3624	; 0xe28
 8001718:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800171c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001720:	e00c      	b.n	800173c <State_func+0x2b0>
			}else{
				pwm_dma_buff[index] = 600;
 8001722:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8001726:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800172a:	881a      	ldrh	r2, [r3, #0]
 800172c:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8001730:	f6a3 6328 	subw	r3, r3, #3624	; 0xe28
 8001734:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001738:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (uint16_t index = 100; index < BUFF_SIZE; index++){
 800173c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8001740:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 800174c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001750:	8013      	strh	r3, [r2, #0]
 8001752:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8001756:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001760:	4293      	cmp	r3, r2
 8001762:	d99e      	bls.n	80016a2 <State_func+0x216>
			}
		}
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwm_dma_buff, BUFF_SIZE);
 8001764:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001768:	3a28      	subs	r2, #40	; 0x28
 800176a:	f242 7310 	movw	r3, #10000	; 0x2710
 800176e:	2100      	movs	r1, #0
 8001770:	4823      	ldr	r0, [pc, #140]	; (8001800 <State_func+0x374>)
 8001772:	f003 f87d 	bl	8004870 <HAL_TIM_PWM_Start_DMA>
		printf ("ALARM -> OFF\r\nCOOLER -> ON |60|\r\nHEATER -> OFF\r\n");
 8001776:	4825      	ldr	r0, [pc, #148]	; (800180c <State_func+0x380>)
 8001778:	f005 f81c 	bl	80067b4 <puts>
		printf("------------------------ \r\n");
 800177c:	4818      	ldr	r0, [pc, #96]	; (80017e0 <State_func+0x354>)
 800177e:	f005 f819 	bl	80067b4 <puts>
		//FAN 60%
	}

	if (mode == v_hot){
 8001782:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8001786:	f6a3 6329 	subw	r3, r3, #3625	; 0xe29
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b04      	cmp	r3, #4
 800178e:	f040 80b1 	bne.w	80018f4 <State_func+0x468>
		printf("------------------------ \r\n");
 8001792:	4813      	ldr	r0, [pc, #76]	; (80017e0 <State_func+0x354>)
 8001794:	f005 f80e 	bl	80067b4 <puts>
		printf("------------| Very Hot |------------ \r\n");
 8001798:	481d      	ldr	r0, [pc, #116]	; (8001810 <State_func+0x384>)
 800179a:	f005 f80b 	bl	80067b4 <puts>
		printf("------------------------ \r\n");
 800179e:	4810      	ldr	r0, [pc, #64]	; (80017e0 <State_func+0x354>)
 80017a0:	f005 f808 	bl	80067b4 <puts>
		HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017aa:	480f      	ldr	r0, [pc, #60]	; (80017e8 <State_func+0x35c>)
 80017ac:	f001 fd84 	bl	80032b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2120      	movs	r1, #32
 80017b4:	480d      	ldr	r0, [pc, #52]	; (80017ec <State_func+0x360>)
 80017b6:	f001 fd7f 	bl	80032b8 <HAL_GPIO_WritePin>

		uint16_t pwm_dma_buff[BUFF_SIZE] = {0};
 80017ba:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 80017be:	f6a3 6328 	subw	r3, r3, #3624	; 0xe28
 80017c2:	4618      	mov	r0, r3
 80017c4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80017c8:	461a      	mov	r2, r3
 80017ca:	2100      	movs	r1, #0
 80017cc:	f004 fafa 	bl	8005dc4 <memset>
		for (uint16_t index = 100; index < BUFF_SIZE; index++){
 80017d0:	2364      	movs	r3, #100	; 0x64
 80017d2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80017d6:	f102 022a 	add.w	r2, r2, #42	; 0x2a
 80017da:	8013      	strh	r3, [r2, #0]
 80017dc:	e072      	b.n	80018c4 <State_func+0x438>
 80017de:	bf00      	nop
 80017e0:	080089c8 	.word	0x080089c8
 80017e4:	080089e4 	.word	0x080089e4
 80017e8:	40021800 	.word	0x40021800
 80017ec:	40020c00 	.word	0x40020c00
 80017f0:	08008a0c 	.word	0x08008a0c
 80017f4:	08008a38 	.word	0x08008a38
 80017f8:	08008a5c 	.word	0x08008a5c
 80017fc:	08008a88 	.word	0x08008a88
 8001800:	20000254 	.word	0x20000254
 8001804:	08008aac 	.word	0x08008aac
 8001808:	08008adc 	.word	0x08008adc
 800180c:	08008b00 	.word	0x08008b00
 8001810:	08008b30 	.word	0x08008b30
			if (index < 300){
 8001814:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8001818:	f103 032a 	add.w	r3, r3, #42	; 0x2a
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001822:	d20c      	bcs.n	800183e <State_func+0x3b2>
				pwm_dma_buff[index] = 10;
 8001824:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8001828:	f103 032a 	add.w	r3, r3, #42	; 0x2a
 800182c:	881a      	ldrh	r2, [r3, #0]
 800182e:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8001832:	f6a3 6328 	subw	r3, r3, #3624	; 0xe28
 8001836:	210a      	movs	r1, #10
 8001838:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800183c:	e037      	b.n	80018ae <State_func+0x422>
			}else if (index < 500){
 800183e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8001842:	f103 032a 	add.w	r3, r3, #42	; 0x2a
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800184c:	d20c      	bcs.n	8001868 <State_func+0x3dc>
				pwm_dma_buff[index] = 100;
 800184e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8001852:	f103 032a 	add.w	r3, r3, #42	; 0x2a
 8001856:	881a      	ldrh	r2, [r3, #0]
 8001858:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800185c:	f6a3 6328 	subw	r3, r3, #3624	; 0xe28
 8001860:	2164      	movs	r1, #100	; 0x64
 8001862:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001866:	e022      	b.n	80018ae <State_func+0x422>
			}else if (index < 800){
 8001868:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 800186c:	f103 032a 	add.w	r3, r3, #42	; 0x2a
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001876:	d20d      	bcs.n	8001894 <State_func+0x408>
				pwm_dma_buff[index] = 500;
 8001878:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 800187c:	f103 032a 	add.w	r3, r3, #42	; 0x2a
 8001880:	881a      	ldrh	r2, [r3, #0]
 8001882:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8001886:	f6a3 6328 	subw	r3, r3, #3624	; 0xe28
 800188a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800188e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001892:	e00c      	b.n	80018ae <State_func+0x422>
			}else{
				pwm_dma_buff[index] = 1000;
 8001894:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8001898:	f103 032a 	add.w	r3, r3, #42	; 0x2a
 800189c:	881a      	ldrh	r2, [r3, #0]
 800189e:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 80018a2:	f6a3 6328 	subw	r3, r3, #3624	; 0xe28
 80018a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (uint16_t index = 100; index < BUFF_SIZE; index++){
 80018ae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80018b2:	f103 032a 	add.w	r3, r3, #42	; 0x2a
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80018be:	f102 022a 	add.w	r2, r2, #42	; 0x2a
 80018c2:	8013      	strh	r3, [r2, #0]
 80018c4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80018c8:	f103 032a 	add.w	r3, r3, #42	; 0x2a
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	f242 720f 	movw	r2, #9999	; 0x270f
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d99e      	bls.n	8001814 <State_func+0x388>
			}
		}
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwm_dma_buff, BUFF_SIZE);
 80018d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018da:	3a28      	subs	r2, #40	; 0x28
 80018dc:	f242 7310 	movw	r3, #10000	; 0x2710
 80018e0:	2100      	movs	r1, #0
 80018e2:	481a      	ldr	r0, [pc, #104]	; (800194c <State_func+0x4c0>)
 80018e4:	f002 ffc4 	bl	8004870 <HAL_TIM_PWM_Start_DMA>
		printf ("ALARM -> OFF\r\nCOOLER -> ON |100|\r\nHEATER -> OFF\r\n");
 80018e8:	4819      	ldr	r0, [pc, #100]	; (8001950 <State_func+0x4c4>)
 80018ea:	f004 ff63 	bl	80067b4 <puts>
		printf("------------------------ \r\n");
 80018ee:	4819      	ldr	r0, [pc, #100]	; (8001954 <State_func+0x4c8>)
 80018f0:	f004 ff60 	bl	80067b4 <puts>
		//FAN 100%
	}

	if (mode == alarm){
 80018f4:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 80018f8:	f6a3 6329 	subw	r3, r3, #3625	; 0xe29
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b05      	cmp	r3, #5
 8001900:	d11e      	bne.n	8001940 <State_func+0x4b4>
		printf("------------------------ \r\n");
 8001902:	4814      	ldr	r0, [pc, #80]	; (8001954 <State_func+0x4c8>)
 8001904:	f004 ff56 	bl	80067b4 <puts>
		printf("------------| ALARM!! |------------ \r\n");
 8001908:	4813      	ldr	r0, [pc, #76]	; (8001958 <State_func+0x4cc>)
 800190a:	f004 ff53 	bl	80067b4 <puts>
		printf("------------------------ \r\n");
 800190e:	4811      	ldr	r0, [pc, #68]	; (8001954 <State_func+0x4c8>)
 8001910:	f004 ff50 	bl	80067b4 <puts>
		HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800191a:	4810      	ldr	r0, [pc, #64]	; (800195c <State_func+0x4d0>)
 800191c:	f001 fccc 	bl	80032b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COOLER_GPIO_Port, COOLER_Pin, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	2110      	movs	r1, #16
 8001924:	480e      	ldr	r0, [pc, #56]	; (8001960 <State_func+0x4d4>)
 8001926:	f001 fcc7 	bl	80032b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	2120      	movs	r1, #32
 800192e:	480c      	ldr	r0, [pc, #48]	; (8001960 <State_func+0x4d4>)
 8001930:	f001 fcc2 	bl	80032b8 <HAL_GPIO_WritePin>
		printf ("ALARM -> ON\r\nCOOLER -> OFF\r\nHEATER -> OFF\r\n");
 8001934:	480b      	ldr	r0, [pc, #44]	; (8001964 <State_func+0x4d8>)
 8001936:	f004 ff3d 	bl	80067b4 <puts>
		printf("------------------------ \r\n");
 800193a:	4806      	ldr	r0, [pc, #24]	; (8001954 <State_func+0x4c8>)
 800193c:	f004 ff3a 	bl	80067b4 <puts>
	}
}
 8001940:	bf00      	nop
 8001942:	f507 479c 	add.w	r7, r7, #19968	; 0x4e00
 8001946:	3730      	adds	r7, #48	; 0x30
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000254 	.word	0x20000254
 8001950:	08008b58 	.word	0x08008b58
 8001954:	080089c8 	.word	0x080089c8
 8001958:	08008b8c 	.word	0x08008b8c
 800195c:	40021800 	.word	0x40021800
 8001960:	40020c00 	.word	0x40020c00
 8001964:	08008bb4 	.word	0x08008bb4

08001968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800196e:	f000 fddf 	bl	8002530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001972:	f000 f94f 	bl	8001c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001976:	f000 fabd 	bl	8001ef4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800197a:	f000 fa71 	bl	8001e60 <MX_USART1_UART_Init>
  MX_DMA_Init();
 800197e:	f000 fa99 	bl	8001eb4 <MX_DMA_Init>
  MX_TIM1_Init();
 8001982:	f000 f9e9 	bl	8001d58 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001986:	f000 f9b1 	bl	8001cec <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
//  printf("Hello World\r\n");

  //---------------START - Manual Sensor Configuration ----------------------//
  uint8_t spi_tx_data = BMP280_REG_ADDR_ID;
 800198a:	23d0      	movs	r3, #208	; 0xd0
 800198c:	71fb      	strb	r3, [r7, #7]
  uint8_t spi_rx_data[3] = {0x00};
 800198e:	4b96      	ldr	r3, [pc, #600]	; (8001be8 <main+0x280>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	80bb      	strh	r3, [r7, #4]
 8001994:	2300      	movs	r3, #0
 8001996:	71bb      	strb	r3, [r7, #6]

  HAL_GPIO_WritePin(BMP280_CS_GPIO_Port, BMP280_CS_Pin, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	2110      	movs	r1, #16
 800199c:	4893      	ldr	r0, [pc, #588]	; (8001bec <main+0x284>)
 800199e:	f001 fc8b 	bl	80032b8 <HAL_GPIO_WritePin>
  if (HAL_SPI_Transmit(&hspi1, &spi_tx_data, 1, 100) == HAL_OK){
 80019a2:	1df9      	adds	r1, r7, #7
 80019a4:	2364      	movs	r3, #100	; 0x64
 80019a6:	2201      	movs	r2, #1
 80019a8:	4891      	ldr	r0, [pc, #580]	; (8001bf0 <main+0x288>)
 80019aa:	f002 f9f2 	bl	8003d92 <HAL_SPI_Transmit>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10b      	bne.n	80019cc <main+0x64>
	  if (HAL_SPI_Receive(&hspi1, spi_rx_data, 1, 100) == HAL_OK){
 80019b4:	1d39      	adds	r1, r7, #4
 80019b6:	2364      	movs	r3, #100	; 0x64
 80019b8:	2201      	movs	r2, #1
 80019ba:	488d      	ldr	r0, [pc, #564]	; (8001bf0 <main+0x288>)
 80019bc:	f002 fb25 	bl	800400a <HAL_SPI_Receive>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d102      	bne.n	80019cc <main+0x64>
		  HAL_Delay(100);
 80019c6:	2064      	movs	r0, #100	; 0x64
 80019c8:	f000 fe24 	bl	8002614 <HAL_Delay>
	  }
  }
  HAL_GPIO_WritePin(BMP280_CS_GPIO_Port, BMP280_CS_Pin, GPIO_PIN_SET);
 80019cc:	2201      	movs	r2, #1
 80019ce:	2110      	movs	r1, #16
 80019d0:	4886      	ldr	r0, [pc, #536]	; (8001bec <main+0x284>)
 80019d2:	f001 fc71 	bl	80032b8 <HAL_GPIO_WritePin>

  spi_tx_data = BMP280_REG_ADDR_CTRL_MEAS - BMP280_REG_ADDR_RESET_MEAS;
 80019d6:	2374      	movs	r3, #116	; 0x74
 80019d8:	71fb      	strb	r3, [r7, #7]
  uint8_t spi_ctrl_rx_data[3] = {0x00};
 80019da:	4b83      	ldr	r3, [pc, #524]	; (8001be8 <main+0x280>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	803b      	strh	r3, [r7, #0]
 80019e0:	2300      	movs	r3, #0
 80019e2:	70bb      	strb	r3, [r7, #2]

  HAL_GPIO_WritePin(BMP280_CS_GPIO_Port, BMP280_CS_Pin, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2110      	movs	r1, #16
 80019e8:	4880      	ldr	r0, [pc, #512]	; (8001bec <main+0x284>)
 80019ea:	f001 fc65 	bl	80032b8 <HAL_GPIO_WritePin>
  if (HAL_SPI_Transmit(&hspi1, &spi_tx_data, 1, 100)==HAL_OK){
 80019ee:	1df9      	adds	r1, r7, #7
 80019f0:	2364      	movs	r3, #100	; 0x64
 80019f2:	2201      	movs	r2, #1
 80019f4:	487e      	ldr	r0, [pc, #504]	; (8001bf0 <main+0x288>)
 80019f6:	f002 f9cc 	bl	8003d92 <HAL_SPI_Transmit>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d110      	bne.n	8001a22 <main+0xba>
	  spi_tx_data = 0b10000011 ;
 8001a00:	2383      	movs	r3, #131	; 0x83
 8001a02:	71fb      	strb	r3, [r7, #7]
	  if (HAL_SPI_Transmit(&hspi1, &spi_tx_data, 1, 100)==HAL_OK){
 8001a04:	1df9      	adds	r1, r7, #7
 8001a06:	2364      	movs	r3, #100	; 0x64
 8001a08:	2201      	movs	r2, #1
 8001a0a:	4879      	ldr	r0, [pc, #484]	; (8001bf0 <main+0x288>)
 8001a0c:	f002 f9c1 	bl	8003d92 <HAL_SPI_Transmit>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d105      	bne.n	8001a22 <main+0xba>
		  if (HAL_SPI_Receive(&hspi1, spi_ctrl_rx_data, 1, 100)== HAL_OK){
 8001a16:	4639      	mov	r1, r7
 8001a18:	2364      	movs	r3, #100	; 0x64
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	4874      	ldr	r0, [pc, #464]	; (8001bf0 <main+0x288>)
 8001a1e:	f002 faf4 	bl	800400a <HAL_SPI_Receive>
		  }
	  }
  }
  HAL_GPIO_WritePin(BMP280_CS_GPIO_Port, BMP280_CS_Pin, GPIO_PIN_SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	2110      	movs	r1, #16
 8001a26:	4871      	ldr	r0, [pc, #452]	; (8001bec <main+0x284>)
 8001a28:	f001 fc46 	bl	80032b8 <HAL_GPIO_WritePin>
  //---------------START - Manual Sensor Configuration ----------------------//


//-----------------------//
  Init_Sensor();
 8001a2c:	f7ff fca2 	bl	8001374 <Init_Sensor>
//	  HAL_NVIC_EnableIRQ(ADC_IRQn); 			// Enable the External interrupt (A0) of the GPIO peripheral
//	  HAL_NVIC_SetPendingIRQ(ADC_IRQn);

	  //Measure();

	  heartbeat();
 8001a30:	f7ff fcce 	bl	80013d0 <heartbeat>


	  if (HAL_GetTick() - led_tick > toggle_period){
 8001a34:	f000 fde2 	bl	80025fc <HAL_GetTick>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4a6e      	ldr	r2, [pc, #440]	; (8001bf4 <main+0x28c>)
 8001a3c:	7812      	ldrb	r2, [r2, #0]
 8001a3e:	1a9b      	subs	r3, r3, r2
 8001a40:	4a6d      	ldr	r2, [pc, #436]	; (8001bf8 <main+0x290>)
 8001a42:	8812      	ldrh	r2, [r2, #0]
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d9f3      	bls.n	8001a30 <main+0xc8>
	  			  led_tick = HAL_GetTick();
 8001a48:	f000 fdd8 	bl	80025fc <HAL_GetTick>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <main+0x28c>)
 8001a52:	701a      	strb	r2, [r3, #0]
	  			  Measure();
 8001a54:	f7ff fc3e 	bl	80012d4 <Measure>

	  			  if (temperature_in_degrees > 12 && temperature_in_degrees < 18){
 8001a58:	4b68      	ldr	r3, [pc, #416]	; (8001bfc <main+0x294>)
 8001a5a:	edd3 7a00 	vldr	s15, [r3]
 8001a5e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	dd17      	ble.n	8001a9c <main+0x134>
 8001a6c:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <main+0x294>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8001a76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7e:	d50d      	bpl.n	8001a9c <main+0x134>
	  				  printf("Temperature: |%f|  \r\n", Temperature_to_show);
 8001a80:	4b5f      	ldr	r3, [pc, #380]	; (8001c00 <main+0x298>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fd6f 	bl	8000568 <__aeabi_f2d>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	485d      	ldr	r0, [pc, #372]	; (8001c04 <main+0x29c>)
 8001a90:	f004 fe0a 	bl	80066a8 <iprintf>
	  				  State_func(cold);
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7ff fcf9 	bl	800148c <State_func>
 8001a9a:	e0a4      	b.n	8001be6 <main+0x27e>
	  			  }else if (temperature_in_degrees > 20 && temperature_in_degrees < 28){
 8001a9c:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <main+0x294>)
 8001a9e:	edd3 7a00 	vldr	s15, [r3]
 8001aa2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001aa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aae:	dd17      	ble.n	8001ae0 <main+0x178>
 8001ab0:	4b52      	ldr	r3, [pc, #328]	; (8001bfc <main+0x294>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8001aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac2:	d50d      	bpl.n	8001ae0 <main+0x178>
	  				  printf("Temperature: |%f|  \r\n", Temperature_to_show);
 8001ac4:	4b4e      	ldr	r3, [pc, #312]	; (8001c00 <main+0x298>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fd4d 	bl	8000568 <__aeabi_f2d>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	484c      	ldr	r0, [pc, #304]	; (8001c04 <main+0x29c>)
 8001ad4:	f004 fde8 	bl	80066a8 <iprintf>
	  				  State_func(mild);
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f7ff fcd7 	bl	800148c <State_func>
 8001ade:	e082      	b.n	8001be6 <main+0x27e>
	  			  }else if (temperature_in_degrees > 30 && temperature_in_degrees < 38){
 8001ae0:	4b46      	ldr	r3, [pc, #280]	; (8001bfc <main+0x294>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af2:	dd17      	ble.n	8001b24 <main+0x1bc>
 8001af4:	4b41      	ldr	r3, [pc, #260]	; (8001bfc <main+0x294>)
 8001af6:	edd3 7a00 	vldr	s15, [r3]
 8001afa:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001c08 <main+0x2a0>
 8001afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b06:	d50d      	bpl.n	8001b24 <main+0x1bc>
	  				  printf("Temperature: |%f|  \r\n", Temperature_to_show);
 8001b08:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <main+0x298>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fd2b 	bl	8000568 <__aeabi_f2d>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	483b      	ldr	r0, [pc, #236]	; (8001c04 <main+0x29c>)
 8001b18:	f004 fdc6 	bl	80066a8 <iprintf>
	  				  State_func(hot);
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f7ff fcb5 	bl	800148c <State_func>
 8001b22:	e060      	b.n	8001be6 <main+0x27e>
	  			  }else if (temperature_in_degrees > 40 && temperature_in_degrees < 45){
 8001b24:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <main+0x294>)
 8001b26:	edd3 7a00 	vldr	s15, [r3]
 8001b2a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001c0c <main+0x2a4>
 8001b2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b36:	dd17      	ble.n	8001b68 <main+0x200>
 8001b38:	4b30      	ldr	r3, [pc, #192]	; (8001bfc <main+0x294>)
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001c10 <main+0x2a8>
 8001b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4a:	d50d      	bpl.n	8001b68 <main+0x200>
	  				  printf("Temperature: |%f|  \r\n", Temperature_to_show);
 8001b4c:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <main+0x298>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fd09 	bl	8000568 <__aeabi_f2d>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	482a      	ldr	r0, [pc, #168]	; (8001c04 <main+0x29c>)
 8001b5c:	f004 fda4 	bl	80066a8 <iprintf>
	  				  State_func(v_hot);
 8001b60:	2004      	movs	r0, #4
 8001b62:	f7ff fc93 	bl	800148c <State_func>
 8001b66:	e03e      	b.n	8001be6 <main+0x27e>
	  			  }else if (temperature_in_degrees > 45 || temperature_in_degrees < 0){
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <main+0x294>)
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001c10 <main+0x2a8>
 8001b72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7a:	dc07      	bgt.n	8001b8c <main+0x224>
 8001b7c:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <main+0x294>)
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8a:	d50d      	bpl.n	8001ba8 <main+0x240>
	  				  printf("Temperature: |%f|  \r\n", Temperature_to_show);
 8001b8c:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <main+0x298>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fce9 	bl	8000568 <__aeabi_f2d>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	481a      	ldr	r0, [pc, #104]	; (8001c04 <main+0x29c>)
 8001b9c:	f004 fd84 	bl	80066a8 <iprintf>
	  				  State_func(alarm);
 8001ba0:	2005      	movs	r0, #5
 8001ba2:	f7ff fc73 	bl	800148c <State_func>
 8001ba6:	e01e      	b.n	8001be6 <main+0x27e>
	  			  }else if (temperature_in_degrees > 0 && temperature_in_degrees < 10){
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <main+0x294>)
 8001baa:	edd3 7a00 	vldr	s15, [r3]
 8001bae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb6:	dd16      	ble.n	8001be6 <main+0x27e>
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <main+0x294>)
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bca:	d50c      	bpl.n	8001be6 <main+0x27e>
	  				  printf("Temperature: |%f|  \r\n", Temperature_to_show);
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <main+0x298>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fcc9 	bl	8000568 <__aeabi_f2d>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	480a      	ldr	r0, [pc, #40]	; (8001c04 <main+0x29c>)
 8001bdc:	f004 fd64 	bl	80066a8 <iprintf>
	  				  State_func(v_cold);
 8001be0:	2000      	movs	r0, #0
 8001be2:	f7ff fc53 	bl	800148c <State_func>
	  heartbeat();
 8001be6:	e723      	b.n	8001a30 <main+0xc8>
 8001be8:	08008938 	.word	0x08008938
 8001bec:	40020800 	.word	0x40020800
 8001bf0:	200001fc 	.word	0x200001fc
 8001bf4:	20000348 	.word	0x20000348
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000340 	.word	0x20000340
 8001c00:	20000344 	.word	0x20000344
 8001c04:	08008be0 	.word	0x08008be0
 8001c08:	42180000 	.word	0x42180000
 8001c0c:	42200000 	.word	0x42200000
 8001c10:	42340000 	.word	0x42340000

08001c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b094      	sub	sp, #80	; 0x50
 8001c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c1a:	f107 0320 	add.w	r3, r7, #32
 8001c1e:	2230      	movs	r2, #48	; 0x30
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f004 f8ce 	bl	8005dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <SystemClock_Config+0xd0>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	4a28      	ldr	r2, [pc, #160]	; (8001ce4 <SystemClock_Config+0xd0>)
 8001c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c46:	6413      	str	r3, [r2, #64]	; 0x40
 8001c48:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <SystemClock_Config+0xd0>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c54:	2300      	movs	r3, #0
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <SystemClock_Config+0xd4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c60:	4a21      	ldr	r2, [pc, #132]	; (8001ce8 <SystemClock_Config+0xd4>)
 8001c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <SystemClock_Config+0xd4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c74:	2302      	movs	r3, #2
 8001c76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c7c:	2310      	movs	r3, #16
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c80:	2302      	movs	r3, #2
 8001c82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c84:	2300      	movs	r3, #0
 8001c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c88:	2308      	movs	r3, #8
 8001c8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001c8c:	2340      	movs	r3, #64	; 0x40
 8001c8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c90:	2302      	movs	r3, #2
 8001c92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c94:	2307      	movs	r3, #7
 8001c96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c98:	f107 0320 	add.w	r3, r7, #32
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f001 fb57 	bl	8003350 <HAL_RCC_OscConfig>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ca8:	f000 f9d4 	bl	8002054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cac:	230f      	movs	r3, #15
 8001cae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	2102      	movs	r1, #2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f001 fdb8 	bl	8003840 <HAL_RCC_ClockConfig>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001cd6:	f000 f9bd 	bl	8002054 <Error_Handler>
  }
}
 8001cda:	bf00      	nop
 8001cdc:	3750      	adds	r7, #80	; 0x50
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40007000 	.word	0x40007000

08001cec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cf0:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001cf2:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <MX_SPI1_Init+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001cf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d30:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d38:	220a      	movs	r2, #10
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d3c:	4804      	ldr	r0, [pc, #16]	; (8001d50 <MX_SPI1_Init+0x64>)
 8001d3e:	f001 ff9f 	bl	8003c80 <HAL_SPI_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d48:	f000 f984 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200001fc 	.word	0x200001fc
 8001d54:	40013000 	.word	0x40013000

08001d58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b092      	sub	sp, #72	; 0x48
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
 8001d78:	615a      	str	r2, [r3, #20]
 8001d7a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2220      	movs	r2, #32
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 f81e 	bl	8005dc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d88:	4b33      	ldr	r3, [pc, #204]	; (8001e58 <MX_TIM1_Init+0x100>)
 8001d8a:	4a34      	ldr	r2, [pc, #208]	; (8001e5c <MX_TIM1_Init+0x104>)
 8001d8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 90;
 8001d8e:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <MX_TIM1_Init+0x100>)
 8001d90:	225a      	movs	r2, #90	; 0x5a
 8001d92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d94:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <MX_TIM1_Init+0x100>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <MX_TIM1_Init+0x100>)
 8001d9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001da0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da2:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <MX_TIM1_Init+0x100>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001da8:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <MX_TIM1_Init+0x100>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dae:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <MX_TIM1_Init+0x100>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001db4:	4828      	ldr	r0, [pc, #160]	; (8001e58 <MX_TIM1_Init+0x100>)
 8001db6:	f002 fd0b 	bl	80047d0 <HAL_TIM_PWM_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001dc0:	f000 f948 	bl	8002054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4821      	ldr	r0, [pc, #132]	; (8001e58 <MX_TIM1_Init+0x100>)
 8001dd4:	f003 fb3c 	bl	8005450 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001dde:	f000 f939 	bl	8002054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001de2:	2360      	movs	r3, #96	; 0x60
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dee:	2300      	movs	r3, #0
 8001df0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e02:	2200      	movs	r2, #0
 8001e04:	4619      	mov	r1, r3
 8001e06:	4814      	ldr	r0, [pc, #80]	; (8001e58 <MX_TIM1_Init+0x100>)
 8001e08:	f002 fefa 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001e12:	f000 f91f 	bl	8002054 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	4619      	mov	r1, r3
 8001e38:	4807      	ldr	r0, [pc, #28]	; (8001e58 <MX_TIM1_Init+0x100>)
 8001e3a:	f003 fb85 	bl	8005548 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001e44:	f000 f906 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e48:	4803      	ldr	r0, [pc, #12]	; (8001e58 <MX_TIM1_Init+0x100>)
 8001e4a:	f000 f9cd 	bl	80021e8 <HAL_TIM_MspPostInit>

}
 8001e4e:	bf00      	nop
 8001e50:	3748      	adds	r7, #72	; 0x48
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000254 	.word	0x20000254
 8001e5c:	40010000 	.word	0x40010000

08001e60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <MX_USART1_UART_Init+0x50>)
 8001e68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e86:	220c      	movs	r2, #12
 8001e88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e96:	4805      	ldr	r0, [pc, #20]	; (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e98:	f003 fba8 	bl	80055ec <HAL_UART_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ea2:	f000 f8d7 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200002fc 	.word	0x200002fc
 8001eb0:	40011000 	.word	0x40011000

08001eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_DMA_Init+0x3c>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a0b      	ldr	r2, [pc, #44]	; (8001ef0 <MX_DMA_Init+0x3c>)
 8001ec4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_DMA_Init+0x3c>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2039      	movs	r0, #57	; 0x39
 8001edc:	f000 fc99 	bl	8002812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001ee0:	2039      	movs	r0, #57	; 0x39
 8001ee2:	f000 fcb2 	bl	800284a <HAL_NVIC_EnableIRQ>

}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	60da      	str	r2, [r3, #12]
 8001f08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	4b4c      	ldr	r3, [pc, #304]	; (8002040 <MX_GPIO_Init+0x14c>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	4a4b      	ldr	r2, [pc, #300]	; (8002040 <MX_GPIO_Init+0x14c>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1a:	4b49      	ldr	r3, [pc, #292]	; (8002040 <MX_GPIO_Init+0x14c>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b45      	ldr	r3, [pc, #276]	; (8002040 <MX_GPIO_Init+0x14c>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a44      	ldr	r2, [pc, #272]	; (8002040 <MX_GPIO_Init+0x14c>)
 8001f30:	f043 0304 	orr.w	r3, r3, #4
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b42      	ldr	r3, [pc, #264]	; (8002040 <MX_GPIO_Init+0x14c>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	4b3e      	ldr	r3, [pc, #248]	; (8002040 <MX_GPIO_Init+0x14c>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a3d      	ldr	r2, [pc, #244]	; (8002040 <MX_GPIO_Init+0x14c>)
 8001f4c:	f043 0310 	orr.w	r3, r3, #16
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <MX_GPIO_Init+0x14c>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0310 	and.w	r3, r3, #16
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	4b37      	ldr	r3, [pc, #220]	; (8002040 <MX_GPIO_Init+0x14c>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a36      	ldr	r2, [pc, #216]	; (8002040 <MX_GPIO_Init+0x14c>)
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b34      	ldr	r3, [pc, #208]	; (8002040 <MX_GPIO_Init+0x14c>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	603b      	str	r3, [r7, #0]
 8001f7e:	4b30      	ldr	r3, [pc, #192]	; (8002040 <MX_GPIO_Init+0x14c>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a2f      	ldr	r2, [pc, #188]	; (8002040 <MX_GPIO_Init+0x14c>)
 8001f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <MX_GPIO_Init+0x14c>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP280_CS_GPIO_Port, BMP280_CS_Pin, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2110      	movs	r1, #16
 8001f9a:	482a      	ldr	r0, [pc, #168]	; (8002044 <MX_GPIO_Init+0x150>)
 8001f9c:	f001 f98c 	bl	80032b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, COOLER_Pin|HEATER_Pin, GPIO_PIN_RESET);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2130      	movs	r1, #48	; 0x30
 8001fa4:	4828      	ldr	r0, [pc, #160]	; (8002048 <MX_GPIO_Init+0x154>)
 8001fa6:	f001 f987 	bl	80032b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DOOR_Pin|HEARTBEAT_Pin|ALARM_Pin, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 41d0 	mov.w	r1, #26624	; 0x6800
 8001fb0:	4826      	ldr	r0, [pc, #152]	; (800204c <MX_GPIO_Init+0x158>)
 8001fb2:	f001 f981 	bl	80032b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4821      	ldr	r0, [pc, #132]	; (8002050 <MX_GPIO_Init+0x15c>)
 8001fcc:	f000 ffc8 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : BMP280_CS_Pin */
  GPIO_InitStruct.Pin = BMP280_CS_Pin;
 8001fd0:	2310      	movs	r3, #16
 8001fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BMP280_CS_GPIO_Port, &GPIO_InitStruct);
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4817      	ldr	r0, [pc, #92]	; (8002044 <MX_GPIO_Init+0x150>)
 8001fe8:	f000 ffba 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : COOLER_Pin HEATER_Pin */
  GPIO_InitStruct.Pin = COOLER_Pin|HEATER_Pin;
 8001fec:	2330      	movs	r3, #48	; 0x30
 8001fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4619      	mov	r1, r3
 8002002:	4811      	ldr	r0, [pc, #68]	; (8002048 <MX_GPIO_Init+0x154>)
 8002004:	f000 ffac 	bl	8002f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOOR_Pin HEARTBEAT_Pin ALARM_Pin */
  GPIO_InitStruct.Pin = DOOR_Pin|HEARTBEAT_Pin|ALARM_Pin;
 8002008:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800200c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200e:	2301      	movs	r3, #1
 8002010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	4619      	mov	r1, r3
 8002020:	480a      	ldr	r0, [pc, #40]	; (800204c <MX_GPIO_Init+0x158>)
 8002022:	f000 ff9d 	bl	8002f60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	2006      	movs	r0, #6
 800202c:	f000 fbf1 	bl	8002812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002030:	2006      	movs	r0, #6
 8002032:	f000 fc0a 	bl	800284a <HAL_NVIC_EnableIRQ>

}
 8002036:	bf00      	nop
 8002038:	3728      	adds	r7, #40	; 0x28
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40023800 	.word	0x40023800
 8002044:	40020800 	.word	0x40020800
 8002048:	40020c00 	.word	0x40020c00
 800204c:	40021800 	.word	0x40021800
 8002050:	40020000 	.word	0x40020000

08002054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002058:	b672      	cpsid	i
}
 800205a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800205c:	e7fe      	b.n	800205c <Error_Handler+0x8>
	...

08002060 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <HAL_MspInit+0x4c>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	4a0f      	ldr	r2, [pc, #60]	; (80020ac <HAL_MspInit+0x4c>)
 8002070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002074:	6453      	str	r3, [r2, #68]	; 0x44
 8002076:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <HAL_MspInit+0x4c>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_MspInit+0x4c>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a08      	ldr	r2, [pc, #32]	; (80020ac <HAL_MspInit+0x4c>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_MspInit+0x4c>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800209e:	2007      	movs	r0, #7
 80020a0:	f000 fbac 	bl	80027fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40023800 	.word	0x40023800

080020b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	; 0x28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a19      	ldr	r2, [pc, #100]	; (8002134 <HAL_SPI_MspInit+0x84>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d12b      	bne.n	800212a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_SPI_MspInit+0x88>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	4a17      	ldr	r2, [pc, #92]	; (8002138 <HAL_SPI_MspInit+0x88>)
 80020dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020e0:	6453      	str	r3, [r2, #68]	; 0x44
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_SPI_MspInit+0x88>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_SPI_MspInit+0x88>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a10      	ldr	r2, [pc, #64]	; (8002138 <HAL_SPI_MspInit+0x88>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <HAL_SPI_MspInit+0x88>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BMP280_SCL_Pin|BMP280_SDO_Pin|BMP280_SDA_Pin;
 800210a:	23e0      	movs	r3, #224	; 0xe0
 800210c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002116:	2303      	movs	r3, #3
 8002118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800211a:	2305      	movs	r3, #5
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	4619      	mov	r1, r3
 8002124:	4805      	ldr	r0, [pc, #20]	; (800213c <HAL_SPI_MspInit+0x8c>)
 8002126:	f000 ff1b 	bl	8002f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800212a:	bf00      	nop
 800212c:	3728      	adds	r7, #40	; 0x28
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40013000 	.word	0x40013000
 8002138:	40023800 	.word	0x40023800
 800213c:	40020000 	.word	0x40020000

08002140 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a22      	ldr	r2, [pc, #136]	; (80021d8 <HAL_TIM_PWM_MspInit+0x98>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d13e      	bne.n	80021d0 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b21      	ldr	r3, [pc, #132]	; (80021dc <HAL_TIM_PWM_MspInit+0x9c>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	4a20      	ldr	r2, [pc, #128]	; (80021dc <HAL_TIM_PWM_MspInit+0x9c>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6453      	str	r3, [r2, #68]	; 0x44
 8002162:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <HAL_TIM_PWM_MspInit+0x9c>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_TIM_PWM_MspInit+0xa0>)
 8002170:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <HAL_TIM_PWM_MspInit+0xa4>)
 8002172:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_TIM_PWM_MspInit+0xa0>)
 8002176:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800217a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800217c:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <HAL_TIM_PWM_MspInit+0xa0>)
 800217e:	2240      	movs	r2, #64	; 0x40
 8002180:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <HAL_TIM_PWM_MspInit+0xa0>)
 8002184:	2200      	movs	r2, #0
 8002186:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002188:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <HAL_TIM_PWM_MspInit+0xa0>)
 800218a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800218e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_TIM_PWM_MspInit+0xa0>)
 8002192:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002196:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <HAL_TIM_PWM_MspInit+0xa0>)
 800219a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800219e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <HAL_TIM_PWM_MspInit+0xa0>)
 80021a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021a6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80021a8:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_TIM_PWM_MspInit+0xa0>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021ae:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_TIM_PWM_MspInit+0xa0>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80021b4:	480a      	ldr	r0, [pc, #40]	; (80021e0 <HAL_TIM_PWM_MspInit+0xa0>)
 80021b6:	f000 fb63 	bl	8002880 <HAL_DMA_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 80021c0:	f7ff ff48 	bl	8002054 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a06      	ldr	r2, [pc, #24]	; (80021e0 <HAL_TIM_PWM_MspInit+0xa0>)
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24
 80021ca:	4a05      	ldr	r2, [pc, #20]	; (80021e0 <HAL_TIM_PWM_MspInit+0xa0>)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40023800 	.word	0x40023800
 80021e0:	2000029c 	.word	0x2000029c
 80021e4:	40026428 	.word	0x40026428

080021e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 030c 	add.w	r3, r7, #12
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a12      	ldr	r2, [pc, #72]	; (8002250 <HAL_TIM_MspPostInit+0x68>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d11e      	bne.n	8002248 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <HAL_TIM_MspPostInit+0x6c>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a10      	ldr	r2, [pc, #64]	; (8002254 <HAL_TIM_MspPostInit+0x6c>)
 8002214:	f043 0310 	orr.w	r3, r3, #16
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <HAL_TIM_MspPostInit+0x6c>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800222a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002238:	2301      	movs	r3, #1
 800223a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800223c:	f107 030c 	add.w	r3, r7, #12
 8002240:	4619      	mov	r1, r3
 8002242:	4805      	ldr	r0, [pc, #20]	; (8002258 <HAL_TIM_MspPostInit+0x70>)
 8002244:	f000 fe8c 	bl	8002f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002248:	bf00      	nop
 800224a:	3720      	adds	r7, #32
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40010000 	.word	0x40010000
 8002254:	40023800 	.word	0x40023800
 8002258:	40021000 	.word	0x40021000

0800225c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	; 0x28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a19      	ldr	r2, [pc, #100]	; (80022e0 <HAL_UART_MspInit+0x84>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d12c      	bne.n	80022d8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <HAL_UART_MspInit+0x88>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	4a17      	ldr	r2, [pc, #92]	; (80022e4 <HAL_UART_MspInit+0x88>)
 8002288:	f043 0310 	orr.w	r3, r3, #16
 800228c:	6453      	str	r3, [r2, #68]	; 0x44
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <HAL_UART_MspInit+0x88>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_UART_MspInit+0x88>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a10      	ldr	r2, [pc, #64]	; (80022e4 <HAL_UART_MspInit+0x88>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <HAL_UART_MspInit+0x88>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c4:	2303      	movs	r3, #3
 80022c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022c8:	2307      	movs	r3, #7
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	4619      	mov	r1, r3
 80022d2:	4805      	ldr	r0, [pc, #20]	; (80022e8 <HAL_UART_MspInit+0x8c>)
 80022d4:	f000 fe44 	bl	8002f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022d8:	bf00      	nop
 80022da:	3728      	adds	r7, #40	; 0x28
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40011000 	.word	0x40011000
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40020000 	.word	0x40020000

080022ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <NMI_Handler+0x4>

080022f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f6:	e7fe      	b.n	80022f6 <HardFault_Handler+0x4>

080022f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <MemManage_Handler+0x4>

080022fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002302:	e7fe      	b.n	8002302 <BusFault_Handler+0x4>

08002304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002308:	e7fe      	b.n	8002308 <UsageFault_Handler+0x4>

0800230a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002338:	f000 f94c 	bl	80025d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}

08002340 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 8002344:	2001      	movs	r0, #1
 8002346:	f000 ffeb 	bl	8003320 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <DMA2_Stream1_IRQHandler+0x10>)
 8002356:	f000 fb99 	bl	8002a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	2000029c 	.word	0x2000029c

08002364 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
	return 1;
 8002368:	2301      	movs	r3, #1
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <_kill>:

int _kill(int pid, int sig)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800237e:	f003 fcf7 	bl	8005d70 <__errno>
 8002382:	4603      	mov	r3, r0
 8002384:	2216      	movs	r2, #22
 8002386:	601a      	str	r2, [r3, #0]
	return -1;
 8002388:	f04f 33ff 	mov.w	r3, #4294967295
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_exit>:

void _exit (int status)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ffe7 	bl	8002374 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023a6:	e7fe      	b.n	80023a6 <_exit+0x12>

080023a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	e00a      	b.n	80023d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023ba:	f3af 8000 	nop.w
 80023be:	4601      	mov	r1, r0
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	60ba      	str	r2, [r7, #8]
 80023c6:	b2ca      	uxtb	r2, r1
 80023c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	3301      	adds	r3, #1
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	dbf0      	blt.n	80023ba <_read+0x12>
	}

return len;
 80023d8:	687b      	ldr	r3, [r7, #4]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
	return -1;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800240a:	605a      	str	r2, [r3, #4]
	return 0;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <_isatty>:

int _isatty(int file)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
	return 1;
 8002422:	2301      	movs	r3, #1
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
	return 0;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002454:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <_sbrk+0x5c>)
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <_sbrk+0x60>)
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002460:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <_sbrk+0x64>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <_sbrk+0x64>)
 800246a:	4a12      	ldr	r2, [pc, #72]	; (80024b4 <_sbrk+0x68>)
 800246c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	429a      	cmp	r2, r3
 800247a:	d207      	bcs.n	800248c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800247c:	f003 fc78 	bl	8005d70 <__errno>
 8002480:	4603      	mov	r3, r0
 8002482:	220c      	movs	r2, #12
 8002484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002486:	f04f 33ff 	mov.w	r3, #4294967295
 800248a:	e009      	b.n	80024a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <_sbrk+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <_sbrk+0x64>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <_sbrk+0x64>)
 800249c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800249e:	68fb      	ldr	r3, [r7, #12]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20030000 	.word	0x20030000
 80024ac:	00000400 	.word	0x00000400
 80024b0:	20000350 	.word	0x20000350
 80024b4:	20000368 	.word	0x20000368

080024b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <SystemInit+0x20>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <SystemInit+0x20>)
 80024c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80024dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002514 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024e0:	480d      	ldr	r0, [pc, #52]	; (8002518 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024e2:	490e      	ldr	r1, [pc, #56]	; (800251c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024e4:	4a0e      	ldr	r2, [pc, #56]	; (8002520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024e8:	e002      	b.n	80024f0 <LoopCopyDataInit>

080024ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ee:	3304      	adds	r3, #4

080024f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f4:	d3f9      	bcc.n	80024ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024f6:	4a0b      	ldr	r2, [pc, #44]	; (8002524 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024f8:	4c0b      	ldr	r4, [pc, #44]	; (8002528 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024fc:	e001      	b.n	8002502 <LoopFillZerobss>

080024fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002500:	3204      	adds	r2, #4

08002502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002504:	d3fb      	bcc.n	80024fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002506:	f7ff ffd7 	bl	80024b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800250a:	f003 fc37 	bl	8005d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800250e:	f7ff fa2b 	bl	8001968 <main>
  bx  lr    
 8002512:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002514:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800251c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002520:	08009004 	.word	0x08009004
  ldr r2, =_sbss
 8002524:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002528:	20000368 	.word	0x20000368

0800252c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800252c:	e7fe      	b.n	800252c <ADC_IRQHandler>
	...

08002530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002534:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <HAL_Init+0x40>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <HAL_Init+0x40>)
 800253a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800253e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_Init+0x40>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <HAL_Init+0x40>)
 8002546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800254a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800254c:	4b08      	ldr	r3, [pc, #32]	; (8002570 <HAL_Init+0x40>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a07      	ldr	r2, [pc, #28]	; (8002570 <HAL_Init+0x40>)
 8002552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002558:	2003      	movs	r0, #3
 800255a:	f000 f94f 	bl	80027fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800255e:	2000      	movs	r0, #0
 8002560:	f000 f808 	bl	8002574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002564:	f7ff fd7c 	bl	8002060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40023c00 	.word	0x40023c00

08002574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800257c:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_InitTick+0x54>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_InitTick+0x58>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4619      	mov	r1, r3
 8002586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800258a:	fbb3 f3f1 	udiv	r3, r3, r1
 800258e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002592:	4618      	mov	r0, r3
 8002594:	f000 f967 	bl	8002866 <HAL_SYSTICK_Config>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e00e      	b.n	80025c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b0f      	cmp	r3, #15
 80025a6:	d80a      	bhi.n	80025be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a8:	2200      	movs	r2, #0
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295
 80025b0:	f000 f92f 	bl	8002812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b4:	4a06      	ldr	r2, [pc, #24]	; (80025d0 <HAL_InitTick+0x5c>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e000      	b.n	80025c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000004 	.word	0x20000004
 80025cc:	2000000c 	.word	0x2000000c
 80025d0:	20000008 	.word	0x20000008

080025d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_IncTick+0x20>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_IncTick+0x24>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4413      	add	r3, r2
 80025e4:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <HAL_IncTick+0x24>)
 80025e6:	6013      	str	r3, [r2, #0]
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	2000000c 	.word	0x2000000c
 80025f8:	20000354 	.word	0x20000354

080025fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_GetTick+0x14>)
 8002602:	681b      	ldr	r3, [r3, #0]
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	20000354 	.word	0x20000354

08002614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800261c:	f7ff ffee 	bl	80025fc <HAL_GetTick>
 8002620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262c:	d005      	beq.n	800263a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800262e:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <HAL_Delay+0x44>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4413      	add	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800263a:	bf00      	nop
 800263c:	f7ff ffde 	bl	80025fc <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	429a      	cmp	r2, r3
 800264a:	d8f7      	bhi.n	800263c <HAL_Delay+0x28>
  {
  }
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000000c 	.word	0x2000000c

0800265c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <__NVIC_SetPriorityGrouping+0x44>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002678:	4013      	ands	r3, r2
 800267a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800268c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800268e:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	60d3      	str	r3, [r2, #12]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a8:	4b04      	ldr	r3, [pc, #16]	; (80026bc <__NVIC_GetPriorityGrouping+0x18>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	f003 0307 	and.w	r3, r3, #7
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	db0b      	blt.n	80026ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	f003 021f 	and.w	r2, r3, #31
 80026d8:	4907      	ldr	r1, [pc, #28]	; (80026f8 <__NVIC_EnableIRQ+0x38>)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	2001      	movs	r0, #1
 80026e2:	fa00 f202 	lsl.w	r2, r0, r2
 80026e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000e100 	.word	0xe000e100

080026fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	6039      	str	r1, [r7, #0]
 8002706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270c:	2b00      	cmp	r3, #0
 800270e:	db0a      	blt.n	8002726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	b2da      	uxtb	r2, r3
 8002714:	490c      	ldr	r1, [pc, #48]	; (8002748 <__NVIC_SetPriority+0x4c>)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	0112      	lsls	r2, r2, #4
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	440b      	add	r3, r1
 8002720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002724:	e00a      	b.n	800273c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4908      	ldr	r1, [pc, #32]	; (800274c <__NVIC_SetPriority+0x50>)
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	3b04      	subs	r3, #4
 8002734:	0112      	lsls	r2, r2, #4
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	440b      	add	r3, r1
 800273a:	761a      	strb	r2, [r3, #24]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000e100 	.word	0xe000e100
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f1c3 0307 	rsb	r3, r3, #7
 800276a:	2b04      	cmp	r3, #4
 800276c:	bf28      	it	cs
 800276e:	2304      	movcs	r3, #4
 8002770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3304      	adds	r3, #4
 8002776:	2b06      	cmp	r3, #6
 8002778:	d902      	bls.n	8002780 <NVIC_EncodePriority+0x30>
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3b03      	subs	r3, #3
 800277e:	e000      	b.n	8002782 <NVIC_EncodePriority+0x32>
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	f04f 32ff 	mov.w	r2, #4294967295
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43da      	mvns	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	401a      	ands	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002798:	f04f 31ff 	mov.w	r1, #4294967295
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	43d9      	mvns	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	4313      	orrs	r3, r2
         );
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3724      	adds	r7, #36	; 0x24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c8:	d301      	bcc.n	80027ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00f      	b.n	80027ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ce:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <SysTick_Config+0x40>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027d6:	210f      	movs	r1, #15
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295
 80027dc:	f7ff ff8e 	bl	80026fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <SysTick_Config+0x40>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027e6:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <SysTick_Config+0x40>)
 80027e8:	2207      	movs	r2, #7
 80027ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	e000e010 	.word	0xe000e010

080027fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ff29 	bl	800265c <__NVIC_SetPriorityGrouping>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002812:	b580      	push	{r7, lr}
 8002814:	b086      	sub	sp, #24
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002824:	f7ff ff3e 	bl	80026a4 <__NVIC_GetPriorityGrouping>
 8002828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	6978      	ldr	r0, [r7, #20]
 8002830:	f7ff ff8e 	bl	8002750 <NVIC_EncodePriority>
 8002834:	4602      	mov	r2, r0
 8002836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff5d 	bl	80026fc <__NVIC_SetPriority>
}
 8002842:	bf00      	nop
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	4603      	mov	r3, r0
 8002852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff31 	bl	80026c0 <__NVIC_EnableIRQ>
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ffa2 	bl	80027b8 <SysTick_Config>
 8002874:	4603      	mov	r3, r0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800288c:	f7ff feb6 	bl	80025fc <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e099      	b.n	80029d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0201 	bic.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028bc:	e00f      	b.n	80028de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028be:	f7ff fe9d 	bl	80025fc <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b05      	cmp	r3, #5
 80028ca:	d908      	bls.n	80028de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2203      	movs	r2, #3
 80028d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e078      	b.n	80029d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e8      	bne.n	80028be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <HAL_DMA_Init+0x158>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800290a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002916:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002922:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	2b04      	cmp	r3, #4
 8002936:	d107      	bne.n	8002948 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	4313      	orrs	r3, r2
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f023 0307 	bic.w	r3, r3, #7
 800295e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2b04      	cmp	r3, #4
 8002970:	d117      	bne.n	80029a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00e      	beq.n	80029a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 fa6f 	bl	8002e68 <DMA_CheckFifoParam>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2240      	movs	r2, #64	; 0x40
 8002994:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800299e:	2301      	movs	r3, #1
 80029a0:	e016      	b.n	80029d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fa26 	bl	8002dfc <DMA_CalcBaseAndBitshift>
 80029b0:	4603      	mov	r3, r0
 80029b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	223f      	movs	r2, #63	; 0x3f
 80029ba:	409a      	lsls	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	f010803f 	.word	0xf010803f

080029dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
 80029e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_DMA_Start_IT+0x26>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e040      	b.n	8002a84 <HAL_DMA_Start_IT+0xa8>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d12f      	bne.n	8002a76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f9b8 	bl	8002da0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a34:	223f      	movs	r2, #63	; 0x3f
 8002a36:	409a      	lsls	r2, r3
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0216 	orr.w	r2, r2, #22
 8002a4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0208 	orr.w	r2, r2, #8
 8002a62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	e005      	b.n	8002a82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a98:	4b8e      	ldr	r3, [pc, #568]	; (8002cd4 <HAL_DMA_IRQHandler+0x248>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a8e      	ldr	r2, [pc, #568]	; (8002cd8 <HAL_DMA_IRQHandler+0x24c>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	0a9b      	lsrs	r3, r3, #10
 8002aa4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	2208      	movs	r2, #8
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d01a      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d013      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0204 	bic.w	r2, r2, #4
 8002ade:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af0:	f043 0201 	orr.w	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	2201      	movs	r2, #1
 8002afe:	409a      	lsls	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d012      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00b      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b26:	f043 0202 	orr.w	r2, r3, #2
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b32:	2204      	movs	r2, #4
 8002b34:	409a      	lsls	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d012      	beq.n	8002b64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00b      	beq.n	8002b64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	2204      	movs	r2, #4
 8002b52:	409a      	lsls	r2, r3
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5c:	f043 0204 	orr.w	r2, r3, #4
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	2210      	movs	r2, #16
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d043      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d03c      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b86:	2210      	movs	r2, #16
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d018      	beq.n	8002bce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d108      	bne.n	8002bbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d024      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	4798      	blx	r3
 8002bba:	e01f      	b.n	8002bfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01b      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	4798      	blx	r3
 8002bcc:	e016      	b.n	8002bfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d107      	bne.n	8002bec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0208 	bic.w	r2, r2, #8
 8002bea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	2220      	movs	r2, #32
 8002c02:	409a      	lsls	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 808f 	beq.w	8002d2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8087 	beq.w	8002d2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c22:	2220      	movs	r2, #32
 8002c24:	409a      	lsls	r2, r3
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b05      	cmp	r3, #5
 8002c34:	d136      	bne.n	8002ca4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0216 	bic.w	r2, r2, #22
 8002c44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <HAL_DMA_IRQHandler+0x1da>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0208 	bic.w	r2, r2, #8
 8002c74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7a:	223f      	movs	r2, #63	; 0x3f
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d07e      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4798      	blx	r3
        }
        return;
 8002ca2:	e079      	b.n	8002d98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01d      	beq.n	8002cee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10d      	bne.n	8002cdc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d031      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	4798      	blx	r3
 8002cd0:	e02c      	b.n	8002d2c <HAL_DMA_IRQHandler+0x2a0>
 8002cd2:	bf00      	nop
 8002cd4:	20000004 	.word	0x20000004
 8002cd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d023      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4798      	blx	r3
 8002cec:	e01e      	b.n	8002d2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10f      	bne.n	8002d1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0210 	bic.w	r2, r2, #16
 8002d0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d032      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d022      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2205      	movs	r2, #5
 8002d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0201 	bic.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d307      	bcc.n	8002d74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f2      	bne.n	8002d58 <HAL_DMA_IRQHandler+0x2cc>
 8002d72:	e000      	b.n	8002d76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	4798      	blx	r3
 8002d96:	e000      	b.n	8002d9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d98:	bf00      	nop
    }
  }
}
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dbc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b40      	cmp	r3, #64	; 0x40
 8002dcc:	d108      	bne.n	8002de0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dde:	e007      	b.n	8002df0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	60da      	str	r2, [r3, #12]
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	3b10      	subs	r3, #16
 8002e0c:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <DMA_CalcBaseAndBitshift+0x64>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	091b      	lsrs	r3, r3, #4
 8002e14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e16:	4a13      	ldr	r2, [pc, #76]	; (8002e64 <DMA_CalcBaseAndBitshift+0x68>)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d909      	bls.n	8002e3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e32:	f023 0303 	bic.w	r3, r3, #3
 8002e36:	1d1a      	adds	r2, r3, #4
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e3c:	e007      	b.n	8002e4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e46:	f023 0303 	bic.w	r3, r3, #3
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	aaaaaaab 	.word	0xaaaaaaab
 8002e64:	08008c10 	.word	0x08008c10

08002e68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d11f      	bne.n	8002ec2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d856      	bhi.n	8002f36 <DMA_CheckFifoParam+0xce>
 8002e88:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <DMA_CheckFifoParam+0x28>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002ea1 	.word	0x08002ea1
 8002e94:	08002eb3 	.word	0x08002eb3
 8002e98:	08002ea1 	.word	0x08002ea1
 8002e9c:	08002f37 	.word	0x08002f37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d046      	beq.n	8002f3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb0:	e043      	b.n	8002f3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eba:	d140      	bne.n	8002f3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec0:	e03d      	b.n	8002f3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eca:	d121      	bne.n	8002f10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d837      	bhi.n	8002f42 <DMA_CheckFifoParam+0xda>
 8002ed2:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <DMA_CheckFifoParam+0x70>)
 8002ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed8:	08002ee9 	.word	0x08002ee9
 8002edc:	08002eef 	.word	0x08002eef
 8002ee0:	08002ee9 	.word	0x08002ee9
 8002ee4:	08002f01 	.word	0x08002f01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
      break;
 8002eec:	e030      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d025      	beq.n	8002f46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002efe:	e022      	b.n	8002f46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f08:	d11f      	bne.n	8002f4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f0e:	e01c      	b.n	8002f4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d903      	bls.n	8002f1e <DMA_CheckFifoParam+0xb6>
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d003      	beq.n	8002f24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f1c:	e018      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
      break;
 8002f22:	e015      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00e      	beq.n	8002f4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      break;
 8002f34:	e00b      	b.n	8002f4e <DMA_CheckFifoParam+0xe6>
      break;
 8002f36:	bf00      	nop
 8002f38:	e00a      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e008      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e006      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      break;
 8002f42:	bf00      	nop
 8002f44:	e004      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      break;
 8002f46:	bf00      	nop
 8002f48:	e002      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f4a:	bf00      	nop
 8002f4c:	e000      	b.n	8002f50 <DMA_CheckFifoParam+0xe8>
      break;
 8002f4e:	bf00      	nop
    }
  } 
  
  return status; 
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop

08002f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	; 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	e177      	b.n	800326c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	f040 8166 	bne.w	8003266 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d005      	beq.n	8002fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d130      	bne.n	8003014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe8:	2201      	movs	r2, #1
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 0201 	and.w	r2, r3, #1
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	2b03      	cmp	r3, #3
 800301e:	d017      	beq.n	8003050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d123      	bne.n	80030a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	08da      	lsrs	r2, r3, #3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3208      	adds	r2, #8
 8003064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	220f      	movs	r2, #15
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	08da      	lsrs	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3208      	adds	r2, #8
 800309e:	69b9      	ldr	r1, [r7, #24]
 80030a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	2203      	movs	r2, #3
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0203 	and.w	r2, r3, #3
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80c0 	beq.w	8003266 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	4b66      	ldr	r3, [pc, #408]	; (8003284 <HAL_GPIO_Init+0x324>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	4a65      	ldr	r2, [pc, #404]	; (8003284 <HAL_GPIO_Init+0x324>)
 80030f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030f4:	6453      	str	r3, [r2, #68]	; 0x44
 80030f6:	4b63      	ldr	r3, [pc, #396]	; (8003284 <HAL_GPIO_Init+0x324>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003102:	4a61      	ldr	r2, [pc, #388]	; (8003288 <HAL_GPIO_Init+0x328>)
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	089b      	lsrs	r3, r3, #2
 8003108:	3302      	adds	r3, #2
 800310a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	220f      	movs	r2, #15
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4013      	ands	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a58      	ldr	r2, [pc, #352]	; (800328c <HAL_GPIO_Init+0x32c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d037      	beq.n	800319e <HAL_GPIO_Init+0x23e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a57      	ldr	r2, [pc, #348]	; (8003290 <HAL_GPIO_Init+0x330>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d031      	beq.n	800319a <HAL_GPIO_Init+0x23a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a56      	ldr	r2, [pc, #344]	; (8003294 <HAL_GPIO_Init+0x334>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d02b      	beq.n	8003196 <HAL_GPIO_Init+0x236>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a55      	ldr	r2, [pc, #340]	; (8003298 <HAL_GPIO_Init+0x338>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d025      	beq.n	8003192 <HAL_GPIO_Init+0x232>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a54      	ldr	r2, [pc, #336]	; (800329c <HAL_GPIO_Init+0x33c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d01f      	beq.n	800318e <HAL_GPIO_Init+0x22e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a53      	ldr	r2, [pc, #332]	; (80032a0 <HAL_GPIO_Init+0x340>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d019      	beq.n	800318a <HAL_GPIO_Init+0x22a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a52      	ldr	r2, [pc, #328]	; (80032a4 <HAL_GPIO_Init+0x344>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <HAL_GPIO_Init+0x226>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a51      	ldr	r2, [pc, #324]	; (80032a8 <HAL_GPIO_Init+0x348>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00d      	beq.n	8003182 <HAL_GPIO_Init+0x222>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a50      	ldr	r2, [pc, #320]	; (80032ac <HAL_GPIO_Init+0x34c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d007      	beq.n	800317e <HAL_GPIO_Init+0x21e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a4f      	ldr	r2, [pc, #316]	; (80032b0 <HAL_GPIO_Init+0x350>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_GPIO_Init+0x21a>
 8003176:	2309      	movs	r3, #9
 8003178:	e012      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 800317a:	230a      	movs	r3, #10
 800317c:	e010      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 800317e:	2308      	movs	r3, #8
 8003180:	e00e      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 8003182:	2307      	movs	r3, #7
 8003184:	e00c      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 8003186:	2306      	movs	r3, #6
 8003188:	e00a      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 800318a:	2305      	movs	r3, #5
 800318c:	e008      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 800318e:	2304      	movs	r3, #4
 8003190:	e006      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 8003192:	2303      	movs	r3, #3
 8003194:	e004      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 8003196:	2302      	movs	r3, #2
 8003198:	e002      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <HAL_GPIO_Init+0x240>
 800319e:	2300      	movs	r3, #0
 80031a0:	69fa      	ldr	r2, [r7, #28]
 80031a2:	f002 0203 	and.w	r2, r2, #3
 80031a6:	0092      	lsls	r2, r2, #2
 80031a8:	4093      	lsls	r3, r2
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031b0:	4935      	ldr	r1, [pc, #212]	; (8003288 <HAL_GPIO_Init+0x328>)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	089b      	lsrs	r3, r3, #2
 80031b6:	3302      	adds	r3, #2
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031be:	4b3d      	ldr	r3, [pc, #244]	; (80032b4 <HAL_GPIO_Init+0x354>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031e2:	4a34      	ldr	r2, [pc, #208]	; (80032b4 <HAL_GPIO_Init+0x354>)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031e8:	4b32      	ldr	r3, [pc, #200]	; (80032b4 <HAL_GPIO_Init+0x354>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800320c:	4a29      	ldr	r2, [pc, #164]	; (80032b4 <HAL_GPIO_Init+0x354>)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003212:	4b28      	ldr	r3, [pc, #160]	; (80032b4 <HAL_GPIO_Init+0x354>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	43db      	mvns	r3, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4013      	ands	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003236:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <HAL_GPIO_Init+0x354>)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800323c:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <HAL_GPIO_Init+0x354>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003260:	4a14      	ldr	r2, [pc, #80]	; (80032b4 <HAL_GPIO_Init+0x354>)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	3301      	adds	r3, #1
 800326a:	61fb      	str	r3, [r7, #28]
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	2b0f      	cmp	r3, #15
 8003270:	f67f ae84 	bls.w	8002f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	3724      	adds	r7, #36	; 0x24
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800
 8003288:	40013800 	.word	0x40013800
 800328c:	40020000 	.word	0x40020000
 8003290:	40020400 	.word	0x40020400
 8003294:	40020800 	.word	0x40020800
 8003298:	40020c00 	.word	0x40020c00
 800329c:	40021000 	.word	0x40021000
 80032a0:	40021400 	.word	0x40021400
 80032a4:	40021800 	.word	0x40021800
 80032a8:	40021c00 	.word	0x40021c00
 80032ac:	40022000 	.word	0x40022000
 80032b0:	40022400 	.word	0x40022400
 80032b4:	40013c00 	.word	0x40013c00

080032b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	807b      	strh	r3, [r7, #2]
 80032c4:	4613      	mov	r3, r2
 80032c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c8:	787b      	ldrb	r3, [r7, #1]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ce:	887a      	ldrh	r2, [r7, #2]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032d4:	e003      	b.n	80032de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032d6:	887b      	ldrh	r3, [r7, #2]
 80032d8:	041a      	lsls	r2, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	619a      	str	r2, [r3, #24]
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	460b      	mov	r3, r1
 80032f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032fc:	887a      	ldrh	r2, [r7, #2]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4013      	ands	r3, r2
 8003302:	041a      	lsls	r2, r3, #16
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	43d9      	mvns	r1, r3
 8003308:	887b      	ldrh	r3, [r7, #2]
 800330a:	400b      	ands	r3, r1
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	619a      	str	r2, [r3, #24]
}
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800332a:	4b08      	ldr	r3, [pc, #32]	; (800334c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800332c:	695a      	ldr	r2, [r3, #20]
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003336:	4a05      	ldr	r2, [pc, #20]	; (800334c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800333c:	88fb      	ldrh	r3, [r7, #6]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe f862 	bl	8001408 <HAL_GPIO_EXTI_Callback>
  }
}
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40013c00 	.word	0x40013c00

08003350 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e267      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d075      	beq.n	800345a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800336e:	4b88      	ldr	r3, [pc, #544]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b04      	cmp	r3, #4
 8003378:	d00c      	beq.n	8003394 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337a:	4b85      	ldr	r3, [pc, #532]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003382:	2b08      	cmp	r3, #8
 8003384:	d112      	bne.n	80033ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003386:	4b82      	ldr	r3, [pc, #520]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003392:	d10b      	bne.n	80033ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	4b7e      	ldr	r3, [pc, #504]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d05b      	beq.n	8003458 <HAL_RCC_OscConfig+0x108>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d157      	bne.n	8003458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e242      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b4:	d106      	bne.n	80033c4 <HAL_RCC_OscConfig+0x74>
 80033b6:	4b76      	ldr	r3, [pc, #472]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a75      	ldr	r2, [pc, #468]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e01d      	b.n	8003400 <HAL_RCC_OscConfig+0xb0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x98>
 80033ce:	4b70      	ldr	r3, [pc, #448]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6f      	ldr	r2, [pc, #444]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4b6d      	ldr	r3, [pc, #436]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a6c      	ldr	r2, [pc, #432]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e00b      	b.n	8003400 <HAL_RCC_OscConfig+0xb0>
 80033e8:	4b69      	ldr	r3, [pc, #420]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a68      	ldr	r2, [pc, #416]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4b66      	ldr	r3, [pc, #408]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a65      	ldr	r2, [pc, #404]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80033fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d013      	beq.n	8003430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7ff f8f8 	bl	80025fc <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003410:	f7ff f8f4 	bl	80025fc <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	; 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e207      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	4b5b      	ldr	r3, [pc, #364]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0xc0>
 800342e:	e014      	b.n	800345a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7ff f8e4 	bl	80025fc <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003438:	f7ff f8e0 	bl	80025fc <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e1f3      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344a:	4b51      	ldr	r3, [pc, #324]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0xe8>
 8003456:	e000      	b.n	800345a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d063      	beq.n	800352e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003466:	4b4a      	ldr	r3, [pc, #296]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00b      	beq.n	800348a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003472:	4b47      	ldr	r3, [pc, #284]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800347a:	2b08      	cmp	r3, #8
 800347c:	d11c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347e:	4b44      	ldr	r3, [pc, #272]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d116      	bne.n	80034b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348a:	4b41      	ldr	r3, [pc, #260]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_RCC_OscConfig+0x152>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d001      	beq.n	80034a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e1c7      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a2:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4937      	ldr	r1, [pc, #220]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b6:	e03a      	b.n	800352e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d020      	beq.n	8003502 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c0:	4b34      	ldr	r3, [pc, #208]	; (8003594 <HAL_RCC_OscConfig+0x244>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7ff f899 	bl	80025fc <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ce:	f7ff f895 	bl	80025fc <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e1a8      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e0:	4b2b      	ldr	r3, [pc, #172]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ec:	4b28      	ldr	r3, [pc, #160]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4925      	ldr	r1, [pc, #148]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	600b      	str	r3, [r1, #0]
 8003500:	e015      	b.n	800352e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003502:	4b24      	ldr	r3, [pc, #144]	; (8003594 <HAL_RCC_OscConfig+0x244>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7ff f878 	bl	80025fc <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003510:	f7ff f874 	bl	80025fc <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e187      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003522:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d036      	beq.n	80035a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d016      	beq.n	8003570 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003542:	4b15      	ldr	r3, [pc, #84]	; (8003598 <HAL_RCC_OscConfig+0x248>)
 8003544:	2201      	movs	r2, #1
 8003546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7ff f858 	bl	80025fc <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003550:	f7ff f854 	bl	80025fc <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e167      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_RCC_OscConfig+0x240>)
 8003564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0x200>
 800356e:	e01b      	b.n	80035a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003570:	4b09      	ldr	r3, [pc, #36]	; (8003598 <HAL_RCC_OscConfig+0x248>)
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003576:	f7ff f841 	bl	80025fc <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800357c:	e00e      	b.n	800359c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800357e:	f7ff f83d 	bl	80025fc <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d907      	bls.n	800359c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e150      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
 8003590:	40023800 	.word	0x40023800
 8003594:	42470000 	.word	0x42470000
 8003598:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800359c:	4b88      	ldr	r3, [pc, #544]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800359e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1ea      	bne.n	800357e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 8097 	beq.w	80036e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b6:	2300      	movs	r3, #0
 80035b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ba:	4b81      	ldr	r3, [pc, #516]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10f      	bne.n	80035e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	4b7d      	ldr	r3, [pc, #500]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	4a7c      	ldr	r2, [pc, #496]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d4:	6413      	str	r3, [r2, #64]	; 0x40
 80035d6:	4b7a      	ldr	r3, [pc, #488]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e2:	2301      	movs	r3, #1
 80035e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e6:	4b77      	ldr	r3, [pc, #476]	; (80037c4 <HAL_RCC_OscConfig+0x474>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d118      	bne.n	8003624 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f2:	4b74      	ldr	r3, [pc, #464]	; (80037c4 <HAL_RCC_OscConfig+0x474>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a73      	ldr	r2, [pc, #460]	; (80037c4 <HAL_RCC_OscConfig+0x474>)
 80035f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035fe:	f7fe fffd 	bl	80025fc <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003606:	f7fe fff9 	bl	80025fc <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e10c      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	4b6a      	ldr	r3, [pc, #424]	; (80037c4 <HAL_RCC_OscConfig+0x474>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d106      	bne.n	800363a <HAL_RCC_OscConfig+0x2ea>
 800362c:	4b64      	ldr	r3, [pc, #400]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800362e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003630:	4a63      	ldr	r2, [pc, #396]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6713      	str	r3, [r2, #112]	; 0x70
 8003638:	e01c      	b.n	8003674 <HAL_RCC_OscConfig+0x324>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b05      	cmp	r3, #5
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x30c>
 8003642:	4b5f      	ldr	r3, [pc, #380]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	4a5e      	ldr	r2, [pc, #376]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	6713      	str	r3, [r2, #112]	; 0x70
 800364e:	4b5c      	ldr	r3, [pc, #368]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	4a5b      	ldr	r2, [pc, #364]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	6713      	str	r3, [r2, #112]	; 0x70
 800365a:	e00b      	b.n	8003674 <HAL_RCC_OscConfig+0x324>
 800365c:	4b58      	ldr	r3, [pc, #352]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	4a57      	ldr	r2, [pc, #348]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	6713      	str	r3, [r2, #112]	; 0x70
 8003668:	4b55      	ldr	r3, [pc, #340]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	4a54      	ldr	r2, [pc, #336]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800366e:	f023 0304 	bic.w	r3, r3, #4
 8003672:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d015      	beq.n	80036a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367c:	f7fe ffbe 	bl	80025fc <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003682:	e00a      	b.n	800369a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003684:	f7fe ffba 	bl	80025fc <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e0cb      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369a:	4b49      	ldr	r3, [pc, #292]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0ee      	beq.n	8003684 <HAL_RCC_OscConfig+0x334>
 80036a6:	e014      	b.n	80036d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a8:	f7fe ffa8 	bl	80025fc <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ae:	e00a      	b.n	80036c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b0:	f7fe ffa4 	bl	80025fc <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e0b5      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c6:	4b3e      	ldr	r3, [pc, #248]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1ee      	bne.n	80036b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d105      	bne.n	80036e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d8:	4b39      	ldr	r3, [pc, #228]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	4a38      	ldr	r2, [pc, #224]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 80a1 	beq.w	8003830 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ee:	4b34      	ldr	r3, [pc, #208]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d05c      	beq.n	80037b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d141      	bne.n	8003786 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <HAL_RCC_OscConfig+0x478>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7fe ff78 	bl	80025fc <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003710:	f7fe ff74 	bl	80025fc <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e087      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	019b      	lsls	r3, r3, #6
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	085b      	lsrs	r3, r3, #1
 8003746:	3b01      	subs	r3, #1
 8003748:	041b      	lsls	r3, r3, #16
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	061b      	lsls	r3, r3, #24
 8003752:	491b      	ldr	r1, [pc, #108]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <HAL_RCC_OscConfig+0x478>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fe ff4d 	bl	80025fc <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003766:	f7fe ff49 	bl	80025fc <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e05c      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x416>
 8003784:	e054      	b.n	8003830 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <HAL_RCC_OscConfig+0x478>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe ff36 	bl	80025fc <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003794:	f7fe ff32 	bl	80025fc <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e045      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <HAL_RCC_OscConfig+0x470>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x444>
 80037b2:	e03d      	b.n	8003830 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e038      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40007000 	.word	0x40007000
 80037c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_RCC_OscConfig+0x4ec>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d028      	beq.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d121      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d11a      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037fc:	4013      	ands	r3, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003802:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003804:	4293      	cmp	r3, r2
 8003806:	d111      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	085b      	lsrs	r3, r3, #1
 8003814:	3b01      	subs	r3, #1
 8003816:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d107      	bne.n	800382c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800

08003840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0cc      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003854:	4b68      	ldr	r3, [pc, #416]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d90c      	bls.n	800387c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003862:	4b65      	ldr	r3, [pc, #404]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b63      	ldr	r3, [pc, #396]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0b8      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d020      	beq.n	80038ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003894:	4b59      	ldr	r3, [pc, #356]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4a58      	ldr	r2, [pc, #352]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800389e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038ac:	4b53      	ldr	r3, [pc, #332]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4a52      	ldr	r2, [pc, #328]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b8:	4b50      	ldr	r3, [pc, #320]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	494d      	ldr	r1, [pc, #308]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d044      	beq.n	8003960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b47      	ldr	r3, [pc, #284]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d119      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e07f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d003      	beq.n	80038fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fe:	4b3f      	ldr	r3, [pc, #252]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e06f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390e:	4b3b      	ldr	r3, [pc, #236]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e067      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800391e:	4b37      	ldr	r3, [pc, #220]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f023 0203 	bic.w	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4934      	ldr	r1, [pc, #208]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 800392c:	4313      	orrs	r3, r2
 800392e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003930:	f7fe fe64 	bl	80025fc <HAL_GetTick>
 8003934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003936:	e00a      	b.n	800394e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003938:	f7fe fe60 	bl	80025fc <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	; 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e04f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394e:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 020c 	and.w	r2, r3, #12
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	429a      	cmp	r2, r3
 800395e:	d1eb      	bne.n	8003938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003960:	4b25      	ldr	r3, [pc, #148]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d20c      	bcs.n	8003988 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396e:	4b22      	ldr	r3, [pc, #136]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e032      	b.n	80039ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4916      	ldr	r1, [pc, #88]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039b2:	4b12      	ldr	r3, [pc, #72]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	490e      	ldr	r1, [pc, #56]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039c6:	f000 f821 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80039ca:	4602      	mov	r2, r0
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	490a      	ldr	r1, [pc, #40]	; (8003a00 <HAL_RCC_ClockConfig+0x1c0>)
 80039d8:	5ccb      	ldrb	r3, [r1, r3]
 80039da:	fa22 f303 	lsr.w	r3, r2, r3
 80039de:	4a09      	ldr	r2, [pc, #36]	; (8003a04 <HAL_RCC_ClockConfig+0x1c4>)
 80039e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039e2:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCC_ClockConfig+0x1c8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe fdc4 	bl	8002574 <HAL_InitTick>

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023c00 	.word	0x40023c00
 80039fc:	40023800 	.word	0x40023800
 8003a00:	08008bf8 	.word	0x08008bf8
 8003a04:	20000004 	.word	0x20000004
 8003a08:	20000008 	.word	0x20000008

08003a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a10:	b094      	sub	sp, #80	; 0x50
 8003a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	647b      	str	r3, [r7, #68]	; 0x44
 8003a18:	2300      	movs	r3, #0
 8003a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a24:	4b79      	ldr	r3, [pc, #484]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d00d      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0x40>
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	f200 80e1 	bhi.w	8003bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0x34>
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a3e:	e0db      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a40:	4b73      	ldr	r3, [pc, #460]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a42:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a44:	e0db      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a46:	4b73      	ldr	r3, [pc, #460]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a4a:	e0d8      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a4c:	4b6f      	ldr	r3, [pc, #444]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a54:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a56:	4b6d      	ldr	r3, [pc, #436]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d063      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a62:	4b6a      	ldr	r3, [pc, #424]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	099b      	lsrs	r3, r3, #6
 8003a68:	2200      	movs	r2, #0
 8003a6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a74:	633b      	str	r3, [r7, #48]	; 0x30
 8003a76:	2300      	movs	r3, #0
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
 8003a7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a7e:	4622      	mov	r2, r4
 8003a80:	462b      	mov	r3, r5
 8003a82:	f04f 0000 	mov.w	r0, #0
 8003a86:	f04f 0100 	mov.w	r1, #0
 8003a8a:	0159      	lsls	r1, r3, #5
 8003a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a90:	0150      	lsls	r0, r2, #5
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4621      	mov	r1, r4
 8003a98:	1a51      	subs	r1, r2, r1
 8003a9a:	6139      	str	r1, [r7, #16]
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ab0:	4659      	mov	r1, fp
 8003ab2:	018b      	lsls	r3, r1, #6
 8003ab4:	4651      	mov	r1, sl
 8003ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aba:	4651      	mov	r1, sl
 8003abc:	018a      	lsls	r2, r1, #6
 8003abe:	4651      	mov	r1, sl
 8003ac0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ac4:	4659      	mov	r1, fp
 8003ac6:	eb63 0901 	sbc.w	r9, r3, r1
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ade:	4690      	mov	r8, r2
 8003ae0:	4699      	mov	r9, r3
 8003ae2:	4623      	mov	r3, r4
 8003ae4:	eb18 0303 	adds.w	r3, r8, r3
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	462b      	mov	r3, r5
 8003aec:	eb49 0303 	adc.w	r3, r9, r3
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003afe:	4629      	mov	r1, r5
 8003b00:	024b      	lsls	r3, r1, #9
 8003b02:	4621      	mov	r1, r4
 8003b04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b08:	4621      	mov	r1, r4
 8003b0a:	024a      	lsls	r2, r1, #9
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b12:	2200      	movs	r2, #0
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b1c:	f7fd f8a4 	bl	8000c68 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4613      	mov	r3, r2
 8003b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b28:	e058      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b2a:	4b38      	ldr	r3, [pc, #224]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	099b      	lsrs	r3, r3, #6
 8003b30:	2200      	movs	r2, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	4611      	mov	r1, r2
 8003b36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b3a:	623b      	str	r3, [r7, #32]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b44:	4642      	mov	r2, r8
 8003b46:	464b      	mov	r3, r9
 8003b48:	f04f 0000 	mov.w	r0, #0
 8003b4c:	f04f 0100 	mov.w	r1, #0
 8003b50:	0159      	lsls	r1, r3, #5
 8003b52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b56:	0150      	lsls	r0, r2, #5
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4641      	mov	r1, r8
 8003b5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b62:	4649      	mov	r1, r9
 8003b64:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b7c:	ebb2 040a 	subs.w	r4, r2, sl
 8003b80:	eb63 050b 	sbc.w	r5, r3, fp
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	00eb      	lsls	r3, r5, #3
 8003b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b92:	00e2      	lsls	r2, r4, #3
 8003b94:	4614      	mov	r4, r2
 8003b96:	461d      	mov	r5, r3
 8003b98:	4643      	mov	r3, r8
 8003b9a:	18e3      	adds	r3, r4, r3
 8003b9c:	603b      	str	r3, [r7, #0]
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	eb45 0303 	adc.w	r3, r5, r3
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	028b      	lsls	r3, r1, #10
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	028a      	lsls	r2, r1, #10
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	61fa      	str	r2, [r7, #28]
 8003bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bd0:	f7fd f84a 	bl	8000c68 <__aeabi_uldivmod>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4613      	mov	r3, r2
 8003bda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	3301      	adds	r3, #1
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003bec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bf6:	e002      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bfa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3750      	adds	r7, #80	; 0x50
 8003c04:	46bd      	mov	sp, r7
 8003c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	00f42400 	.word	0x00f42400
 8003c14:	007a1200 	.word	0x007a1200

08003c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000004 	.word	0x20000004

08003c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c34:	f7ff fff0 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	0a9b      	lsrs	r3, r3, #10
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	4903      	ldr	r1, [pc, #12]	; (8003c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c46:	5ccb      	ldrb	r3, [r1, r3]
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40023800 	.word	0x40023800
 8003c54:	08008c08 	.word	0x08008c08

08003c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c5c:	f7ff ffdc 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0b5b      	lsrs	r3, r3, #13
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4903      	ldr	r1, [pc, #12]	; (8003c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c6e:	5ccb      	ldrb	r3, [r1, r3]
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	08008c08 	.word	0x08008c08

08003c80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e07b      	b.n	8003d8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d108      	bne.n	8003cac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ca2:	d009      	beq.n	8003cb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	61da      	str	r2, [r3, #28]
 8003caa:	e005      	b.n	8003cb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fe f9ec 	bl	80020b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3c:	ea42 0103 	orr.w	r1, r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	0c1b      	lsrs	r3, r3, #16
 8003d56:	f003 0104 	and.w	r1, r3, #4
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	f003 0210 	and.w	r2, r3, #16
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69da      	ldr	r2, [r3, #28]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b088      	sub	sp, #32
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_SPI_Transmit+0x22>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e126      	b.n	8004002 <HAL_SPI_Transmit+0x270>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dbc:	f7fe fc1e 	bl	80025fc <HAL_GetTick>
 8003dc0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d002      	beq.n	8003dd8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003dd6:	e10b      	b.n	8003ff0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_SPI_Transmit+0x52>
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003de8:	e102      	b.n	8003ff0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2203      	movs	r2, #3
 8003dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	88fa      	ldrh	r2, [r7, #6]
 8003e02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	88fa      	ldrh	r2, [r7, #6]
 8003e08:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e30:	d10f      	bne.n	8003e52 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5c:	2b40      	cmp	r3, #64	; 0x40
 8003e5e:	d007      	beq.n	8003e70 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e78:	d14b      	bne.n	8003f12 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <HAL_SPI_Transmit+0xf6>
 8003e82:	8afb      	ldrh	r3, [r7, #22]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d13e      	bne.n	8003f06 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	881a      	ldrh	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	1c9a      	adds	r2, r3, #2
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003eac:	e02b      	b.n	8003f06 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d112      	bne.n	8003ee2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	881a      	ldrh	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	1c9a      	adds	r2, r3, #2
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ee0:	e011      	b.n	8003f06 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ee2:	f7fe fb8b 	bl	80025fc <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d803      	bhi.n	8003efa <HAL_SPI_Transmit+0x168>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d102      	bne.n	8003f00 <HAL_SPI_Transmit+0x16e>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d102      	bne.n	8003f06 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f04:	e074      	b.n	8003ff0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1ce      	bne.n	8003eae <HAL_SPI_Transmit+0x11c>
 8003f10:	e04c      	b.n	8003fac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_SPI_Transmit+0x18e>
 8003f1a:	8afb      	ldrh	r3, [r7, #22]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d140      	bne.n	8003fa2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	7812      	ldrb	r2, [r2, #0]
 8003f2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f46:	e02c      	b.n	8003fa2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d113      	bne.n	8003f7e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	330c      	adds	r3, #12
 8003f60:	7812      	ldrb	r2, [r2, #0]
 8003f62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f7c:	e011      	b.n	8003fa2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f7e:	f7fe fb3d 	bl	80025fc <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d803      	bhi.n	8003f96 <HAL_SPI_Transmit+0x204>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f94:	d102      	bne.n	8003f9c <HAL_SPI_Transmit+0x20a>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d102      	bne.n	8003fa2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fa0:	e026      	b.n	8003ff0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1cd      	bne.n	8003f48 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	6839      	ldr	r1, [r7, #0]
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 fbcb 	bl	800474c <SPI_EndRxTxTransaction>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10a      	bne.n	8003fe0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	77fb      	strb	r3, [r7, #31]
 8003fec:	e000      	b.n	8003ff0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003fee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004000:	7ffb      	ldrb	r3, [r7, #31]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3720      	adds	r7, #32
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b088      	sub	sp, #32
 800400e:	af02      	add	r7, sp, #8
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	4613      	mov	r3, r2
 8004018:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004026:	d112      	bne.n	800404e <HAL_SPI_Receive+0x44>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10e      	bne.n	800404e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2204      	movs	r2, #4
 8004034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004038:	88fa      	ldrh	r2, [r7, #6]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	4613      	mov	r3, r2
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	68b9      	ldr	r1, [r7, #8]
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 f8f1 	bl	800422c <HAL_SPI_TransmitReceive>
 800404a:	4603      	mov	r3, r0
 800404c:	e0ea      	b.n	8004224 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_SPI_Receive+0x52>
 8004058:	2302      	movs	r3, #2
 800405a:	e0e3      	b.n	8004224 <HAL_SPI_Receive+0x21a>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004064:	f7fe faca 	bl	80025fc <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b01      	cmp	r3, #1
 8004074:	d002      	beq.n	800407c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004076:	2302      	movs	r3, #2
 8004078:	75fb      	strb	r3, [r7, #23]
    goto error;
 800407a:	e0ca      	b.n	8004212 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <HAL_SPI_Receive+0x7e>
 8004082:	88fb      	ldrh	r3, [r7, #6]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d102      	bne.n	800408e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800408c:	e0c1      	b.n	8004212 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2204      	movs	r2, #4
 8004092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	88fa      	ldrh	r2, [r7, #6]
 80040a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	88fa      	ldrh	r2, [r7, #6]
 80040ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d4:	d10f      	bne.n	80040f6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004100:	2b40      	cmp	r3, #64	; 0x40
 8004102:	d007      	beq.n	8004114 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004112:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d162      	bne.n	80041e2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800411c:	e02e      	b.n	800417c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b01      	cmp	r3, #1
 800412a:	d115      	bne.n	8004158 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f103 020c 	add.w	r2, r3, #12
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	7812      	ldrb	r2, [r2, #0]
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004156:	e011      	b.n	800417c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004158:	f7fe fa50 	bl	80025fc <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d803      	bhi.n	8004170 <HAL_SPI_Receive+0x166>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416e:	d102      	bne.n	8004176 <HAL_SPI_Receive+0x16c>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d102      	bne.n	800417c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	75fb      	strb	r3, [r7, #23]
          goto error;
 800417a:	e04a      	b.n	8004212 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1cb      	bne.n	800411e <HAL_SPI_Receive+0x114>
 8004186:	e031      	b.n	80041ec <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b01      	cmp	r3, #1
 8004194:	d113      	bne.n	80041be <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a0:	b292      	uxth	r2, r2
 80041a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	1c9a      	adds	r2, r3, #2
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041bc:	e011      	b.n	80041e2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041be:	f7fe fa1d 	bl	80025fc <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d803      	bhi.n	80041d6 <HAL_SPI_Receive+0x1cc>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d4:	d102      	bne.n	80041dc <HAL_SPI_Receive+0x1d2>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80041e0:	e017      	b.n	8004212 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1cd      	bne.n	8004188 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	6839      	ldr	r1, [r7, #0]
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fa45 	bl	8004680 <SPI_EndRxTransaction>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	75fb      	strb	r3, [r7, #23]
 800420e:	e000      	b.n	8004212 <HAL_SPI_Receive+0x208>
  }

error :
 8004210:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004222:	7dfb      	ldrb	r3, [r7, #23]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08c      	sub	sp, #48	; 0x30
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800423a:	2301      	movs	r3, #1
 800423c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_SPI_TransmitReceive+0x26>
 800424e:	2302      	movs	r3, #2
 8004250:	e18a      	b.n	8004568 <HAL_SPI_TransmitReceive+0x33c>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800425a:	f7fe f9cf 	bl	80025fc <HAL_GetTick>
 800425e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004270:	887b      	ldrh	r3, [r7, #2]
 8004272:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004274:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004278:	2b01      	cmp	r3, #1
 800427a:	d00f      	beq.n	800429c <HAL_SPI_TransmitReceive+0x70>
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004282:	d107      	bne.n	8004294 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d103      	bne.n	8004294 <HAL_SPI_TransmitReceive+0x68>
 800428c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004290:	2b04      	cmp	r3, #4
 8004292:	d003      	beq.n	800429c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004294:	2302      	movs	r3, #2
 8004296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800429a:	e15b      	b.n	8004554 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_SPI_TransmitReceive+0x82>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <HAL_SPI_TransmitReceive+0x82>
 80042a8:	887b      	ldrh	r3, [r7, #2]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d103      	bne.n	80042b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80042b4:	e14e      	b.n	8004554 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d003      	beq.n	80042ca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2205      	movs	r2, #5
 80042c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	887a      	ldrh	r2, [r7, #2]
 80042da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	887a      	ldrh	r2, [r7, #2]
 80042e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	887a      	ldrh	r2, [r7, #2]
 80042ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	887a      	ldrh	r2, [r7, #2]
 80042f2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430a:	2b40      	cmp	r3, #64	; 0x40
 800430c:	d007      	beq.n	800431e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800431c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004326:	d178      	bne.n	800441a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_SPI_TransmitReceive+0x10a>
 8004330:	8b7b      	ldrh	r3, [r7, #26]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d166      	bne.n	8004404 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	881a      	ldrh	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	1c9a      	adds	r2, r3, #2
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800435a:	e053      	b.n	8004404 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b02      	cmp	r3, #2
 8004368:	d11b      	bne.n	80043a2 <HAL_SPI_TransmitReceive+0x176>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d016      	beq.n	80043a2 <HAL_SPI_TransmitReceive+0x176>
 8004374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004376:	2b01      	cmp	r3, #1
 8004378:	d113      	bne.n	80043a2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	881a      	ldrh	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	1c9a      	adds	r2, r3, #2
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d119      	bne.n	80043e4 <HAL_SPI_TransmitReceive+0x1b8>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d014      	beq.n	80043e4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	b292      	uxth	r2, r2
 80043c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	1c9a      	adds	r2, r3, #2
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043e0:	2301      	movs	r3, #1
 80043e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043e4:	f7fe f90a 	bl	80025fc <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d807      	bhi.n	8004404 <HAL_SPI_TransmitReceive+0x1d8>
 80043f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fa:	d003      	beq.n	8004404 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004402:	e0a7      	b.n	8004554 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1a6      	bne.n	800435c <HAL_SPI_TransmitReceive+0x130>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1a1      	bne.n	800435c <HAL_SPI_TransmitReceive+0x130>
 8004418:	e07c      	b.n	8004514 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <HAL_SPI_TransmitReceive+0x1fc>
 8004422:	8b7b      	ldrh	r3, [r7, #26]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d16b      	bne.n	8004500 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	330c      	adds	r3, #12
 8004432:	7812      	ldrb	r2, [r2, #0]
 8004434:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800444e:	e057      	b.n	8004500 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b02      	cmp	r3, #2
 800445c:	d11c      	bne.n	8004498 <HAL_SPI_TransmitReceive+0x26c>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d017      	beq.n	8004498 <HAL_SPI_TransmitReceive+0x26c>
 8004468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446a:	2b01      	cmp	r3, #1
 800446c:	d114      	bne.n	8004498 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	330c      	adds	r3, #12
 8004478:	7812      	ldrb	r2, [r2, #0]
 800447a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d119      	bne.n	80044da <HAL_SPI_TransmitReceive+0x2ae>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d014      	beq.n	80044da <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044d6:	2301      	movs	r3, #1
 80044d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044da:	f7fe f88f 	bl	80025fc <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d803      	bhi.n	80044f2 <HAL_SPI_TransmitReceive+0x2c6>
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d102      	bne.n	80044f8 <HAL_SPI_TransmitReceive+0x2cc>
 80044f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d103      	bne.n	8004500 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80044fe:	e029      	b.n	8004554 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1a2      	bne.n	8004450 <HAL_SPI_TransmitReceive+0x224>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d19d      	bne.n	8004450 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004516:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f917 	bl	800474c <SPI_EndRxTxTransaction>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d006      	beq.n	8004532 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2220      	movs	r2, #32
 800452e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004530:	e010      	b.n	8004554 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10b      	bne.n	8004552 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	e000      	b.n	8004554 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004552:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004564:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004568:	4618      	mov	r0, r3
 800456a:	3730      	adds	r7, #48	; 0x30
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004580:	f7fe f83c 	bl	80025fc <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	4413      	add	r3, r2
 800458e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004590:	f7fe f834 	bl	80025fc <HAL_GetTick>
 8004594:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004596:	4b39      	ldr	r3, [pc, #228]	; (800467c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	015b      	lsls	r3, r3, #5
 800459c:	0d1b      	lsrs	r3, r3, #20
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	fb02 f303 	mul.w	r3, r2, r3
 80045a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045a6:	e054      	b.n	8004652 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ae:	d050      	beq.n	8004652 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045b0:	f7fe f824 	bl	80025fc <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	69fa      	ldr	r2, [r7, #28]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d902      	bls.n	80045c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d13d      	bne.n	8004642 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045de:	d111      	bne.n	8004604 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e8:	d004      	beq.n	80045f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045f2:	d107      	bne.n	8004604 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004602:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800460c:	d10f      	bne.n	800462e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800462c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e017      	b.n	8004672 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	3b01      	subs	r3, #1
 8004650:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	4013      	ands	r3, r2
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	429a      	cmp	r2, r3
 8004660:	bf0c      	ite	eq
 8004662:	2301      	moveq	r3, #1
 8004664:	2300      	movne	r3, #0
 8004666:	b2db      	uxtb	r3, r3
 8004668:	461a      	mov	r2, r3
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	429a      	cmp	r2, r3
 800466e:	d19b      	bne.n	80045a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3720      	adds	r7, #32
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20000004 	.word	0x20000004

08004680 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004694:	d111      	bne.n	80046ba <SPI_EndRxTransaction+0x3a>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800469e:	d004      	beq.n	80046aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a8:	d107      	bne.n	80046ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046c2:	d12a      	bne.n	800471a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046cc:	d012      	beq.n	80046f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2200      	movs	r2, #0
 80046d6:	2180      	movs	r1, #128	; 0x80
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f7ff ff49 	bl	8004570 <SPI_WaitFlagStateUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d02d      	beq.n	8004740 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e8:	f043 0220 	orr.w	r2, r3, #32
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e026      	b.n	8004742 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2200      	movs	r2, #0
 80046fc:	2101      	movs	r1, #1
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f7ff ff36 	bl	8004570 <SPI_WaitFlagStateUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d01a      	beq.n	8004740 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470e:	f043 0220 	orr.w	r2, r3, #32
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e013      	b.n	8004742 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2200      	movs	r2, #0
 8004722:	2101      	movs	r1, #1
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f7ff ff23 	bl	8004570 <SPI_WaitFlagStateUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d007      	beq.n	8004740 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004734:	f043 0220 	orr.w	r2, r3, #32
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e000      	b.n	8004742 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af02      	add	r7, sp, #8
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004758:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <SPI_EndRxTxTransaction+0x7c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <SPI_EndRxTxTransaction+0x80>)
 800475e:	fba2 2303 	umull	r2, r3, r2, r3
 8004762:	0d5b      	lsrs	r3, r3, #21
 8004764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004768:	fb02 f303 	mul.w	r3, r2, r3
 800476c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004776:	d112      	bne.n	800479e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2200      	movs	r2, #0
 8004780:	2180      	movs	r1, #128	; 0x80
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f7ff fef4 	bl	8004570 <SPI_WaitFlagStateUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d016      	beq.n	80047bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004792:	f043 0220 	orr.w	r2, r3, #32
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e00f      	b.n	80047be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b4:	2b80      	cmp	r3, #128	; 0x80
 80047b6:	d0f2      	beq.n	800479e <SPI_EndRxTxTransaction+0x52>
 80047b8:	e000      	b.n	80047bc <SPI_EndRxTxTransaction+0x70>
        break;
 80047ba:	bf00      	nop
  }

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20000004 	.word	0x20000004
 80047cc:	165e9f81 	.word	0x165e9f81

080047d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e041      	b.n	8004866 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fd fca2 	bl	8002140 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3304      	adds	r3, #4
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f000 fba8 	bl	8004f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d109      	bne.n	800489c <HAL_TIM_PWM_Start_DMA+0x2c>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	bf0c      	ite	eq
 8004894:	2301      	moveq	r3, #1
 8004896:	2300      	movne	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	e022      	b.n	80048e2 <HAL_TIM_PWM_Start_DMA+0x72>
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d109      	bne.n	80048b6 <HAL_TIM_PWM_Start_DMA+0x46>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	bf0c      	ite	eq
 80048ae:	2301      	moveq	r3, #1
 80048b0:	2300      	movne	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	e015      	b.n	80048e2 <HAL_TIM_PWM_Start_DMA+0x72>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d109      	bne.n	80048d0 <HAL_TIM_PWM_Start_DMA+0x60>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	bf0c      	ite	eq
 80048c8:	2301      	moveq	r3, #1
 80048ca:	2300      	movne	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	e008      	b.n	80048e2 <HAL_TIM_PWM_Start_DMA+0x72>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	bf0c      	ite	eq
 80048dc:	2301      	moveq	r3, #1
 80048de:	2300      	movne	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80048e6:	2302      	movs	r3, #2
 80048e8:	e171      	b.n	8004bce <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d109      	bne.n	8004904 <HAL_TIM_PWM_Start_DMA+0x94>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	bf0c      	ite	eq
 80048fc:	2301      	moveq	r3, #1
 80048fe:	2300      	movne	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	e022      	b.n	800494a <HAL_TIM_PWM_Start_DMA+0xda>
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b04      	cmp	r3, #4
 8004908:	d109      	bne.n	800491e <HAL_TIM_PWM_Start_DMA+0xae>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b01      	cmp	r3, #1
 8004914:	bf0c      	ite	eq
 8004916:	2301      	moveq	r3, #1
 8004918:	2300      	movne	r3, #0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	e015      	b.n	800494a <HAL_TIM_PWM_Start_DMA+0xda>
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b08      	cmp	r3, #8
 8004922:	d109      	bne.n	8004938 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b01      	cmp	r3, #1
 800492e:	bf0c      	ite	eq
 8004930:	2301      	moveq	r3, #1
 8004932:	2300      	movne	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	e008      	b.n	800494a <HAL_TIM_PWM_Start_DMA+0xda>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b01      	cmp	r3, #1
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d024      	beq.n	8004998 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d104      	bne.n	800495e <HAL_TIM_PWM_Start_DMA+0xee>
 8004954:	887b      	ldrh	r3, [r7, #2]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e137      	b.n	8004bce <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d104      	bne.n	800496e <HAL_TIM_PWM_Start_DMA+0xfe>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800496c:	e016      	b.n	800499c <HAL_TIM_PWM_Start_DMA+0x12c>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b04      	cmp	r3, #4
 8004972:	d104      	bne.n	800497e <HAL_TIM_PWM_Start_DMA+0x10e>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800497c:	e00e      	b.n	800499c <HAL_TIM_PWM_Start_DMA+0x12c>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b08      	cmp	r3, #8
 8004982:	d104      	bne.n	800498e <HAL_TIM_PWM_Start_DMA+0x11e>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800498c:	e006      	b.n	800499c <HAL_TIM_PWM_Start_DMA+0x12c>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2202      	movs	r2, #2
 8004992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004996:	e001      	b.n	800499c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e118      	b.n	8004bce <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b0c      	cmp	r3, #12
 80049a0:	f200 80ae 	bhi.w	8004b00 <HAL_TIM_PWM_Start_DMA+0x290>
 80049a4:	a201      	add	r2, pc, #4	; (adr r2, 80049ac <HAL_TIM_PWM_Start_DMA+0x13c>)
 80049a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049aa:	bf00      	nop
 80049ac:	080049e1 	.word	0x080049e1
 80049b0:	08004b01 	.word	0x08004b01
 80049b4:	08004b01 	.word	0x08004b01
 80049b8:	08004b01 	.word	0x08004b01
 80049bc:	08004a29 	.word	0x08004a29
 80049c0:	08004b01 	.word	0x08004b01
 80049c4:	08004b01 	.word	0x08004b01
 80049c8:	08004b01 	.word	0x08004b01
 80049cc:	08004a71 	.word	0x08004a71
 80049d0:	08004b01 	.word	0x08004b01
 80049d4:	08004b01 	.word	0x08004b01
 80049d8:	08004b01 	.word	0x08004b01
 80049dc:	08004ab9 	.word	0x08004ab9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	4a7c      	ldr	r2, [pc, #496]	; (8004bd8 <HAL_TIM_PWM_Start_DMA+0x368>)
 80049e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	4a7b      	ldr	r2, [pc, #492]	; (8004bdc <HAL_TIM_PWM_Start_DMA+0x36c>)
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	4a7a      	ldr	r2, [pc, #488]	; (8004be0 <HAL_TIM_PWM_Start_DMA+0x370>)
 80049f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3334      	adds	r3, #52	; 0x34
 8004a04:	461a      	mov	r2, r3
 8004a06:	887b      	ldrh	r3, [r7, #2]
 8004a08:	f7fd ffe8 	bl	80029dc <HAL_DMA_Start_IT>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e0db      	b.n	8004bce <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a24:	60da      	str	r2, [r3, #12]
      break;
 8004a26:	e06e      	b.n	8004b06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2c:	4a6a      	ldr	r2, [pc, #424]	; (8004bd8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004a2e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	4a69      	ldr	r2, [pc, #420]	; (8004bdc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004a36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3c:	4a68      	ldr	r2, [pc, #416]	; (8004be0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004a3e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3338      	adds	r3, #56	; 0x38
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	887b      	ldrh	r3, [r7, #2]
 8004a50:	f7fd ffc4 	bl	80029dc <HAL_DMA_Start_IT>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e0b7      	b.n	8004bce <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a6c:	60da      	str	r2, [r3, #12]
      break;
 8004a6e:	e04a      	b.n	8004b06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	4a58      	ldr	r2, [pc, #352]	; (8004bd8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004a76:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	4a57      	ldr	r2, [pc, #348]	; (8004bdc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004a7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	4a56      	ldr	r2, [pc, #344]	; (8004be0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004a86:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	333c      	adds	r3, #60	; 0x3c
 8004a94:	461a      	mov	r2, r3
 8004a96:	887b      	ldrh	r3, [r7, #2]
 8004a98:	f7fd ffa0 	bl	80029dc <HAL_DMA_Start_IT>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e093      	b.n	8004bce <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ab4:	60da      	str	r2, [r3, #12]
      break;
 8004ab6:	e026      	b.n	8004b06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	4a46      	ldr	r2, [pc, #280]	; (8004bd8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004abe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	4a45      	ldr	r2, [pc, #276]	; (8004bdc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004ac6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	4a44      	ldr	r2, [pc, #272]	; (8004be0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004ace:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3340      	adds	r3, #64	; 0x40
 8004adc:	461a      	mov	r2, r3
 8004ade:	887b      	ldrh	r3, [r7, #2]
 8004ae0:	f7fd ff7c 	bl	80029dc <HAL_DMA_Start_IT>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e06f      	b.n	8004bce <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004afc:	60da      	str	r2, [r3, #12]
      break;
 8004afe:	e002      	b.n	8004b06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	75fb      	strb	r3, [r7, #23]
      break;
 8004b04:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b06:	7dfb      	ldrb	r3, [r7, #23]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d15f      	bne.n	8004bcc <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2201      	movs	r2, #1
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fc75 	bl	8005404 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a31      	ldr	r2, [pc, #196]	; (8004be4 <HAL_TIM_PWM_Start_DMA+0x374>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d004      	beq.n	8004b2e <HAL_TIM_PWM_Start_DMA+0x2be>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a2f      	ldr	r2, [pc, #188]	; (8004be8 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d101      	bne.n	8004b32 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004b32:	2300      	movs	r3, #0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d007      	beq.n	8004b48 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b46:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a25      	ldr	r2, [pc, #148]	; (8004be4 <HAL_TIM_PWM_Start_DMA+0x374>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d022      	beq.n	8004b98 <HAL_TIM_PWM_Start_DMA+0x328>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5a:	d01d      	beq.n	8004b98 <HAL_TIM_PWM_Start_DMA+0x328>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a22      	ldr	r2, [pc, #136]	; (8004bec <HAL_TIM_PWM_Start_DMA+0x37c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d018      	beq.n	8004b98 <HAL_TIM_PWM_Start_DMA+0x328>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a21      	ldr	r2, [pc, #132]	; (8004bf0 <HAL_TIM_PWM_Start_DMA+0x380>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <HAL_TIM_PWM_Start_DMA+0x328>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1f      	ldr	r2, [pc, #124]	; (8004bf4 <HAL_TIM_PWM_Start_DMA+0x384>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00e      	beq.n	8004b98 <HAL_TIM_PWM_Start_DMA+0x328>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1a      	ldr	r2, [pc, #104]	; (8004be8 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_TIM_PWM_Start_DMA+0x328>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1b      	ldr	r2, [pc, #108]	; (8004bf8 <HAL_TIM_PWM_Start_DMA+0x388>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <HAL_TIM_PWM_Start_DMA+0x328>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1a      	ldr	r2, [pc, #104]	; (8004bfc <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d111      	bne.n	8004bbc <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2b06      	cmp	r3, #6
 8004ba8:	d010      	beq.n	8004bcc <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0201 	orr.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bba:	e007      	b.n	8004bcc <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	08004e53 	.word	0x08004e53
 8004bdc:	08004efb 	.word	0x08004efb
 8004be0:	08004dc1 	.word	0x08004dc1
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40010400 	.word	0x40010400
 8004bec:	40000400 	.word	0x40000400
 8004bf0:	40000800 	.word	0x40000800
 8004bf4:	40000c00 	.word	0x40000c00
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40001800 	.word	0x40001800

08004c00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e0ae      	b.n	8004d7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b0c      	cmp	r3, #12
 8004c2a:	f200 809f 	bhi.w	8004d6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c2e:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c34:	08004c69 	.word	0x08004c69
 8004c38:	08004d6d 	.word	0x08004d6d
 8004c3c:	08004d6d 	.word	0x08004d6d
 8004c40:	08004d6d 	.word	0x08004d6d
 8004c44:	08004ca9 	.word	0x08004ca9
 8004c48:	08004d6d 	.word	0x08004d6d
 8004c4c:	08004d6d 	.word	0x08004d6d
 8004c50:	08004d6d 	.word	0x08004d6d
 8004c54:	08004ceb 	.word	0x08004ceb
 8004c58:	08004d6d 	.word	0x08004d6d
 8004c5c:	08004d6d 	.word	0x08004d6d
 8004c60:	08004d6d 	.word	0x08004d6d
 8004c64:	08004d2b 	.word	0x08004d2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fa18 	bl	80050a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0208 	orr.w	r2, r2, #8
 8004c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0204 	bic.w	r2, r2, #4
 8004c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6999      	ldr	r1, [r3, #24]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	619a      	str	r2, [r3, #24]
      break;
 8004ca6:	e064      	b.n	8004d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fa68 	bl	8005184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6999      	ldr	r1, [r3, #24]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	021a      	lsls	r2, r3, #8
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	619a      	str	r2, [r3, #24]
      break;
 8004ce8:	e043      	b.n	8004d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fabd 	bl	8005270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69da      	ldr	r2, [r3, #28]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0208 	orr.w	r2, r2, #8
 8004d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0204 	bic.w	r2, r2, #4
 8004d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69d9      	ldr	r1, [r3, #28]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	61da      	str	r2, [r3, #28]
      break;
 8004d28:	e023      	b.n	8004d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fb11 	bl	8005358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69d9      	ldr	r1, [r3, #28]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	021a      	lsls	r2, r3, #8
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	61da      	str	r2, [r3, #28]
      break;
 8004d6a:	e002      	b.n	8004d72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d107      	bne.n	8004de8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004de6:	e02a      	b.n	8004e3e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d107      	bne.n	8004e02 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2202      	movs	r2, #2
 8004df6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e00:	e01d      	b.n	8004e3e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d107      	bne.n	8004e1c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2204      	movs	r2, #4
 8004e10:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e1a:	e010      	b.n	8004e3e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d107      	bne.n	8004e36 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2208      	movs	r2, #8
 8004e2a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e34:	e003      	b.n	8004e3e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f7ff ffb4 	bl	8004dac <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	771a      	strb	r2, [r3, #28]
}
 8004e4a:	bf00      	nop
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d10b      	bne.n	8004e82 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d136      	bne.n	8004ee6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e80:	e031      	b.n	8004ee6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d10b      	bne.n	8004ea4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d125      	bne.n	8004ee6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea2:	e020      	b.n	8004ee6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d10b      	bne.n	8004ec6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d114      	bne.n	8004ee6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ec4:	e00f      	b.n	8004ee6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d10a      	bne.n	8004ee6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2208      	movs	r2, #8
 8004ed4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d103      	bne.n	8004ee6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f7ff ff4c 	bl	8004d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	771a      	strb	r2, [r3, #28]
}
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d103      	bne.n	8004f1a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2201      	movs	r2, #1
 8004f16:	771a      	strb	r2, [r3, #28]
 8004f18:	e019      	b.n	8004f4e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d103      	bne.n	8004f2c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2202      	movs	r2, #2
 8004f28:	771a      	strb	r2, [r3, #28]
 8004f2a:	e010      	b.n	8004f4e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d103      	bne.n	8004f3e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2204      	movs	r2, #4
 8004f3a:	771a      	strb	r2, [r3, #28]
 8004f3c:	e007      	b.n	8004f4e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d102      	bne.n	8004f4e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2208      	movs	r2, #8
 8004f4c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f7ff ff22 	bl	8004d98 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	771a      	strb	r2, [r3, #28]
}
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a40      	ldr	r2, [pc, #256]	; (8005078 <TIM_Base_SetConfig+0x114>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d013      	beq.n	8004fa4 <TIM_Base_SetConfig+0x40>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f82:	d00f      	beq.n	8004fa4 <TIM_Base_SetConfig+0x40>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a3d      	ldr	r2, [pc, #244]	; (800507c <TIM_Base_SetConfig+0x118>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d00b      	beq.n	8004fa4 <TIM_Base_SetConfig+0x40>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a3c      	ldr	r2, [pc, #240]	; (8005080 <TIM_Base_SetConfig+0x11c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d007      	beq.n	8004fa4 <TIM_Base_SetConfig+0x40>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a3b      	ldr	r2, [pc, #236]	; (8005084 <TIM_Base_SetConfig+0x120>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d003      	beq.n	8004fa4 <TIM_Base_SetConfig+0x40>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a3a      	ldr	r2, [pc, #232]	; (8005088 <TIM_Base_SetConfig+0x124>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d108      	bne.n	8004fb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2f      	ldr	r2, [pc, #188]	; (8005078 <TIM_Base_SetConfig+0x114>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d02b      	beq.n	8005016 <TIM_Base_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc4:	d027      	beq.n	8005016 <TIM_Base_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a2c      	ldr	r2, [pc, #176]	; (800507c <TIM_Base_SetConfig+0x118>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d023      	beq.n	8005016 <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a2b      	ldr	r2, [pc, #172]	; (8005080 <TIM_Base_SetConfig+0x11c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d01f      	beq.n	8005016 <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a2a      	ldr	r2, [pc, #168]	; (8005084 <TIM_Base_SetConfig+0x120>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d01b      	beq.n	8005016 <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a29      	ldr	r2, [pc, #164]	; (8005088 <TIM_Base_SetConfig+0x124>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d017      	beq.n	8005016 <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a28      	ldr	r2, [pc, #160]	; (800508c <TIM_Base_SetConfig+0x128>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d013      	beq.n	8005016 <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a27      	ldr	r2, [pc, #156]	; (8005090 <TIM_Base_SetConfig+0x12c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00f      	beq.n	8005016 <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a26      	ldr	r2, [pc, #152]	; (8005094 <TIM_Base_SetConfig+0x130>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00b      	beq.n	8005016 <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a25      	ldr	r2, [pc, #148]	; (8005098 <TIM_Base_SetConfig+0x134>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d007      	beq.n	8005016 <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a24      	ldr	r2, [pc, #144]	; (800509c <TIM_Base_SetConfig+0x138>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d003      	beq.n	8005016 <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a23      	ldr	r2, [pc, #140]	; (80050a0 <TIM_Base_SetConfig+0x13c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d108      	bne.n	8005028 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4313      	orrs	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a0a      	ldr	r2, [pc, #40]	; (8005078 <TIM_Base_SetConfig+0x114>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d003      	beq.n	800505c <TIM_Base_SetConfig+0xf8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a0c      	ldr	r2, [pc, #48]	; (8005088 <TIM_Base_SetConfig+0x124>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d103      	bne.n	8005064 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	615a      	str	r2, [r3, #20]
}
 800506a:	bf00      	nop
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40010000 	.word	0x40010000
 800507c:	40000400 	.word	0x40000400
 8005080:	40000800 	.word	0x40000800
 8005084:	40000c00 	.word	0x40000c00
 8005088:	40010400 	.word	0x40010400
 800508c:	40014000 	.word	0x40014000
 8005090:	40014400 	.word	0x40014400
 8005094:	40014800 	.word	0x40014800
 8005098:	40001800 	.word	0x40001800
 800509c:	40001c00 	.word	0x40001c00
 80050a0:	40002000 	.word	0x40002000

080050a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	f023 0201 	bic.w	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0303 	bic.w	r3, r3, #3
 80050da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f023 0302 	bic.w	r3, r3, #2
 80050ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a20      	ldr	r2, [pc, #128]	; (800517c <TIM_OC1_SetConfig+0xd8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d003      	beq.n	8005108 <TIM_OC1_SetConfig+0x64>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a1f      	ldr	r2, [pc, #124]	; (8005180 <TIM_OC1_SetConfig+0xdc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d10c      	bne.n	8005122 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f023 0308 	bic.w	r3, r3, #8
 800510e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f023 0304 	bic.w	r3, r3, #4
 8005120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a15      	ldr	r2, [pc, #84]	; (800517c <TIM_OC1_SetConfig+0xd8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d003      	beq.n	8005132 <TIM_OC1_SetConfig+0x8e>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a14      	ldr	r2, [pc, #80]	; (8005180 <TIM_OC1_SetConfig+0xdc>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d111      	bne.n	8005156 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4313      	orrs	r3, r2
 8005154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	621a      	str	r2, [r3, #32]
}
 8005170:	bf00      	nop
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	40010000 	.word	0x40010000
 8005180:	40010400 	.word	0x40010400

08005184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f023 0210 	bic.w	r2, r3, #16
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f023 0320 	bic.w	r3, r3, #32
 80051ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a22      	ldr	r2, [pc, #136]	; (8005268 <TIM_OC2_SetConfig+0xe4>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_OC2_SetConfig+0x68>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a21      	ldr	r2, [pc, #132]	; (800526c <TIM_OC2_SetConfig+0xe8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d10d      	bne.n	8005208 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005206:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a17      	ldr	r2, [pc, #92]	; (8005268 <TIM_OC2_SetConfig+0xe4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_OC2_SetConfig+0x94>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a16      	ldr	r2, [pc, #88]	; (800526c <TIM_OC2_SetConfig+0xe8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d113      	bne.n	8005240 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800521e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	621a      	str	r2, [r3, #32]
}
 800525a:	bf00      	nop
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40010000 	.word	0x40010000
 800526c:	40010400 	.word	0x40010400

08005270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0303 	bic.w	r3, r3, #3
 80052a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a21      	ldr	r2, [pc, #132]	; (8005350 <TIM_OC3_SetConfig+0xe0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d003      	beq.n	80052d6 <TIM_OC3_SetConfig+0x66>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a20      	ldr	r2, [pc, #128]	; (8005354 <TIM_OC3_SetConfig+0xe4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d10d      	bne.n	80052f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a16      	ldr	r2, [pc, #88]	; (8005350 <TIM_OC3_SetConfig+0xe0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d003      	beq.n	8005302 <TIM_OC3_SetConfig+0x92>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a15      	ldr	r2, [pc, #84]	; (8005354 <TIM_OC3_SetConfig+0xe4>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d113      	bne.n	800532a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4313      	orrs	r3, r2
 8005328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	621a      	str	r2, [r3, #32]
}
 8005344:	bf00      	nop
 8005346:	371c      	adds	r7, #28
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	40010000 	.word	0x40010000
 8005354:	40010400 	.word	0x40010400

08005358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800538e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	021b      	lsls	r3, r3, #8
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4313      	orrs	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	031b      	lsls	r3, r3, #12
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a12      	ldr	r2, [pc, #72]	; (80053fc <TIM_OC4_SetConfig+0xa4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d003      	beq.n	80053c0 <TIM_OC4_SetConfig+0x68>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a11      	ldr	r2, [pc, #68]	; (8005400 <TIM_OC4_SetConfig+0xa8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d109      	bne.n	80053d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	019b      	lsls	r3, r3, #6
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40010000 	.word	0x40010000
 8005400:	40010400 	.word	0x40010400

08005404 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f003 031f 	and.w	r3, r3, #31
 8005416:	2201      	movs	r2, #1
 8005418:	fa02 f303 	lsl.w	r3, r2, r3
 800541c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a1a      	ldr	r2, [r3, #32]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	43db      	mvns	r3, r3
 8005426:	401a      	ands	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a1a      	ldr	r2, [r3, #32]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f003 031f 	and.w	r3, r3, #31
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	fa01 f303 	lsl.w	r3, r1, r3
 800543c:	431a      	orrs	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	621a      	str	r2, [r3, #32]
}
 8005442:	bf00      	nop
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
	...

08005450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005464:	2302      	movs	r3, #2
 8005466:	e05a      	b.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a21      	ldr	r2, [pc, #132]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d022      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b4:	d01d      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1d      	ldr	r2, [pc, #116]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d018      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1b      	ldr	r2, [pc, #108]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d013      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1a      	ldr	r2, [pc, #104]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00e      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a18      	ldr	r2, [pc, #96]	; (800553c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d009      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a17      	ldr	r2, [pc, #92]	; (8005540 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d004      	beq.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a15      	ldr	r2, [pc, #84]	; (8005544 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d10c      	bne.n	800550c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	4313      	orrs	r3, r2
 8005502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40010000 	.word	0x40010000
 8005530:	40000400 	.word	0x40000400
 8005534:	40000800 	.word	0x40000800
 8005538:	40000c00 	.word	0x40000c00
 800553c:	40010400 	.word	0x40010400
 8005540:	40014000 	.word	0x40014000
 8005544:	40001800 	.word	0x40001800

08005548 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005560:	2302      	movs	r3, #2
 8005562:	e03d      	b.n	80055e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	4313      	orrs	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e03f      	b.n	800567e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fc fe22 	bl	800225c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2224      	movs	r2, #36	; 0x24
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800562e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f929 	bl	8005888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	695a      	ldr	r2, [r3, #20]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2220      	movs	r2, #32
 8005678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b08a      	sub	sp, #40	; 0x28
 800568a:	af02      	add	r7, sp, #8
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	603b      	str	r3, [r7, #0]
 8005692:	4613      	mov	r3, r2
 8005694:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005696:	2300      	movs	r3, #0
 8005698:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	d17c      	bne.n	80057a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <HAL_UART_Transmit+0x2c>
 80056ac:	88fb      	ldrh	r3, [r7, #6]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e075      	b.n	80057a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d101      	bne.n	80056c4 <HAL_UART_Transmit+0x3e>
 80056c0:	2302      	movs	r3, #2
 80056c2:	e06e      	b.n	80057a2 <HAL_UART_Transmit+0x11c>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2221      	movs	r2, #33	; 0x21
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056da:	f7fc ff8f 	bl	80025fc <HAL_GetTick>
 80056de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	88fa      	ldrh	r2, [r7, #6]
 80056e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	88fa      	ldrh	r2, [r7, #6]
 80056ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f4:	d108      	bne.n	8005708 <HAL_UART_Transmit+0x82>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d104      	bne.n	8005708 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80056fe:	2300      	movs	r3, #0
 8005700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	e003      	b.n	8005710 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800570c:	2300      	movs	r3, #0
 800570e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005718:	e02a      	b.n	8005770 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2200      	movs	r2, #0
 8005722:	2180      	movs	r1, #128	; 0x80
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 f840 	bl	80057aa <UART_WaitOnFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e036      	b.n	80057a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10b      	bne.n	8005752 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	461a      	mov	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005748:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	3302      	adds	r3, #2
 800574e:	61bb      	str	r3, [r7, #24]
 8005750:	e007      	b.n	8005762 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	781a      	ldrb	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	3301      	adds	r3, #1
 8005760:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1cf      	bne.n	800571a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2200      	movs	r2, #0
 8005782:	2140      	movs	r1, #64	; 0x40
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 f810 	bl	80057aa <UART_WaitOnFlagUntilTimeout>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e006      	b.n	80057a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2220      	movs	r2, #32
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	e000      	b.n	80057a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057a0:	2302      	movs	r3, #2
  }
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3720      	adds	r7, #32
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b090      	sub	sp, #64	; 0x40
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	603b      	str	r3, [r7, #0]
 80057b6:	4613      	mov	r3, r2
 80057b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ba:	e050      	b.n	800585e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c2:	d04c      	beq.n	800585e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d007      	beq.n	80057da <UART_WaitOnFlagUntilTimeout+0x30>
 80057ca:	f7fc ff17 	bl	80025fc <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d241      	bcs.n	800585e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	330c      	adds	r3, #12
 80057e0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	330c      	adds	r3, #12
 80057f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057fa:	637a      	str	r2, [r7, #52]	; 0x34
 80057fc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e5      	bne.n	80057da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3314      	adds	r3, #20
 8005814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	613b      	str	r3, [r7, #16]
   return(result);
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	63bb      	str	r3, [r7, #56]	; 0x38
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3314      	adds	r3, #20
 800582c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800582e:	623a      	str	r2, [r7, #32]
 8005830:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005832:	69f9      	ldr	r1, [r7, #28]
 8005834:	6a3a      	ldr	r2, [r7, #32]
 8005836:	e841 2300 	strex	r3, r2, [r1]
 800583a:	61bb      	str	r3, [r7, #24]
   return(result);
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1e5      	bne.n	800580e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2220      	movs	r2, #32
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e00f      	b.n	800587e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4013      	ands	r3, r2
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	429a      	cmp	r2, r3
 800586c:	bf0c      	ite	eq
 800586e:	2301      	moveq	r3, #1
 8005870:	2300      	movne	r3, #0
 8005872:	b2db      	uxtb	r3, r3
 8005874:	461a      	mov	r2, r3
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	429a      	cmp	r2, r3
 800587a:	d09f      	beq.n	80057bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3740      	adds	r7, #64	; 0x40
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800588c:	b0c0      	sub	sp, #256	; 0x100
 800588e:	af00      	add	r7, sp, #0
 8005890:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a4:	68d9      	ldr	r1, [r3, #12]
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	ea40 0301 	orr.w	r3, r0, r1
 80058b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	431a      	orrs	r2, r3
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058e0:	f021 010c 	bic.w	r1, r1, #12
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058ee:	430b      	orrs	r3, r1
 80058f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005902:	6999      	ldr	r1, [r3, #24]
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	ea40 0301 	orr.w	r3, r0, r1
 800590e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	4b8f      	ldr	r3, [pc, #572]	; (8005b54 <UART_SetConfig+0x2cc>)
 8005918:	429a      	cmp	r2, r3
 800591a:	d005      	beq.n	8005928 <UART_SetConfig+0xa0>
 800591c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4b8d      	ldr	r3, [pc, #564]	; (8005b58 <UART_SetConfig+0x2d0>)
 8005924:	429a      	cmp	r2, r3
 8005926:	d104      	bne.n	8005932 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005928:	f7fe f996 	bl	8003c58 <HAL_RCC_GetPCLK2Freq>
 800592c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005930:	e003      	b.n	800593a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005932:	f7fe f97d 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 8005936:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800593a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005944:	f040 810c 	bne.w	8005b60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800594c:	2200      	movs	r2, #0
 800594e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005952:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005956:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800595a:	4622      	mov	r2, r4
 800595c:	462b      	mov	r3, r5
 800595e:	1891      	adds	r1, r2, r2
 8005960:	65b9      	str	r1, [r7, #88]	; 0x58
 8005962:	415b      	adcs	r3, r3
 8005964:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005966:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800596a:	4621      	mov	r1, r4
 800596c:	eb12 0801 	adds.w	r8, r2, r1
 8005970:	4629      	mov	r1, r5
 8005972:	eb43 0901 	adc.w	r9, r3, r1
 8005976:	f04f 0200 	mov.w	r2, #0
 800597a:	f04f 0300 	mov.w	r3, #0
 800597e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800598a:	4690      	mov	r8, r2
 800598c:	4699      	mov	r9, r3
 800598e:	4623      	mov	r3, r4
 8005990:	eb18 0303 	adds.w	r3, r8, r3
 8005994:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005998:	462b      	mov	r3, r5
 800599a:	eb49 0303 	adc.w	r3, r9, r3
 800599e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80059b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059b6:	460b      	mov	r3, r1
 80059b8:	18db      	adds	r3, r3, r3
 80059ba:	653b      	str	r3, [r7, #80]	; 0x50
 80059bc:	4613      	mov	r3, r2
 80059be:	eb42 0303 	adc.w	r3, r2, r3
 80059c2:	657b      	str	r3, [r7, #84]	; 0x54
 80059c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80059c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80059cc:	f7fb f94c 	bl	8000c68 <__aeabi_uldivmod>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4b61      	ldr	r3, [pc, #388]	; (8005b5c <UART_SetConfig+0x2d4>)
 80059d6:	fba3 2302 	umull	r2, r3, r3, r2
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	011c      	lsls	r4, r3, #4
 80059de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80059ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80059f0:	4642      	mov	r2, r8
 80059f2:	464b      	mov	r3, r9
 80059f4:	1891      	adds	r1, r2, r2
 80059f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80059f8:	415b      	adcs	r3, r3
 80059fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a00:	4641      	mov	r1, r8
 8005a02:	eb12 0a01 	adds.w	sl, r2, r1
 8005a06:	4649      	mov	r1, r9
 8005a08:	eb43 0b01 	adc.w	fp, r3, r1
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a20:	4692      	mov	sl, r2
 8005a22:	469b      	mov	fp, r3
 8005a24:	4643      	mov	r3, r8
 8005a26:	eb1a 0303 	adds.w	r3, sl, r3
 8005a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a2e:	464b      	mov	r3, r9
 8005a30:	eb4b 0303 	adc.w	r3, fp, r3
 8005a34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	18db      	adds	r3, r3, r3
 8005a50:	643b      	str	r3, [r7, #64]	; 0x40
 8005a52:	4613      	mov	r3, r2
 8005a54:	eb42 0303 	adc.w	r3, r2, r3
 8005a58:	647b      	str	r3, [r7, #68]	; 0x44
 8005a5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a62:	f7fb f901 	bl	8000c68 <__aeabi_uldivmod>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	4b3b      	ldr	r3, [pc, #236]	; (8005b5c <UART_SetConfig+0x2d4>)
 8005a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	2264      	movs	r2, #100	; 0x64
 8005a76:	fb02 f303 	mul.w	r3, r2, r3
 8005a7a:	1acb      	subs	r3, r1, r3
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a82:	4b36      	ldr	r3, [pc, #216]	; (8005b5c <UART_SetConfig+0x2d4>)
 8005a84:	fba3 2302 	umull	r2, r3, r3, r2
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a90:	441c      	add	r4, r3
 8005a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005aa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005aa4:	4642      	mov	r2, r8
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	1891      	adds	r1, r2, r2
 8005aaa:	63b9      	str	r1, [r7, #56]	; 0x38
 8005aac:	415b      	adcs	r3, r3
 8005aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ab0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ab4:	4641      	mov	r1, r8
 8005ab6:	1851      	adds	r1, r2, r1
 8005ab8:	6339      	str	r1, [r7, #48]	; 0x30
 8005aba:	4649      	mov	r1, r9
 8005abc:	414b      	adcs	r3, r1
 8005abe:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005acc:	4659      	mov	r1, fp
 8005ace:	00cb      	lsls	r3, r1, #3
 8005ad0:	4651      	mov	r1, sl
 8005ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ad6:	4651      	mov	r1, sl
 8005ad8:	00ca      	lsls	r2, r1, #3
 8005ada:	4610      	mov	r0, r2
 8005adc:	4619      	mov	r1, r3
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4642      	mov	r2, r8
 8005ae2:	189b      	adds	r3, r3, r2
 8005ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ae8:	464b      	mov	r3, r9
 8005aea:	460a      	mov	r2, r1
 8005aec:	eb42 0303 	adc.w	r3, r2, r3
 8005af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b08:	460b      	mov	r3, r1
 8005b0a:	18db      	adds	r3, r3, r3
 8005b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b0e:	4613      	mov	r3, r2
 8005b10:	eb42 0303 	adc.w	r3, r2, r3
 8005b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b1e:	f7fb f8a3 	bl	8000c68 <__aeabi_uldivmod>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4b0d      	ldr	r3, [pc, #52]	; (8005b5c <UART_SetConfig+0x2d4>)
 8005b28:	fba3 1302 	umull	r1, r3, r3, r2
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	2164      	movs	r1, #100	; 0x64
 8005b30:	fb01 f303 	mul.w	r3, r1, r3
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	3332      	adds	r3, #50	; 0x32
 8005b3a:	4a08      	ldr	r2, [pc, #32]	; (8005b5c <UART_SetConfig+0x2d4>)
 8005b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b40:	095b      	lsrs	r3, r3, #5
 8005b42:	f003 0207 	and.w	r2, r3, #7
 8005b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4422      	add	r2, r4
 8005b4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b50:	e105      	b.n	8005d5e <UART_SetConfig+0x4d6>
 8005b52:	bf00      	nop
 8005b54:	40011000 	.word	0x40011000
 8005b58:	40011400 	.word	0x40011400
 8005b5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b64:	2200      	movs	r2, #0
 8005b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b72:	4642      	mov	r2, r8
 8005b74:	464b      	mov	r3, r9
 8005b76:	1891      	adds	r1, r2, r2
 8005b78:	6239      	str	r1, [r7, #32]
 8005b7a:	415b      	adcs	r3, r3
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b82:	4641      	mov	r1, r8
 8005b84:	1854      	adds	r4, r2, r1
 8005b86:	4649      	mov	r1, r9
 8005b88:	eb43 0501 	adc.w	r5, r3, r1
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	f04f 0300 	mov.w	r3, #0
 8005b94:	00eb      	lsls	r3, r5, #3
 8005b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b9a:	00e2      	lsls	r2, r4, #3
 8005b9c:	4614      	mov	r4, r2
 8005b9e:	461d      	mov	r5, r3
 8005ba0:	4643      	mov	r3, r8
 8005ba2:	18e3      	adds	r3, r4, r3
 8005ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ba8:	464b      	mov	r3, r9
 8005baa:	eb45 0303 	adc.w	r3, r5, r3
 8005bae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	f04f 0300 	mov.w	r3, #0
 8005bca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005bce:	4629      	mov	r1, r5
 8005bd0:	008b      	lsls	r3, r1, #2
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bd8:	4621      	mov	r1, r4
 8005bda:	008a      	lsls	r2, r1, #2
 8005bdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005be0:	f7fb f842 	bl	8000c68 <__aeabi_uldivmod>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4b60      	ldr	r3, [pc, #384]	; (8005d6c <UART_SetConfig+0x4e4>)
 8005bea:	fba3 2302 	umull	r2, r3, r3, r2
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	011c      	lsls	r4, r3, #4
 8005bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005bfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c04:	4642      	mov	r2, r8
 8005c06:	464b      	mov	r3, r9
 8005c08:	1891      	adds	r1, r2, r2
 8005c0a:	61b9      	str	r1, [r7, #24]
 8005c0c:	415b      	adcs	r3, r3
 8005c0e:	61fb      	str	r3, [r7, #28]
 8005c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c14:	4641      	mov	r1, r8
 8005c16:	1851      	adds	r1, r2, r1
 8005c18:	6139      	str	r1, [r7, #16]
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	414b      	adcs	r3, r1
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	f04f 0300 	mov.w	r3, #0
 8005c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c2c:	4659      	mov	r1, fp
 8005c2e:	00cb      	lsls	r3, r1, #3
 8005c30:	4651      	mov	r1, sl
 8005c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c36:	4651      	mov	r1, sl
 8005c38:	00ca      	lsls	r2, r1, #3
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4603      	mov	r3, r0
 8005c40:	4642      	mov	r2, r8
 8005c42:	189b      	adds	r3, r3, r2
 8005c44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c48:	464b      	mov	r3, r9
 8005c4a:	460a      	mov	r2, r1
 8005c4c:	eb42 0303 	adc.w	r3, r2, r3
 8005c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c60:	f04f 0200 	mov.w	r2, #0
 8005c64:	f04f 0300 	mov.w	r3, #0
 8005c68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	008b      	lsls	r3, r1, #2
 8005c70:	4641      	mov	r1, r8
 8005c72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c76:	4641      	mov	r1, r8
 8005c78:	008a      	lsls	r2, r1, #2
 8005c7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c7e:	f7fa fff3 	bl	8000c68 <__aeabi_uldivmod>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4b39      	ldr	r3, [pc, #228]	; (8005d6c <UART_SetConfig+0x4e4>)
 8005c88:	fba3 1302 	umull	r1, r3, r3, r2
 8005c8c:	095b      	lsrs	r3, r3, #5
 8005c8e:	2164      	movs	r1, #100	; 0x64
 8005c90:	fb01 f303 	mul.w	r3, r1, r3
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	3332      	adds	r3, #50	; 0x32
 8005c9a:	4a34      	ldr	r2, [pc, #208]	; (8005d6c <UART_SetConfig+0x4e4>)
 8005c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ca6:	441c      	add	r4, r3
 8005ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cac:	2200      	movs	r2, #0
 8005cae:	673b      	str	r3, [r7, #112]	; 0x70
 8005cb0:	677a      	str	r2, [r7, #116]	; 0x74
 8005cb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005cb6:	4642      	mov	r2, r8
 8005cb8:	464b      	mov	r3, r9
 8005cba:	1891      	adds	r1, r2, r2
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	415b      	adcs	r3, r3
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cc6:	4641      	mov	r1, r8
 8005cc8:	1851      	adds	r1, r2, r1
 8005cca:	6039      	str	r1, [r7, #0]
 8005ccc:	4649      	mov	r1, r9
 8005cce:	414b      	adcs	r3, r1
 8005cd0:	607b      	str	r3, [r7, #4]
 8005cd2:	f04f 0200 	mov.w	r2, #0
 8005cd6:	f04f 0300 	mov.w	r3, #0
 8005cda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cde:	4659      	mov	r1, fp
 8005ce0:	00cb      	lsls	r3, r1, #3
 8005ce2:	4651      	mov	r1, sl
 8005ce4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ce8:	4651      	mov	r1, sl
 8005cea:	00ca      	lsls	r2, r1, #3
 8005cec:	4610      	mov	r0, r2
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	4642      	mov	r2, r8
 8005cf4:	189b      	adds	r3, r3, r2
 8005cf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cf8:	464b      	mov	r3, r9
 8005cfa:	460a      	mov	r2, r1
 8005cfc:	eb42 0303 	adc.w	r3, r2, r3
 8005d00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	663b      	str	r3, [r7, #96]	; 0x60
 8005d0c:	667a      	str	r2, [r7, #100]	; 0x64
 8005d0e:	f04f 0200 	mov.w	r2, #0
 8005d12:	f04f 0300 	mov.w	r3, #0
 8005d16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	008b      	lsls	r3, r1, #2
 8005d1e:	4641      	mov	r1, r8
 8005d20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d24:	4641      	mov	r1, r8
 8005d26:	008a      	lsls	r2, r1, #2
 8005d28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d2c:	f7fa ff9c 	bl	8000c68 <__aeabi_uldivmod>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <UART_SetConfig+0x4e4>)
 8005d36:	fba3 1302 	umull	r1, r3, r3, r2
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	2164      	movs	r1, #100	; 0x64
 8005d3e:	fb01 f303 	mul.w	r3, r1, r3
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	011b      	lsls	r3, r3, #4
 8005d46:	3332      	adds	r3, #50	; 0x32
 8005d48:	4a08      	ldr	r2, [pc, #32]	; (8005d6c <UART_SetConfig+0x4e4>)
 8005d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4e:	095b      	lsrs	r3, r3, #5
 8005d50:	f003 020f 	and.w	r2, r3, #15
 8005d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4422      	add	r2, r4
 8005d5c:	609a      	str	r2, [r3, #8]
}
 8005d5e:	bf00      	nop
 8005d60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d64:	46bd      	mov	sp, r7
 8005d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d6a:	bf00      	nop
 8005d6c:	51eb851f 	.word	0x51eb851f

08005d70 <__errno>:
 8005d70:	4b01      	ldr	r3, [pc, #4]	; (8005d78 <__errno+0x8>)
 8005d72:	6818      	ldr	r0, [r3, #0]
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	20000010 	.word	0x20000010

08005d7c <__libc_init_array>:
 8005d7c:	b570      	push	{r4, r5, r6, lr}
 8005d7e:	4d0d      	ldr	r5, [pc, #52]	; (8005db4 <__libc_init_array+0x38>)
 8005d80:	4c0d      	ldr	r4, [pc, #52]	; (8005db8 <__libc_init_array+0x3c>)
 8005d82:	1b64      	subs	r4, r4, r5
 8005d84:	10a4      	asrs	r4, r4, #2
 8005d86:	2600      	movs	r6, #0
 8005d88:	42a6      	cmp	r6, r4
 8005d8a:	d109      	bne.n	8005da0 <__libc_init_array+0x24>
 8005d8c:	4d0b      	ldr	r5, [pc, #44]	; (8005dbc <__libc_init_array+0x40>)
 8005d8e:	4c0c      	ldr	r4, [pc, #48]	; (8005dc0 <__libc_init_array+0x44>)
 8005d90:	f002 fdc4 	bl	800891c <_init>
 8005d94:	1b64      	subs	r4, r4, r5
 8005d96:	10a4      	asrs	r4, r4, #2
 8005d98:	2600      	movs	r6, #0
 8005d9a:	42a6      	cmp	r6, r4
 8005d9c:	d105      	bne.n	8005daa <__libc_init_array+0x2e>
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}
 8005da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da4:	4798      	blx	r3
 8005da6:	3601      	adds	r6, #1
 8005da8:	e7ee      	b.n	8005d88 <__libc_init_array+0xc>
 8005daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dae:	4798      	blx	r3
 8005db0:	3601      	adds	r6, #1
 8005db2:	e7f2      	b.n	8005d9a <__libc_init_array+0x1e>
 8005db4:	08008ffc 	.word	0x08008ffc
 8005db8:	08008ffc 	.word	0x08008ffc
 8005dbc:	08008ffc 	.word	0x08008ffc
 8005dc0:	08009000 	.word	0x08009000

08005dc4 <memset>:
 8005dc4:	4402      	add	r2, r0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d100      	bne.n	8005dce <memset+0xa>
 8005dcc:	4770      	bx	lr
 8005dce:	f803 1b01 	strb.w	r1, [r3], #1
 8005dd2:	e7f9      	b.n	8005dc8 <memset+0x4>

08005dd4 <__cvt>:
 8005dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd8:	ec55 4b10 	vmov	r4, r5, d0
 8005ddc:	2d00      	cmp	r5, #0
 8005dde:	460e      	mov	r6, r1
 8005de0:	4619      	mov	r1, r3
 8005de2:	462b      	mov	r3, r5
 8005de4:	bfbb      	ittet	lt
 8005de6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005dea:	461d      	movlt	r5, r3
 8005dec:	2300      	movge	r3, #0
 8005dee:	232d      	movlt	r3, #45	; 0x2d
 8005df0:	700b      	strb	r3, [r1, #0]
 8005df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005df4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005df8:	4691      	mov	r9, r2
 8005dfa:	f023 0820 	bic.w	r8, r3, #32
 8005dfe:	bfbc      	itt	lt
 8005e00:	4622      	movlt	r2, r4
 8005e02:	4614      	movlt	r4, r2
 8005e04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e08:	d005      	beq.n	8005e16 <__cvt+0x42>
 8005e0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e0e:	d100      	bne.n	8005e12 <__cvt+0x3e>
 8005e10:	3601      	adds	r6, #1
 8005e12:	2102      	movs	r1, #2
 8005e14:	e000      	b.n	8005e18 <__cvt+0x44>
 8005e16:	2103      	movs	r1, #3
 8005e18:	ab03      	add	r3, sp, #12
 8005e1a:	9301      	str	r3, [sp, #4]
 8005e1c:	ab02      	add	r3, sp, #8
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	ec45 4b10 	vmov	d0, r4, r5
 8005e24:	4653      	mov	r3, sl
 8005e26:	4632      	mov	r2, r6
 8005e28:	f000 fe1a 	bl	8006a60 <_dtoa_r>
 8005e2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e30:	4607      	mov	r7, r0
 8005e32:	d102      	bne.n	8005e3a <__cvt+0x66>
 8005e34:	f019 0f01 	tst.w	r9, #1
 8005e38:	d022      	beq.n	8005e80 <__cvt+0xac>
 8005e3a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e3e:	eb07 0906 	add.w	r9, r7, r6
 8005e42:	d110      	bne.n	8005e66 <__cvt+0x92>
 8005e44:	783b      	ldrb	r3, [r7, #0]
 8005e46:	2b30      	cmp	r3, #48	; 0x30
 8005e48:	d10a      	bne.n	8005e60 <__cvt+0x8c>
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	4620      	mov	r0, r4
 8005e50:	4629      	mov	r1, r5
 8005e52:	f7fa fe49 	bl	8000ae8 <__aeabi_dcmpeq>
 8005e56:	b918      	cbnz	r0, 8005e60 <__cvt+0x8c>
 8005e58:	f1c6 0601 	rsb	r6, r6, #1
 8005e5c:	f8ca 6000 	str.w	r6, [sl]
 8005e60:	f8da 3000 	ldr.w	r3, [sl]
 8005e64:	4499      	add	r9, r3
 8005e66:	2200      	movs	r2, #0
 8005e68:	2300      	movs	r3, #0
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	f7fa fe3b 	bl	8000ae8 <__aeabi_dcmpeq>
 8005e72:	b108      	cbz	r0, 8005e78 <__cvt+0xa4>
 8005e74:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e78:	2230      	movs	r2, #48	; 0x30
 8005e7a:	9b03      	ldr	r3, [sp, #12]
 8005e7c:	454b      	cmp	r3, r9
 8005e7e:	d307      	bcc.n	8005e90 <__cvt+0xbc>
 8005e80:	9b03      	ldr	r3, [sp, #12]
 8005e82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e84:	1bdb      	subs	r3, r3, r7
 8005e86:	4638      	mov	r0, r7
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	b004      	add	sp, #16
 8005e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e90:	1c59      	adds	r1, r3, #1
 8005e92:	9103      	str	r1, [sp, #12]
 8005e94:	701a      	strb	r2, [r3, #0]
 8005e96:	e7f0      	b.n	8005e7a <__cvt+0xa6>

08005e98 <__exponent>:
 8005e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2900      	cmp	r1, #0
 8005e9e:	bfb8      	it	lt
 8005ea0:	4249      	neglt	r1, r1
 8005ea2:	f803 2b02 	strb.w	r2, [r3], #2
 8005ea6:	bfb4      	ite	lt
 8005ea8:	222d      	movlt	r2, #45	; 0x2d
 8005eaa:	222b      	movge	r2, #43	; 0x2b
 8005eac:	2909      	cmp	r1, #9
 8005eae:	7042      	strb	r2, [r0, #1]
 8005eb0:	dd2a      	ble.n	8005f08 <__exponent+0x70>
 8005eb2:	f10d 0407 	add.w	r4, sp, #7
 8005eb6:	46a4      	mov	ip, r4
 8005eb8:	270a      	movs	r7, #10
 8005eba:	46a6      	mov	lr, r4
 8005ebc:	460a      	mov	r2, r1
 8005ebe:	fb91 f6f7 	sdiv	r6, r1, r7
 8005ec2:	fb07 1516 	mls	r5, r7, r6, r1
 8005ec6:	3530      	adds	r5, #48	; 0x30
 8005ec8:	2a63      	cmp	r2, #99	; 0x63
 8005eca:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ece:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ed2:	4631      	mov	r1, r6
 8005ed4:	dcf1      	bgt.n	8005eba <__exponent+0x22>
 8005ed6:	3130      	adds	r1, #48	; 0x30
 8005ed8:	f1ae 0502 	sub.w	r5, lr, #2
 8005edc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005ee0:	1c44      	adds	r4, r0, #1
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	4561      	cmp	r1, ip
 8005ee6:	d30a      	bcc.n	8005efe <__exponent+0x66>
 8005ee8:	f10d 0209 	add.w	r2, sp, #9
 8005eec:	eba2 020e 	sub.w	r2, r2, lr
 8005ef0:	4565      	cmp	r5, ip
 8005ef2:	bf88      	it	hi
 8005ef4:	2200      	movhi	r2, #0
 8005ef6:	4413      	add	r3, r2
 8005ef8:	1a18      	subs	r0, r3, r0
 8005efa:	b003      	add	sp, #12
 8005efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f02:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f06:	e7ed      	b.n	8005ee4 <__exponent+0x4c>
 8005f08:	2330      	movs	r3, #48	; 0x30
 8005f0a:	3130      	adds	r1, #48	; 0x30
 8005f0c:	7083      	strb	r3, [r0, #2]
 8005f0e:	70c1      	strb	r1, [r0, #3]
 8005f10:	1d03      	adds	r3, r0, #4
 8005f12:	e7f1      	b.n	8005ef8 <__exponent+0x60>

08005f14 <_printf_float>:
 8005f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f18:	ed2d 8b02 	vpush	{d8}
 8005f1c:	b08d      	sub	sp, #52	; 0x34
 8005f1e:	460c      	mov	r4, r1
 8005f20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f24:	4616      	mov	r6, r2
 8005f26:	461f      	mov	r7, r3
 8005f28:	4605      	mov	r5, r0
 8005f2a:	f001 fd3f 	bl	80079ac <_localeconv_r>
 8005f2e:	f8d0 a000 	ldr.w	sl, [r0]
 8005f32:	4650      	mov	r0, sl
 8005f34:	f7fa f95c 	bl	80001f0 <strlen>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	9305      	str	r3, [sp, #20]
 8005f40:	f8d8 3000 	ldr.w	r3, [r8]
 8005f44:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005f48:	3307      	adds	r3, #7
 8005f4a:	f023 0307 	bic.w	r3, r3, #7
 8005f4e:	f103 0208 	add.w	r2, r3, #8
 8005f52:	f8c8 2000 	str.w	r2, [r8]
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005f5e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005f62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f66:	9307      	str	r3, [sp, #28]
 8005f68:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f6c:	ee08 0a10 	vmov	s16, r0
 8005f70:	4b9f      	ldr	r3, [pc, #636]	; (80061f0 <_printf_float+0x2dc>)
 8005f72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f76:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7a:	f7fa fde7 	bl	8000b4c <__aeabi_dcmpun>
 8005f7e:	bb88      	cbnz	r0, 8005fe4 <_printf_float+0xd0>
 8005f80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f84:	4b9a      	ldr	r3, [pc, #616]	; (80061f0 <_printf_float+0x2dc>)
 8005f86:	f04f 32ff 	mov.w	r2, #4294967295
 8005f8a:	f7fa fdc1 	bl	8000b10 <__aeabi_dcmple>
 8005f8e:	bb48      	cbnz	r0, 8005fe4 <_printf_float+0xd0>
 8005f90:	2200      	movs	r2, #0
 8005f92:	2300      	movs	r3, #0
 8005f94:	4640      	mov	r0, r8
 8005f96:	4649      	mov	r1, r9
 8005f98:	f7fa fdb0 	bl	8000afc <__aeabi_dcmplt>
 8005f9c:	b110      	cbz	r0, 8005fa4 <_printf_float+0x90>
 8005f9e:	232d      	movs	r3, #45	; 0x2d
 8005fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fa4:	4b93      	ldr	r3, [pc, #588]	; (80061f4 <_printf_float+0x2e0>)
 8005fa6:	4894      	ldr	r0, [pc, #592]	; (80061f8 <_printf_float+0x2e4>)
 8005fa8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005fac:	bf94      	ite	ls
 8005fae:	4698      	movls	r8, r3
 8005fb0:	4680      	movhi	r8, r0
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	6123      	str	r3, [r4, #16]
 8005fb6:	9b05      	ldr	r3, [sp, #20]
 8005fb8:	f023 0204 	bic.w	r2, r3, #4
 8005fbc:	6022      	str	r2, [r4, #0]
 8005fbe:	f04f 0900 	mov.w	r9, #0
 8005fc2:	9700      	str	r7, [sp, #0]
 8005fc4:	4633      	mov	r3, r6
 8005fc6:	aa0b      	add	r2, sp, #44	; 0x2c
 8005fc8:	4621      	mov	r1, r4
 8005fca:	4628      	mov	r0, r5
 8005fcc:	f000 f9d8 	bl	8006380 <_printf_common>
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	f040 8090 	bne.w	80060f6 <_printf_float+0x1e2>
 8005fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fda:	b00d      	add	sp, #52	; 0x34
 8005fdc:	ecbd 8b02 	vpop	{d8}
 8005fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe4:	4642      	mov	r2, r8
 8005fe6:	464b      	mov	r3, r9
 8005fe8:	4640      	mov	r0, r8
 8005fea:	4649      	mov	r1, r9
 8005fec:	f7fa fdae 	bl	8000b4c <__aeabi_dcmpun>
 8005ff0:	b140      	cbz	r0, 8006004 <_printf_float+0xf0>
 8005ff2:	464b      	mov	r3, r9
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	bfbc      	itt	lt
 8005ff8:	232d      	movlt	r3, #45	; 0x2d
 8005ffa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ffe:	487f      	ldr	r0, [pc, #508]	; (80061fc <_printf_float+0x2e8>)
 8006000:	4b7f      	ldr	r3, [pc, #508]	; (8006200 <_printf_float+0x2ec>)
 8006002:	e7d1      	b.n	8005fa8 <_printf_float+0x94>
 8006004:	6863      	ldr	r3, [r4, #4]
 8006006:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800600a:	9206      	str	r2, [sp, #24]
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	d13f      	bne.n	8006090 <_printf_float+0x17c>
 8006010:	2306      	movs	r3, #6
 8006012:	6063      	str	r3, [r4, #4]
 8006014:	9b05      	ldr	r3, [sp, #20]
 8006016:	6861      	ldr	r1, [r4, #4]
 8006018:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800601c:	2300      	movs	r3, #0
 800601e:	9303      	str	r3, [sp, #12]
 8006020:	ab0a      	add	r3, sp, #40	; 0x28
 8006022:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006026:	ab09      	add	r3, sp, #36	; 0x24
 8006028:	ec49 8b10 	vmov	d0, r8, r9
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	6022      	str	r2, [r4, #0]
 8006030:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006034:	4628      	mov	r0, r5
 8006036:	f7ff fecd 	bl	8005dd4 <__cvt>
 800603a:	9b06      	ldr	r3, [sp, #24]
 800603c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800603e:	2b47      	cmp	r3, #71	; 0x47
 8006040:	4680      	mov	r8, r0
 8006042:	d108      	bne.n	8006056 <_printf_float+0x142>
 8006044:	1cc8      	adds	r0, r1, #3
 8006046:	db02      	blt.n	800604e <_printf_float+0x13a>
 8006048:	6863      	ldr	r3, [r4, #4]
 800604a:	4299      	cmp	r1, r3
 800604c:	dd41      	ble.n	80060d2 <_printf_float+0x1be>
 800604e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006052:	fa5f fb8b 	uxtb.w	fp, fp
 8006056:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800605a:	d820      	bhi.n	800609e <_printf_float+0x18a>
 800605c:	3901      	subs	r1, #1
 800605e:	465a      	mov	r2, fp
 8006060:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006064:	9109      	str	r1, [sp, #36]	; 0x24
 8006066:	f7ff ff17 	bl	8005e98 <__exponent>
 800606a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800606c:	1813      	adds	r3, r2, r0
 800606e:	2a01      	cmp	r2, #1
 8006070:	4681      	mov	r9, r0
 8006072:	6123      	str	r3, [r4, #16]
 8006074:	dc02      	bgt.n	800607c <_printf_float+0x168>
 8006076:	6822      	ldr	r2, [r4, #0]
 8006078:	07d2      	lsls	r2, r2, #31
 800607a:	d501      	bpl.n	8006080 <_printf_float+0x16c>
 800607c:	3301      	adds	r3, #1
 800607e:	6123      	str	r3, [r4, #16]
 8006080:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006084:	2b00      	cmp	r3, #0
 8006086:	d09c      	beq.n	8005fc2 <_printf_float+0xae>
 8006088:	232d      	movs	r3, #45	; 0x2d
 800608a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800608e:	e798      	b.n	8005fc2 <_printf_float+0xae>
 8006090:	9a06      	ldr	r2, [sp, #24]
 8006092:	2a47      	cmp	r2, #71	; 0x47
 8006094:	d1be      	bne.n	8006014 <_printf_float+0x100>
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1bc      	bne.n	8006014 <_printf_float+0x100>
 800609a:	2301      	movs	r3, #1
 800609c:	e7b9      	b.n	8006012 <_printf_float+0xfe>
 800609e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80060a2:	d118      	bne.n	80060d6 <_printf_float+0x1c2>
 80060a4:	2900      	cmp	r1, #0
 80060a6:	6863      	ldr	r3, [r4, #4]
 80060a8:	dd0b      	ble.n	80060c2 <_printf_float+0x1ae>
 80060aa:	6121      	str	r1, [r4, #16]
 80060ac:	b913      	cbnz	r3, 80060b4 <_printf_float+0x1a0>
 80060ae:	6822      	ldr	r2, [r4, #0]
 80060b0:	07d0      	lsls	r0, r2, #31
 80060b2:	d502      	bpl.n	80060ba <_printf_float+0x1a6>
 80060b4:	3301      	adds	r3, #1
 80060b6:	440b      	add	r3, r1
 80060b8:	6123      	str	r3, [r4, #16]
 80060ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80060bc:	f04f 0900 	mov.w	r9, #0
 80060c0:	e7de      	b.n	8006080 <_printf_float+0x16c>
 80060c2:	b913      	cbnz	r3, 80060ca <_printf_float+0x1b6>
 80060c4:	6822      	ldr	r2, [r4, #0]
 80060c6:	07d2      	lsls	r2, r2, #31
 80060c8:	d501      	bpl.n	80060ce <_printf_float+0x1ba>
 80060ca:	3302      	adds	r3, #2
 80060cc:	e7f4      	b.n	80060b8 <_printf_float+0x1a4>
 80060ce:	2301      	movs	r3, #1
 80060d0:	e7f2      	b.n	80060b8 <_printf_float+0x1a4>
 80060d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80060d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060d8:	4299      	cmp	r1, r3
 80060da:	db05      	blt.n	80060e8 <_printf_float+0x1d4>
 80060dc:	6823      	ldr	r3, [r4, #0]
 80060de:	6121      	str	r1, [r4, #16]
 80060e0:	07d8      	lsls	r0, r3, #31
 80060e2:	d5ea      	bpl.n	80060ba <_printf_float+0x1a6>
 80060e4:	1c4b      	adds	r3, r1, #1
 80060e6:	e7e7      	b.n	80060b8 <_printf_float+0x1a4>
 80060e8:	2900      	cmp	r1, #0
 80060ea:	bfd4      	ite	le
 80060ec:	f1c1 0202 	rsble	r2, r1, #2
 80060f0:	2201      	movgt	r2, #1
 80060f2:	4413      	add	r3, r2
 80060f4:	e7e0      	b.n	80060b8 <_printf_float+0x1a4>
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	055a      	lsls	r2, r3, #21
 80060fa:	d407      	bmi.n	800610c <_printf_float+0x1f8>
 80060fc:	6923      	ldr	r3, [r4, #16]
 80060fe:	4642      	mov	r2, r8
 8006100:	4631      	mov	r1, r6
 8006102:	4628      	mov	r0, r5
 8006104:	47b8      	blx	r7
 8006106:	3001      	adds	r0, #1
 8006108:	d12c      	bne.n	8006164 <_printf_float+0x250>
 800610a:	e764      	b.n	8005fd6 <_printf_float+0xc2>
 800610c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006110:	f240 80e0 	bls.w	80062d4 <_printf_float+0x3c0>
 8006114:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006118:	2200      	movs	r2, #0
 800611a:	2300      	movs	r3, #0
 800611c:	f7fa fce4 	bl	8000ae8 <__aeabi_dcmpeq>
 8006120:	2800      	cmp	r0, #0
 8006122:	d034      	beq.n	800618e <_printf_float+0x27a>
 8006124:	4a37      	ldr	r2, [pc, #220]	; (8006204 <_printf_float+0x2f0>)
 8006126:	2301      	movs	r3, #1
 8006128:	4631      	mov	r1, r6
 800612a:	4628      	mov	r0, r5
 800612c:	47b8      	blx	r7
 800612e:	3001      	adds	r0, #1
 8006130:	f43f af51 	beq.w	8005fd6 <_printf_float+0xc2>
 8006134:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006138:	429a      	cmp	r2, r3
 800613a:	db02      	blt.n	8006142 <_printf_float+0x22e>
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	07d8      	lsls	r0, r3, #31
 8006140:	d510      	bpl.n	8006164 <_printf_float+0x250>
 8006142:	ee18 3a10 	vmov	r3, s16
 8006146:	4652      	mov	r2, sl
 8006148:	4631      	mov	r1, r6
 800614a:	4628      	mov	r0, r5
 800614c:	47b8      	blx	r7
 800614e:	3001      	adds	r0, #1
 8006150:	f43f af41 	beq.w	8005fd6 <_printf_float+0xc2>
 8006154:	f04f 0800 	mov.w	r8, #0
 8006158:	f104 091a 	add.w	r9, r4, #26
 800615c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800615e:	3b01      	subs	r3, #1
 8006160:	4543      	cmp	r3, r8
 8006162:	dc09      	bgt.n	8006178 <_printf_float+0x264>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	079b      	lsls	r3, r3, #30
 8006168:	f100 8105 	bmi.w	8006376 <_printf_float+0x462>
 800616c:	68e0      	ldr	r0, [r4, #12]
 800616e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006170:	4298      	cmp	r0, r3
 8006172:	bfb8      	it	lt
 8006174:	4618      	movlt	r0, r3
 8006176:	e730      	b.n	8005fda <_printf_float+0xc6>
 8006178:	2301      	movs	r3, #1
 800617a:	464a      	mov	r2, r9
 800617c:	4631      	mov	r1, r6
 800617e:	4628      	mov	r0, r5
 8006180:	47b8      	blx	r7
 8006182:	3001      	adds	r0, #1
 8006184:	f43f af27 	beq.w	8005fd6 <_printf_float+0xc2>
 8006188:	f108 0801 	add.w	r8, r8, #1
 800618c:	e7e6      	b.n	800615c <_printf_float+0x248>
 800618e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006190:	2b00      	cmp	r3, #0
 8006192:	dc39      	bgt.n	8006208 <_printf_float+0x2f4>
 8006194:	4a1b      	ldr	r2, [pc, #108]	; (8006204 <_printf_float+0x2f0>)
 8006196:	2301      	movs	r3, #1
 8006198:	4631      	mov	r1, r6
 800619a:	4628      	mov	r0, r5
 800619c:	47b8      	blx	r7
 800619e:	3001      	adds	r0, #1
 80061a0:	f43f af19 	beq.w	8005fd6 <_printf_float+0xc2>
 80061a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061a8:	4313      	orrs	r3, r2
 80061aa:	d102      	bne.n	80061b2 <_printf_float+0x29e>
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	07d9      	lsls	r1, r3, #31
 80061b0:	d5d8      	bpl.n	8006164 <_printf_float+0x250>
 80061b2:	ee18 3a10 	vmov	r3, s16
 80061b6:	4652      	mov	r2, sl
 80061b8:	4631      	mov	r1, r6
 80061ba:	4628      	mov	r0, r5
 80061bc:	47b8      	blx	r7
 80061be:	3001      	adds	r0, #1
 80061c0:	f43f af09 	beq.w	8005fd6 <_printf_float+0xc2>
 80061c4:	f04f 0900 	mov.w	r9, #0
 80061c8:	f104 0a1a 	add.w	sl, r4, #26
 80061cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ce:	425b      	negs	r3, r3
 80061d0:	454b      	cmp	r3, r9
 80061d2:	dc01      	bgt.n	80061d8 <_printf_float+0x2c4>
 80061d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d6:	e792      	b.n	80060fe <_printf_float+0x1ea>
 80061d8:	2301      	movs	r3, #1
 80061da:	4652      	mov	r2, sl
 80061dc:	4631      	mov	r1, r6
 80061de:	4628      	mov	r0, r5
 80061e0:	47b8      	blx	r7
 80061e2:	3001      	adds	r0, #1
 80061e4:	f43f aef7 	beq.w	8005fd6 <_printf_float+0xc2>
 80061e8:	f109 0901 	add.w	r9, r9, #1
 80061ec:	e7ee      	b.n	80061cc <_printf_float+0x2b8>
 80061ee:	bf00      	nop
 80061f0:	7fefffff 	.word	0x7fefffff
 80061f4:	08008c1c 	.word	0x08008c1c
 80061f8:	08008c20 	.word	0x08008c20
 80061fc:	08008c28 	.word	0x08008c28
 8006200:	08008c24 	.word	0x08008c24
 8006204:	08008c2c 	.word	0x08008c2c
 8006208:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800620a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800620c:	429a      	cmp	r2, r3
 800620e:	bfa8      	it	ge
 8006210:	461a      	movge	r2, r3
 8006212:	2a00      	cmp	r2, #0
 8006214:	4691      	mov	r9, r2
 8006216:	dc37      	bgt.n	8006288 <_printf_float+0x374>
 8006218:	f04f 0b00 	mov.w	fp, #0
 800621c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006220:	f104 021a 	add.w	r2, r4, #26
 8006224:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006226:	9305      	str	r3, [sp, #20]
 8006228:	eba3 0309 	sub.w	r3, r3, r9
 800622c:	455b      	cmp	r3, fp
 800622e:	dc33      	bgt.n	8006298 <_printf_float+0x384>
 8006230:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006234:	429a      	cmp	r2, r3
 8006236:	db3b      	blt.n	80062b0 <_printf_float+0x39c>
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	07da      	lsls	r2, r3, #31
 800623c:	d438      	bmi.n	80062b0 <_printf_float+0x39c>
 800623e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006240:	9a05      	ldr	r2, [sp, #20]
 8006242:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006244:	1a9a      	subs	r2, r3, r2
 8006246:	eba3 0901 	sub.w	r9, r3, r1
 800624a:	4591      	cmp	r9, r2
 800624c:	bfa8      	it	ge
 800624e:	4691      	movge	r9, r2
 8006250:	f1b9 0f00 	cmp.w	r9, #0
 8006254:	dc35      	bgt.n	80062c2 <_printf_float+0x3ae>
 8006256:	f04f 0800 	mov.w	r8, #0
 800625a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800625e:	f104 0a1a 	add.w	sl, r4, #26
 8006262:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006266:	1a9b      	subs	r3, r3, r2
 8006268:	eba3 0309 	sub.w	r3, r3, r9
 800626c:	4543      	cmp	r3, r8
 800626e:	f77f af79 	ble.w	8006164 <_printf_float+0x250>
 8006272:	2301      	movs	r3, #1
 8006274:	4652      	mov	r2, sl
 8006276:	4631      	mov	r1, r6
 8006278:	4628      	mov	r0, r5
 800627a:	47b8      	blx	r7
 800627c:	3001      	adds	r0, #1
 800627e:	f43f aeaa 	beq.w	8005fd6 <_printf_float+0xc2>
 8006282:	f108 0801 	add.w	r8, r8, #1
 8006286:	e7ec      	b.n	8006262 <_printf_float+0x34e>
 8006288:	4613      	mov	r3, r2
 800628a:	4631      	mov	r1, r6
 800628c:	4642      	mov	r2, r8
 800628e:	4628      	mov	r0, r5
 8006290:	47b8      	blx	r7
 8006292:	3001      	adds	r0, #1
 8006294:	d1c0      	bne.n	8006218 <_printf_float+0x304>
 8006296:	e69e      	b.n	8005fd6 <_printf_float+0xc2>
 8006298:	2301      	movs	r3, #1
 800629a:	4631      	mov	r1, r6
 800629c:	4628      	mov	r0, r5
 800629e:	9205      	str	r2, [sp, #20]
 80062a0:	47b8      	blx	r7
 80062a2:	3001      	adds	r0, #1
 80062a4:	f43f ae97 	beq.w	8005fd6 <_printf_float+0xc2>
 80062a8:	9a05      	ldr	r2, [sp, #20]
 80062aa:	f10b 0b01 	add.w	fp, fp, #1
 80062ae:	e7b9      	b.n	8006224 <_printf_float+0x310>
 80062b0:	ee18 3a10 	vmov	r3, s16
 80062b4:	4652      	mov	r2, sl
 80062b6:	4631      	mov	r1, r6
 80062b8:	4628      	mov	r0, r5
 80062ba:	47b8      	blx	r7
 80062bc:	3001      	adds	r0, #1
 80062be:	d1be      	bne.n	800623e <_printf_float+0x32a>
 80062c0:	e689      	b.n	8005fd6 <_printf_float+0xc2>
 80062c2:	9a05      	ldr	r2, [sp, #20]
 80062c4:	464b      	mov	r3, r9
 80062c6:	4442      	add	r2, r8
 80062c8:	4631      	mov	r1, r6
 80062ca:	4628      	mov	r0, r5
 80062cc:	47b8      	blx	r7
 80062ce:	3001      	adds	r0, #1
 80062d0:	d1c1      	bne.n	8006256 <_printf_float+0x342>
 80062d2:	e680      	b.n	8005fd6 <_printf_float+0xc2>
 80062d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062d6:	2a01      	cmp	r2, #1
 80062d8:	dc01      	bgt.n	80062de <_printf_float+0x3ca>
 80062da:	07db      	lsls	r3, r3, #31
 80062dc:	d538      	bpl.n	8006350 <_printf_float+0x43c>
 80062de:	2301      	movs	r3, #1
 80062e0:	4642      	mov	r2, r8
 80062e2:	4631      	mov	r1, r6
 80062e4:	4628      	mov	r0, r5
 80062e6:	47b8      	blx	r7
 80062e8:	3001      	adds	r0, #1
 80062ea:	f43f ae74 	beq.w	8005fd6 <_printf_float+0xc2>
 80062ee:	ee18 3a10 	vmov	r3, s16
 80062f2:	4652      	mov	r2, sl
 80062f4:	4631      	mov	r1, r6
 80062f6:	4628      	mov	r0, r5
 80062f8:	47b8      	blx	r7
 80062fa:	3001      	adds	r0, #1
 80062fc:	f43f ae6b 	beq.w	8005fd6 <_printf_float+0xc2>
 8006300:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006304:	2200      	movs	r2, #0
 8006306:	2300      	movs	r3, #0
 8006308:	f7fa fbee 	bl	8000ae8 <__aeabi_dcmpeq>
 800630c:	b9d8      	cbnz	r0, 8006346 <_printf_float+0x432>
 800630e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006310:	f108 0201 	add.w	r2, r8, #1
 8006314:	3b01      	subs	r3, #1
 8006316:	4631      	mov	r1, r6
 8006318:	4628      	mov	r0, r5
 800631a:	47b8      	blx	r7
 800631c:	3001      	adds	r0, #1
 800631e:	d10e      	bne.n	800633e <_printf_float+0x42a>
 8006320:	e659      	b.n	8005fd6 <_printf_float+0xc2>
 8006322:	2301      	movs	r3, #1
 8006324:	4652      	mov	r2, sl
 8006326:	4631      	mov	r1, r6
 8006328:	4628      	mov	r0, r5
 800632a:	47b8      	blx	r7
 800632c:	3001      	adds	r0, #1
 800632e:	f43f ae52 	beq.w	8005fd6 <_printf_float+0xc2>
 8006332:	f108 0801 	add.w	r8, r8, #1
 8006336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006338:	3b01      	subs	r3, #1
 800633a:	4543      	cmp	r3, r8
 800633c:	dcf1      	bgt.n	8006322 <_printf_float+0x40e>
 800633e:	464b      	mov	r3, r9
 8006340:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006344:	e6dc      	b.n	8006100 <_printf_float+0x1ec>
 8006346:	f04f 0800 	mov.w	r8, #0
 800634a:	f104 0a1a 	add.w	sl, r4, #26
 800634e:	e7f2      	b.n	8006336 <_printf_float+0x422>
 8006350:	2301      	movs	r3, #1
 8006352:	4642      	mov	r2, r8
 8006354:	e7df      	b.n	8006316 <_printf_float+0x402>
 8006356:	2301      	movs	r3, #1
 8006358:	464a      	mov	r2, r9
 800635a:	4631      	mov	r1, r6
 800635c:	4628      	mov	r0, r5
 800635e:	47b8      	blx	r7
 8006360:	3001      	adds	r0, #1
 8006362:	f43f ae38 	beq.w	8005fd6 <_printf_float+0xc2>
 8006366:	f108 0801 	add.w	r8, r8, #1
 800636a:	68e3      	ldr	r3, [r4, #12]
 800636c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800636e:	1a5b      	subs	r3, r3, r1
 8006370:	4543      	cmp	r3, r8
 8006372:	dcf0      	bgt.n	8006356 <_printf_float+0x442>
 8006374:	e6fa      	b.n	800616c <_printf_float+0x258>
 8006376:	f04f 0800 	mov.w	r8, #0
 800637a:	f104 0919 	add.w	r9, r4, #25
 800637e:	e7f4      	b.n	800636a <_printf_float+0x456>

08006380 <_printf_common>:
 8006380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006384:	4616      	mov	r6, r2
 8006386:	4699      	mov	r9, r3
 8006388:	688a      	ldr	r2, [r1, #8]
 800638a:	690b      	ldr	r3, [r1, #16]
 800638c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006390:	4293      	cmp	r3, r2
 8006392:	bfb8      	it	lt
 8006394:	4613      	movlt	r3, r2
 8006396:	6033      	str	r3, [r6, #0]
 8006398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800639c:	4607      	mov	r7, r0
 800639e:	460c      	mov	r4, r1
 80063a0:	b10a      	cbz	r2, 80063a6 <_printf_common+0x26>
 80063a2:	3301      	adds	r3, #1
 80063a4:	6033      	str	r3, [r6, #0]
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	0699      	lsls	r1, r3, #26
 80063aa:	bf42      	ittt	mi
 80063ac:	6833      	ldrmi	r3, [r6, #0]
 80063ae:	3302      	addmi	r3, #2
 80063b0:	6033      	strmi	r3, [r6, #0]
 80063b2:	6825      	ldr	r5, [r4, #0]
 80063b4:	f015 0506 	ands.w	r5, r5, #6
 80063b8:	d106      	bne.n	80063c8 <_printf_common+0x48>
 80063ba:	f104 0a19 	add.w	sl, r4, #25
 80063be:	68e3      	ldr	r3, [r4, #12]
 80063c0:	6832      	ldr	r2, [r6, #0]
 80063c2:	1a9b      	subs	r3, r3, r2
 80063c4:	42ab      	cmp	r3, r5
 80063c6:	dc26      	bgt.n	8006416 <_printf_common+0x96>
 80063c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063cc:	1e13      	subs	r3, r2, #0
 80063ce:	6822      	ldr	r2, [r4, #0]
 80063d0:	bf18      	it	ne
 80063d2:	2301      	movne	r3, #1
 80063d4:	0692      	lsls	r2, r2, #26
 80063d6:	d42b      	bmi.n	8006430 <_printf_common+0xb0>
 80063d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063dc:	4649      	mov	r1, r9
 80063de:	4638      	mov	r0, r7
 80063e0:	47c0      	blx	r8
 80063e2:	3001      	adds	r0, #1
 80063e4:	d01e      	beq.n	8006424 <_printf_common+0xa4>
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	68e5      	ldr	r5, [r4, #12]
 80063ea:	6832      	ldr	r2, [r6, #0]
 80063ec:	f003 0306 	and.w	r3, r3, #6
 80063f0:	2b04      	cmp	r3, #4
 80063f2:	bf08      	it	eq
 80063f4:	1aad      	subeq	r5, r5, r2
 80063f6:	68a3      	ldr	r3, [r4, #8]
 80063f8:	6922      	ldr	r2, [r4, #16]
 80063fa:	bf0c      	ite	eq
 80063fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006400:	2500      	movne	r5, #0
 8006402:	4293      	cmp	r3, r2
 8006404:	bfc4      	itt	gt
 8006406:	1a9b      	subgt	r3, r3, r2
 8006408:	18ed      	addgt	r5, r5, r3
 800640a:	2600      	movs	r6, #0
 800640c:	341a      	adds	r4, #26
 800640e:	42b5      	cmp	r5, r6
 8006410:	d11a      	bne.n	8006448 <_printf_common+0xc8>
 8006412:	2000      	movs	r0, #0
 8006414:	e008      	b.n	8006428 <_printf_common+0xa8>
 8006416:	2301      	movs	r3, #1
 8006418:	4652      	mov	r2, sl
 800641a:	4649      	mov	r1, r9
 800641c:	4638      	mov	r0, r7
 800641e:	47c0      	blx	r8
 8006420:	3001      	adds	r0, #1
 8006422:	d103      	bne.n	800642c <_printf_common+0xac>
 8006424:	f04f 30ff 	mov.w	r0, #4294967295
 8006428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800642c:	3501      	adds	r5, #1
 800642e:	e7c6      	b.n	80063be <_printf_common+0x3e>
 8006430:	18e1      	adds	r1, r4, r3
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	2030      	movs	r0, #48	; 0x30
 8006436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800643a:	4422      	add	r2, r4
 800643c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006444:	3302      	adds	r3, #2
 8006446:	e7c7      	b.n	80063d8 <_printf_common+0x58>
 8006448:	2301      	movs	r3, #1
 800644a:	4622      	mov	r2, r4
 800644c:	4649      	mov	r1, r9
 800644e:	4638      	mov	r0, r7
 8006450:	47c0      	blx	r8
 8006452:	3001      	adds	r0, #1
 8006454:	d0e6      	beq.n	8006424 <_printf_common+0xa4>
 8006456:	3601      	adds	r6, #1
 8006458:	e7d9      	b.n	800640e <_printf_common+0x8e>
	...

0800645c <_printf_i>:
 800645c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006460:	7e0f      	ldrb	r7, [r1, #24]
 8006462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006464:	2f78      	cmp	r7, #120	; 0x78
 8006466:	4691      	mov	r9, r2
 8006468:	4680      	mov	r8, r0
 800646a:	460c      	mov	r4, r1
 800646c:	469a      	mov	sl, r3
 800646e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006472:	d807      	bhi.n	8006484 <_printf_i+0x28>
 8006474:	2f62      	cmp	r7, #98	; 0x62
 8006476:	d80a      	bhi.n	800648e <_printf_i+0x32>
 8006478:	2f00      	cmp	r7, #0
 800647a:	f000 80d8 	beq.w	800662e <_printf_i+0x1d2>
 800647e:	2f58      	cmp	r7, #88	; 0x58
 8006480:	f000 80a3 	beq.w	80065ca <_printf_i+0x16e>
 8006484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800648c:	e03a      	b.n	8006504 <_printf_i+0xa8>
 800648e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006492:	2b15      	cmp	r3, #21
 8006494:	d8f6      	bhi.n	8006484 <_printf_i+0x28>
 8006496:	a101      	add	r1, pc, #4	; (adr r1, 800649c <_printf_i+0x40>)
 8006498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800649c:	080064f5 	.word	0x080064f5
 80064a0:	08006509 	.word	0x08006509
 80064a4:	08006485 	.word	0x08006485
 80064a8:	08006485 	.word	0x08006485
 80064ac:	08006485 	.word	0x08006485
 80064b0:	08006485 	.word	0x08006485
 80064b4:	08006509 	.word	0x08006509
 80064b8:	08006485 	.word	0x08006485
 80064bc:	08006485 	.word	0x08006485
 80064c0:	08006485 	.word	0x08006485
 80064c4:	08006485 	.word	0x08006485
 80064c8:	08006615 	.word	0x08006615
 80064cc:	08006539 	.word	0x08006539
 80064d0:	080065f7 	.word	0x080065f7
 80064d4:	08006485 	.word	0x08006485
 80064d8:	08006485 	.word	0x08006485
 80064dc:	08006637 	.word	0x08006637
 80064e0:	08006485 	.word	0x08006485
 80064e4:	08006539 	.word	0x08006539
 80064e8:	08006485 	.word	0x08006485
 80064ec:	08006485 	.word	0x08006485
 80064f0:	080065ff 	.word	0x080065ff
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	1d1a      	adds	r2, r3, #4
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	602a      	str	r2, [r5, #0]
 80064fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006504:	2301      	movs	r3, #1
 8006506:	e0a3      	b.n	8006650 <_printf_i+0x1f4>
 8006508:	6820      	ldr	r0, [r4, #0]
 800650a:	6829      	ldr	r1, [r5, #0]
 800650c:	0606      	lsls	r6, r0, #24
 800650e:	f101 0304 	add.w	r3, r1, #4
 8006512:	d50a      	bpl.n	800652a <_printf_i+0xce>
 8006514:	680e      	ldr	r6, [r1, #0]
 8006516:	602b      	str	r3, [r5, #0]
 8006518:	2e00      	cmp	r6, #0
 800651a:	da03      	bge.n	8006524 <_printf_i+0xc8>
 800651c:	232d      	movs	r3, #45	; 0x2d
 800651e:	4276      	negs	r6, r6
 8006520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006524:	485e      	ldr	r0, [pc, #376]	; (80066a0 <_printf_i+0x244>)
 8006526:	230a      	movs	r3, #10
 8006528:	e019      	b.n	800655e <_printf_i+0x102>
 800652a:	680e      	ldr	r6, [r1, #0]
 800652c:	602b      	str	r3, [r5, #0]
 800652e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006532:	bf18      	it	ne
 8006534:	b236      	sxthne	r6, r6
 8006536:	e7ef      	b.n	8006518 <_printf_i+0xbc>
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	6820      	ldr	r0, [r4, #0]
 800653c:	1d19      	adds	r1, r3, #4
 800653e:	6029      	str	r1, [r5, #0]
 8006540:	0601      	lsls	r1, r0, #24
 8006542:	d501      	bpl.n	8006548 <_printf_i+0xec>
 8006544:	681e      	ldr	r6, [r3, #0]
 8006546:	e002      	b.n	800654e <_printf_i+0xf2>
 8006548:	0646      	lsls	r6, r0, #25
 800654a:	d5fb      	bpl.n	8006544 <_printf_i+0xe8>
 800654c:	881e      	ldrh	r6, [r3, #0]
 800654e:	4854      	ldr	r0, [pc, #336]	; (80066a0 <_printf_i+0x244>)
 8006550:	2f6f      	cmp	r7, #111	; 0x6f
 8006552:	bf0c      	ite	eq
 8006554:	2308      	moveq	r3, #8
 8006556:	230a      	movne	r3, #10
 8006558:	2100      	movs	r1, #0
 800655a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800655e:	6865      	ldr	r5, [r4, #4]
 8006560:	60a5      	str	r5, [r4, #8]
 8006562:	2d00      	cmp	r5, #0
 8006564:	bfa2      	ittt	ge
 8006566:	6821      	ldrge	r1, [r4, #0]
 8006568:	f021 0104 	bicge.w	r1, r1, #4
 800656c:	6021      	strge	r1, [r4, #0]
 800656e:	b90e      	cbnz	r6, 8006574 <_printf_i+0x118>
 8006570:	2d00      	cmp	r5, #0
 8006572:	d04d      	beq.n	8006610 <_printf_i+0x1b4>
 8006574:	4615      	mov	r5, r2
 8006576:	fbb6 f1f3 	udiv	r1, r6, r3
 800657a:	fb03 6711 	mls	r7, r3, r1, r6
 800657e:	5dc7      	ldrb	r7, [r0, r7]
 8006580:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006584:	4637      	mov	r7, r6
 8006586:	42bb      	cmp	r3, r7
 8006588:	460e      	mov	r6, r1
 800658a:	d9f4      	bls.n	8006576 <_printf_i+0x11a>
 800658c:	2b08      	cmp	r3, #8
 800658e:	d10b      	bne.n	80065a8 <_printf_i+0x14c>
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	07de      	lsls	r6, r3, #31
 8006594:	d508      	bpl.n	80065a8 <_printf_i+0x14c>
 8006596:	6923      	ldr	r3, [r4, #16]
 8006598:	6861      	ldr	r1, [r4, #4]
 800659a:	4299      	cmp	r1, r3
 800659c:	bfde      	ittt	le
 800659e:	2330      	movle	r3, #48	; 0x30
 80065a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065a8:	1b52      	subs	r2, r2, r5
 80065aa:	6122      	str	r2, [r4, #16]
 80065ac:	f8cd a000 	str.w	sl, [sp]
 80065b0:	464b      	mov	r3, r9
 80065b2:	aa03      	add	r2, sp, #12
 80065b4:	4621      	mov	r1, r4
 80065b6:	4640      	mov	r0, r8
 80065b8:	f7ff fee2 	bl	8006380 <_printf_common>
 80065bc:	3001      	adds	r0, #1
 80065be:	d14c      	bne.n	800665a <_printf_i+0x1fe>
 80065c0:	f04f 30ff 	mov.w	r0, #4294967295
 80065c4:	b004      	add	sp, #16
 80065c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ca:	4835      	ldr	r0, [pc, #212]	; (80066a0 <_printf_i+0x244>)
 80065cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065d0:	6829      	ldr	r1, [r5, #0]
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80065d8:	6029      	str	r1, [r5, #0]
 80065da:	061d      	lsls	r5, r3, #24
 80065dc:	d514      	bpl.n	8006608 <_printf_i+0x1ac>
 80065de:	07df      	lsls	r7, r3, #31
 80065e0:	bf44      	itt	mi
 80065e2:	f043 0320 	orrmi.w	r3, r3, #32
 80065e6:	6023      	strmi	r3, [r4, #0]
 80065e8:	b91e      	cbnz	r6, 80065f2 <_printf_i+0x196>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	f023 0320 	bic.w	r3, r3, #32
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	2310      	movs	r3, #16
 80065f4:	e7b0      	b.n	8006558 <_printf_i+0xfc>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	f043 0320 	orr.w	r3, r3, #32
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	2378      	movs	r3, #120	; 0x78
 8006600:	4828      	ldr	r0, [pc, #160]	; (80066a4 <_printf_i+0x248>)
 8006602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006606:	e7e3      	b.n	80065d0 <_printf_i+0x174>
 8006608:	0659      	lsls	r1, r3, #25
 800660a:	bf48      	it	mi
 800660c:	b2b6      	uxthmi	r6, r6
 800660e:	e7e6      	b.n	80065de <_printf_i+0x182>
 8006610:	4615      	mov	r5, r2
 8006612:	e7bb      	b.n	800658c <_printf_i+0x130>
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	6826      	ldr	r6, [r4, #0]
 8006618:	6961      	ldr	r1, [r4, #20]
 800661a:	1d18      	adds	r0, r3, #4
 800661c:	6028      	str	r0, [r5, #0]
 800661e:	0635      	lsls	r5, r6, #24
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	d501      	bpl.n	8006628 <_printf_i+0x1cc>
 8006624:	6019      	str	r1, [r3, #0]
 8006626:	e002      	b.n	800662e <_printf_i+0x1d2>
 8006628:	0670      	lsls	r0, r6, #25
 800662a:	d5fb      	bpl.n	8006624 <_printf_i+0x1c8>
 800662c:	8019      	strh	r1, [r3, #0]
 800662e:	2300      	movs	r3, #0
 8006630:	6123      	str	r3, [r4, #16]
 8006632:	4615      	mov	r5, r2
 8006634:	e7ba      	b.n	80065ac <_printf_i+0x150>
 8006636:	682b      	ldr	r3, [r5, #0]
 8006638:	1d1a      	adds	r2, r3, #4
 800663a:	602a      	str	r2, [r5, #0]
 800663c:	681d      	ldr	r5, [r3, #0]
 800663e:	6862      	ldr	r2, [r4, #4]
 8006640:	2100      	movs	r1, #0
 8006642:	4628      	mov	r0, r5
 8006644:	f7f9 fddc 	bl	8000200 <memchr>
 8006648:	b108      	cbz	r0, 800664e <_printf_i+0x1f2>
 800664a:	1b40      	subs	r0, r0, r5
 800664c:	6060      	str	r0, [r4, #4]
 800664e:	6863      	ldr	r3, [r4, #4]
 8006650:	6123      	str	r3, [r4, #16]
 8006652:	2300      	movs	r3, #0
 8006654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006658:	e7a8      	b.n	80065ac <_printf_i+0x150>
 800665a:	6923      	ldr	r3, [r4, #16]
 800665c:	462a      	mov	r2, r5
 800665e:	4649      	mov	r1, r9
 8006660:	4640      	mov	r0, r8
 8006662:	47d0      	blx	sl
 8006664:	3001      	adds	r0, #1
 8006666:	d0ab      	beq.n	80065c0 <_printf_i+0x164>
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	079b      	lsls	r3, r3, #30
 800666c:	d413      	bmi.n	8006696 <_printf_i+0x23a>
 800666e:	68e0      	ldr	r0, [r4, #12]
 8006670:	9b03      	ldr	r3, [sp, #12]
 8006672:	4298      	cmp	r0, r3
 8006674:	bfb8      	it	lt
 8006676:	4618      	movlt	r0, r3
 8006678:	e7a4      	b.n	80065c4 <_printf_i+0x168>
 800667a:	2301      	movs	r3, #1
 800667c:	4632      	mov	r2, r6
 800667e:	4649      	mov	r1, r9
 8006680:	4640      	mov	r0, r8
 8006682:	47d0      	blx	sl
 8006684:	3001      	adds	r0, #1
 8006686:	d09b      	beq.n	80065c0 <_printf_i+0x164>
 8006688:	3501      	adds	r5, #1
 800668a:	68e3      	ldr	r3, [r4, #12]
 800668c:	9903      	ldr	r1, [sp, #12]
 800668e:	1a5b      	subs	r3, r3, r1
 8006690:	42ab      	cmp	r3, r5
 8006692:	dcf2      	bgt.n	800667a <_printf_i+0x21e>
 8006694:	e7eb      	b.n	800666e <_printf_i+0x212>
 8006696:	2500      	movs	r5, #0
 8006698:	f104 0619 	add.w	r6, r4, #25
 800669c:	e7f5      	b.n	800668a <_printf_i+0x22e>
 800669e:	bf00      	nop
 80066a0:	08008c2e 	.word	0x08008c2e
 80066a4:	08008c3f 	.word	0x08008c3f

080066a8 <iprintf>:
 80066a8:	b40f      	push	{r0, r1, r2, r3}
 80066aa:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <iprintf+0x2c>)
 80066ac:	b513      	push	{r0, r1, r4, lr}
 80066ae:	681c      	ldr	r4, [r3, #0]
 80066b0:	b124      	cbz	r4, 80066bc <iprintf+0x14>
 80066b2:	69a3      	ldr	r3, [r4, #24]
 80066b4:	b913      	cbnz	r3, 80066bc <iprintf+0x14>
 80066b6:	4620      	mov	r0, r4
 80066b8:	f001 f8da 	bl	8007870 <__sinit>
 80066bc:	ab05      	add	r3, sp, #20
 80066be:	9a04      	ldr	r2, [sp, #16]
 80066c0:	68a1      	ldr	r1, [r4, #8]
 80066c2:	9301      	str	r3, [sp, #4]
 80066c4:	4620      	mov	r0, r4
 80066c6:	f001 fe97 	bl	80083f8 <_vfiprintf_r>
 80066ca:	b002      	add	sp, #8
 80066cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d0:	b004      	add	sp, #16
 80066d2:	4770      	bx	lr
 80066d4:	20000010 	.word	0x20000010

080066d8 <_puts_r>:
 80066d8:	b570      	push	{r4, r5, r6, lr}
 80066da:	460e      	mov	r6, r1
 80066dc:	4605      	mov	r5, r0
 80066de:	b118      	cbz	r0, 80066e8 <_puts_r+0x10>
 80066e0:	6983      	ldr	r3, [r0, #24]
 80066e2:	b90b      	cbnz	r3, 80066e8 <_puts_r+0x10>
 80066e4:	f001 f8c4 	bl	8007870 <__sinit>
 80066e8:	69ab      	ldr	r3, [r5, #24]
 80066ea:	68ac      	ldr	r4, [r5, #8]
 80066ec:	b913      	cbnz	r3, 80066f4 <_puts_r+0x1c>
 80066ee:	4628      	mov	r0, r5
 80066f0:	f001 f8be 	bl	8007870 <__sinit>
 80066f4:	4b2c      	ldr	r3, [pc, #176]	; (80067a8 <_puts_r+0xd0>)
 80066f6:	429c      	cmp	r4, r3
 80066f8:	d120      	bne.n	800673c <_puts_r+0x64>
 80066fa:	686c      	ldr	r4, [r5, #4]
 80066fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066fe:	07db      	lsls	r3, r3, #31
 8006700:	d405      	bmi.n	800670e <_puts_r+0x36>
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	0598      	lsls	r0, r3, #22
 8006706:	d402      	bmi.n	800670e <_puts_r+0x36>
 8006708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800670a:	f001 f954 	bl	80079b6 <__retarget_lock_acquire_recursive>
 800670e:	89a3      	ldrh	r3, [r4, #12]
 8006710:	0719      	lsls	r1, r3, #28
 8006712:	d51d      	bpl.n	8006750 <_puts_r+0x78>
 8006714:	6923      	ldr	r3, [r4, #16]
 8006716:	b1db      	cbz	r3, 8006750 <_puts_r+0x78>
 8006718:	3e01      	subs	r6, #1
 800671a:	68a3      	ldr	r3, [r4, #8]
 800671c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006720:	3b01      	subs	r3, #1
 8006722:	60a3      	str	r3, [r4, #8]
 8006724:	bb39      	cbnz	r1, 8006776 <_puts_r+0x9e>
 8006726:	2b00      	cmp	r3, #0
 8006728:	da38      	bge.n	800679c <_puts_r+0xc4>
 800672a:	4622      	mov	r2, r4
 800672c:	210a      	movs	r1, #10
 800672e:	4628      	mov	r0, r5
 8006730:	f000 f848 	bl	80067c4 <__swbuf_r>
 8006734:	3001      	adds	r0, #1
 8006736:	d011      	beq.n	800675c <_puts_r+0x84>
 8006738:	250a      	movs	r5, #10
 800673a:	e011      	b.n	8006760 <_puts_r+0x88>
 800673c:	4b1b      	ldr	r3, [pc, #108]	; (80067ac <_puts_r+0xd4>)
 800673e:	429c      	cmp	r4, r3
 8006740:	d101      	bne.n	8006746 <_puts_r+0x6e>
 8006742:	68ac      	ldr	r4, [r5, #8]
 8006744:	e7da      	b.n	80066fc <_puts_r+0x24>
 8006746:	4b1a      	ldr	r3, [pc, #104]	; (80067b0 <_puts_r+0xd8>)
 8006748:	429c      	cmp	r4, r3
 800674a:	bf08      	it	eq
 800674c:	68ec      	ldreq	r4, [r5, #12]
 800674e:	e7d5      	b.n	80066fc <_puts_r+0x24>
 8006750:	4621      	mov	r1, r4
 8006752:	4628      	mov	r0, r5
 8006754:	f000 f888 	bl	8006868 <__swsetup_r>
 8006758:	2800      	cmp	r0, #0
 800675a:	d0dd      	beq.n	8006718 <_puts_r+0x40>
 800675c:	f04f 35ff 	mov.w	r5, #4294967295
 8006760:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006762:	07da      	lsls	r2, r3, #31
 8006764:	d405      	bmi.n	8006772 <_puts_r+0x9a>
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	059b      	lsls	r3, r3, #22
 800676a:	d402      	bmi.n	8006772 <_puts_r+0x9a>
 800676c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800676e:	f001 f923 	bl	80079b8 <__retarget_lock_release_recursive>
 8006772:	4628      	mov	r0, r5
 8006774:	bd70      	pop	{r4, r5, r6, pc}
 8006776:	2b00      	cmp	r3, #0
 8006778:	da04      	bge.n	8006784 <_puts_r+0xac>
 800677a:	69a2      	ldr	r2, [r4, #24]
 800677c:	429a      	cmp	r2, r3
 800677e:	dc06      	bgt.n	800678e <_puts_r+0xb6>
 8006780:	290a      	cmp	r1, #10
 8006782:	d004      	beq.n	800678e <_puts_r+0xb6>
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	6022      	str	r2, [r4, #0]
 800678a:	7019      	strb	r1, [r3, #0]
 800678c:	e7c5      	b.n	800671a <_puts_r+0x42>
 800678e:	4622      	mov	r2, r4
 8006790:	4628      	mov	r0, r5
 8006792:	f000 f817 	bl	80067c4 <__swbuf_r>
 8006796:	3001      	adds	r0, #1
 8006798:	d1bf      	bne.n	800671a <_puts_r+0x42>
 800679a:	e7df      	b.n	800675c <_puts_r+0x84>
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	250a      	movs	r5, #10
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	6022      	str	r2, [r4, #0]
 80067a4:	701d      	strb	r5, [r3, #0]
 80067a6:	e7db      	b.n	8006760 <_puts_r+0x88>
 80067a8:	08008d00 	.word	0x08008d00
 80067ac:	08008d20 	.word	0x08008d20
 80067b0:	08008ce0 	.word	0x08008ce0

080067b4 <puts>:
 80067b4:	4b02      	ldr	r3, [pc, #8]	; (80067c0 <puts+0xc>)
 80067b6:	4601      	mov	r1, r0
 80067b8:	6818      	ldr	r0, [r3, #0]
 80067ba:	f7ff bf8d 	b.w	80066d8 <_puts_r>
 80067be:	bf00      	nop
 80067c0:	20000010 	.word	0x20000010

080067c4 <__swbuf_r>:
 80067c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c6:	460e      	mov	r6, r1
 80067c8:	4614      	mov	r4, r2
 80067ca:	4605      	mov	r5, r0
 80067cc:	b118      	cbz	r0, 80067d6 <__swbuf_r+0x12>
 80067ce:	6983      	ldr	r3, [r0, #24]
 80067d0:	b90b      	cbnz	r3, 80067d6 <__swbuf_r+0x12>
 80067d2:	f001 f84d 	bl	8007870 <__sinit>
 80067d6:	4b21      	ldr	r3, [pc, #132]	; (800685c <__swbuf_r+0x98>)
 80067d8:	429c      	cmp	r4, r3
 80067da:	d12b      	bne.n	8006834 <__swbuf_r+0x70>
 80067dc:	686c      	ldr	r4, [r5, #4]
 80067de:	69a3      	ldr	r3, [r4, #24]
 80067e0:	60a3      	str	r3, [r4, #8]
 80067e2:	89a3      	ldrh	r3, [r4, #12]
 80067e4:	071a      	lsls	r2, r3, #28
 80067e6:	d52f      	bpl.n	8006848 <__swbuf_r+0x84>
 80067e8:	6923      	ldr	r3, [r4, #16]
 80067ea:	b36b      	cbz	r3, 8006848 <__swbuf_r+0x84>
 80067ec:	6923      	ldr	r3, [r4, #16]
 80067ee:	6820      	ldr	r0, [r4, #0]
 80067f0:	1ac0      	subs	r0, r0, r3
 80067f2:	6963      	ldr	r3, [r4, #20]
 80067f4:	b2f6      	uxtb	r6, r6
 80067f6:	4283      	cmp	r3, r0
 80067f8:	4637      	mov	r7, r6
 80067fa:	dc04      	bgt.n	8006806 <__swbuf_r+0x42>
 80067fc:	4621      	mov	r1, r4
 80067fe:	4628      	mov	r0, r5
 8006800:	f000 ffa2 	bl	8007748 <_fflush_r>
 8006804:	bb30      	cbnz	r0, 8006854 <__swbuf_r+0x90>
 8006806:	68a3      	ldr	r3, [r4, #8]
 8006808:	3b01      	subs	r3, #1
 800680a:	60a3      	str	r3, [r4, #8]
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	6022      	str	r2, [r4, #0]
 8006812:	701e      	strb	r6, [r3, #0]
 8006814:	6963      	ldr	r3, [r4, #20]
 8006816:	3001      	adds	r0, #1
 8006818:	4283      	cmp	r3, r0
 800681a:	d004      	beq.n	8006826 <__swbuf_r+0x62>
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	07db      	lsls	r3, r3, #31
 8006820:	d506      	bpl.n	8006830 <__swbuf_r+0x6c>
 8006822:	2e0a      	cmp	r6, #10
 8006824:	d104      	bne.n	8006830 <__swbuf_r+0x6c>
 8006826:	4621      	mov	r1, r4
 8006828:	4628      	mov	r0, r5
 800682a:	f000 ff8d 	bl	8007748 <_fflush_r>
 800682e:	b988      	cbnz	r0, 8006854 <__swbuf_r+0x90>
 8006830:	4638      	mov	r0, r7
 8006832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006834:	4b0a      	ldr	r3, [pc, #40]	; (8006860 <__swbuf_r+0x9c>)
 8006836:	429c      	cmp	r4, r3
 8006838:	d101      	bne.n	800683e <__swbuf_r+0x7a>
 800683a:	68ac      	ldr	r4, [r5, #8]
 800683c:	e7cf      	b.n	80067de <__swbuf_r+0x1a>
 800683e:	4b09      	ldr	r3, [pc, #36]	; (8006864 <__swbuf_r+0xa0>)
 8006840:	429c      	cmp	r4, r3
 8006842:	bf08      	it	eq
 8006844:	68ec      	ldreq	r4, [r5, #12]
 8006846:	e7ca      	b.n	80067de <__swbuf_r+0x1a>
 8006848:	4621      	mov	r1, r4
 800684a:	4628      	mov	r0, r5
 800684c:	f000 f80c 	bl	8006868 <__swsetup_r>
 8006850:	2800      	cmp	r0, #0
 8006852:	d0cb      	beq.n	80067ec <__swbuf_r+0x28>
 8006854:	f04f 37ff 	mov.w	r7, #4294967295
 8006858:	e7ea      	b.n	8006830 <__swbuf_r+0x6c>
 800685a:	bf00      	nop
 800685c:	08008d00 	.word	0x08008d00
 8006860:	08008d20 	.word	0x08008d20
 8006864:	08008ce0 	.word	0x08008ce0

08006868 <__swsetup_r>:
 8006868:	4b32      	ldr	r3, [pc, #200]	; (8006934 <__swsetup_r+0xcc>)
 800686a:	b570      	push	{r4, r5, r6, lr}
 800686c:	681d      	ldr	r5, [r3, #0]
 800686e:	4606      	mov	r6, r0
 8006870:	460c      	mov	r4, r1
 8006872:	b125      	cbz	r5, 800687e <__swsetup_r+0x16>
 8006874:	69ab      	ldr	r3, [r5, #24]
 8006876:	b913      	cbnz	r3, 800687e <__swsetup_r+0x16>
 8006878:	4628      	mov	r0, r5
 800687a:	f000 fff9 	bl	8007870 <__sinit>
 800687e:	4b2e      	ldr	r3, [pc, #184]	; (8006938 <__swsetup_r+0xd0>)
 8006880:	429c      	cmp	r4, r3
 8006882:	d10f      	bne.n	80068a4 <__swsetup_r+0x3c>
 8006884:	686c      	ldr	r4, [r5, #4]
 8006886:	89a3      	ldrh	r3, [r4, #12]
 8006888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800688c:	0719      	lsls	r1, r3, #28
 800688e:	d42c      	bmi.n	80068ea <__swsetup_r+0x82>
 8006890:	06dd      	lsls	r5, r3, #27
 8006892:	d411      	bmi.n	80068b8 <__swsetup_r+0x50>
 8006894:	2309      	movs	r3, #9
 8006896:	6033      	str	r3, [r6, #0]
 8006898:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800689c:	81a3      	strh	r3, [r4, #12]
 800689e:	f04f 30ff 	mov.w	r0, #4294967295
 80068a2:	e03e      	b.n	8006922 <__swsetup_r+0xba>
 80068a4:	4b25      	ldr	r3, [pc, #148]	; (800693c <__swsetup_r+0xd4>)
 80068a6:	429c      	cmp	r4, r3
 80068a8:	d101      	bne.n	80068ae <__swsetup_r+0x46>
 80068aa:	68ac      	ldr	r4, [r5, #8]
 80068ac:	e7eb      	b.n	8006886 <__swsetup_r+0x1e>
 80068ae:	4b24      	ldr	r3, [pc, #144]	; (8006940 <__swsetup_r+0xd8>)
 80068b0:	429c      	cmp	r4, r3
 80068b2:	bf08      	it	eq
 80068b4:	68ec      	ldreq	r4, [r5, #12]
 80068b6:	e7e6      	b.n	8006886 <__swsetup_r+0x1e>
 80068b8:	0758      	lsls	r0, r3, #29
 80068ba:	d512      	bpl.n	80068e2 <__swsetup_r+0x7a>
 80068bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068be:	b141      	cbz	r1, 80068d2 <__swsetup_r+0x6a>
 80068c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068c4:	4299      	cmp	r1, r3
 80068c6:	d002      	beq.n	80068ce <__swsetup_r+0x66>
 80068c8:	4630      	mov	r0, r6
 80068ca:	f001 fc8b 	bl	80081e4 <_free_r>
 80068ce:	2300      	movs	r3, #0
 80068d0:	6363      	str	r3, [r4, #52]	; 0x34
 80068d2:	89a3      	ldrh	r3, [r4, #12]
 80068d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068d8:	81a3      	strh	r3, [r4, #12]
 80068da:	2300      	movs	r3, #0
 80068dc:	6063      	str	r3, [r4, #4]
 80068de:	6923      	ldr	r3, [r4, #16]
 80068e0:	6023      	str	r3, [r4, #0]
 80068e2:	89a3      	ldrh	r3, [r4, #12]
 80068e4:	f043 0308 	orr.w	r3, r3, #8
 80068e8:	81a3      	strh	r3, [r4, #12]
 80068ea:	6923      	ldr	r3, [r4, #16]
 80068ec:	b94b      	cbnz	r3, 8006902 <__swsetup_r+0x9a>
 80068ee:	89a3      	ldrh	r3, [r4, #12]
 80068f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068f8:	d003      	beq.n	8006902 <__swsetup_r+0x9a>
 80068fa:	4621      	mov	r1, r4
 80068fc:	4630      	mov	r0, r6
 80068fe:	f001 f881 	bl	8007a04 <__smakebuf_r>
 8006902:	89a0      	ldrh	r0, [r4, #12]
 8006904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006908:	f010 0301 	ands.w	r3, r0, #1
 800690c:	d00a      	beq.n	8006924 <__swsetup_r+0xbc>
 800690e:	2300      	movs	r3, #0
 8006910:	60a3      	str	r3, [r4, #8]
 8006912:	6963      	ldr	r3, [r4, #20]
 8006914:	425b      	negs	r3, r3
 8006916:	61a3      	str	r3, [r4, #24]
 8006918:	6923      	ldr	r3, [r4, #16]
 800691a:	b943      	cbnz	r3, 800692e <__swsetup_r+0xc6>
 800691c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006920:	d1ba      	bne.n	8006898 <__swsetup_r+0x30>
 8006922:	bd70      	pop	{r4, r5, r6, pc}
 8006924:	0781      	lsls	r1, r0, #30
 8006926:	bf58      	it	pl
 8006928:	6963      	ldrpl	r3, [r4, #20]
 800692a:	60a3      	str	r3, [r4, #8]
 800692c:	e7f4      	b.n	8006918 <__swsetup_r+0xb0>
 800692e:	2000      	movs	r0, #0
 8006930:	e7f7      	b.n	8006922 <__swsetup_r+0xba>
 8006932:	bf00      	nop
 8006934:	20000010 	.word	0x20000010
 8006938:	08008d00 	.word	0x08008d00
 800693c:	08008d20 	.word	0x08008d20
 8006940:	08008ce0 	.word	0x08008ce0

08006944 <quorem>:
 8006944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006948:	6903      	ldr	r3, [r0, #16]
 800694a:	690c      	ldr	r4, [r1, #16]
 800694c:	42a3      	cmp	r3, r4
 800694e:	4607      	mov	r7, r0
 8006950:	f2c0 8081 	blt.w	8006a56 <quorem+0x112>
 8006954:	3c01      	subs	r4, #1
 8006956:	f101 0814 	add.w	r8, r1, #20
 800695a:	f100 0514 	add.w	r5, r0, #20
 800695e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006962:	9301      	str	r3, [sp, #4]
 8006964:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006968:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800696c:	3301      	adds	r3, #1
 800696e:	429a      	cmp	r2, r3
 8006970:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006974:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006978:	fbb2 f6f3 	udiv	r6, r2, r3
 800697c:	d331      	bcc.n	80069e2 <quorem+0x9e>
 800697e:	f04f 0e00 	mov.w	lr, #0
 8006982:	4640      	mov	r0, r8
 8006984:	46ac      	mov	ip, r5
 8006986:	46f2      	mov	sl, lr
 8006988:	f850 2b04 	ldr.w	r2, [r0], #4
 800698c:	b293      	uxth	r3, r2
 800698e:	fb06 e303 	mla	r3, r6, r3, lr
 8006992:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006996:	b29b      	uxth	r3, r3
 8006998:	ebaa 0303 	sub.w	r3, sl, r3
 800699c:	f8dc a000 	ldr.w	sl, [ip]
 80069a0:	0c12      	lsrs	r2, r2, #16
 80069a2:	fa13 f38a 	uxtah	r3, r3, sl
 80069a6:	fb06 e202 	mla	r2, r6, r2, lr
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	9b00      	ldr	r3, [sp, #0]
 80069ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80069b2:	b292      	uxth	r2, r2
 80069b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80069b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80069c0:	4581      	cmp	r9, r0
 80069c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069c6:	f84c 3b04 	str.w	r3, [ip], #4
 80069ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80069ce:	d2db      	bcs.n	8006988 <quorem+0x44>
 80069d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80069d4:	b92b      	cbnz	r3, 80069e2 <quorem+0x9e>
 80069d6:	9b01      	ldr	r3, [sp, #4]
 80069d8:	3b04      	subs	r3, #4
 80069da:	429d      	cmp	r5, r3
 80069dc:	461a      	mov	r2, r3
 80069de:	d32e      	bcc.n	8006a3e <quorem+0xfa>
 80069e0:	613c      	str	r4, [r7, #16]
 80069e2:	4638      	mov	r0, r7
 80069e4:	f001 fae6 	bl	8007fb4 <__mcmp>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	db24      	blt.n	8006a36 <quorem+0xf2>
 80069ec:	3601      	adds	r6, #1
 80069ee:	4628      	mov	r0, r5
 80069f0:	f04f 0c00 	mov.w	ip, #0
 80069f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80069f8:	f8d0 e000 	ldr.w	lr, [r0]
 80069fc:	b293      	uxth	r3, r2
 80069fe:	ebac 0303 	sub.w	r3, ip, r3
 8006a02:	0c12      	lsrs	r2, r2, #16
 8006a04:	fa13 f38e 	uxtah	r3, r3, lr
 8006a08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006a0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a16:	45c1      	cmp	r9, r8
 8006a18:	f840 3b04 	str.w	r3, [r0], #4
 8006a1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006a20:	d2e8      	bcs.n	80069f4 <quorem+0xb0>
 8006a22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a2a:	b922      	cbnz	r2, 8006a36 <quorem+0xf2>
 8006a2c:	3b04      	subs	r3, #4
 8006a2e:	429d      	cmp	r5, r3
 8006a30:	461a      	mov	r2, r3
 8006a32:	d30a      	bcc.n	8006a4a <quorem+0x106>
 8006a34:	613c      	str	r4, [r7, #16]
 8006a36:	4630      	mov	r0, r6
 8006a38:	b003      	add	sp, #12
 8006a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3e:	6812      	ldr	r2, [r2, #0]
 8006a40:	3b04      	subs	r3, #4
 8006a42:	2a00      	cmp	r2, #0
 8006a44:	d1cc      	bne.n	80069e0 <quorem+0x9c>
 8006a46:	3c01      	subs	r4, #1
 8006a48:	e7c7      	b.n	80069da <quorem+0x96>
 8006a4a:	6812      	ldr	r2, [r2, #0]
 8006a4c:	3b04      	subs	r3, #4
 8006a4e:	2a00      	cmp	r2, #0
 8006a50:	d1f0      	bne.n	8006a34 <quorem+0xf0>
 8006a52:	3c01      	subs	r4, #1
 8006a54:	e7eb      	b.n	8006a2e <quorem+0xea>
 8006a56:	2000      	movs	r0, #0
 8006a58:	e7ee      	b.n	8006a38 <quorem+0xf4>
 8006a5a:	0000      	movs	r0, r0
 8006a5c:	0000      	movs	r0, r0
	...

08006a60 <_dtoa_r>:
 8006a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a64:	ed2d 8b04 	vpush	{d8-d9}
 8006a68:	ec57 6b10 	vmov	r6, r7, d0
 8006a6c:	b093      	sub	sp, #76	; 0x4c
 8006a6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a74:	9106      	str	r1, [sp, #24]
 8006a76:	ee10 aa10 	vmov	sl, s0
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8006a7e:	930c      	str	r3, [sp, #48]	; 0x30
 8006a80:	46bb      	mov	fp, r7
 8006a82:	b975      	cbnz	r5, 8006aa2 <_dtoa_r+0x42>
 8006a84:	2010      	movs	r0, #16
 8006a86:	f000 fffd 	bl	8007a84 <malloc>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	6260      	str	r0, [r4, #36]	; 0x24
 8006a8e:	b920      	cbnz	r0, 8006a9a <_dtoa_r+0x3a>
 8006a90:	4ba7      	ldr	r3, [pc, #668]	; (8006d30 <_dtoa_r+0x2d0>)
 8006a92:	21ea      	movs	r1, #234	; 0xea
 8006a94:	48a7      	ldr	r0, [pc, #668]	; (8006d34 <_dtoa_r+0x2d4>)
 8006a96:	f001 fe45 	bl	8008724 <__assert_func>
 8006a9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a9e:	6005      	str	r5, [r0, #0]
 8006aa0:	60c5      	str	r5, [r0, #12]
 8006aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006aa4:	6819      	ldr	r1, [r3, #0]
 8006aa6:	b151      	cbz	r1, 8006abe <_dtoa_r+0x5e>
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	604a      	str	r2, [r1, #4]
 8006aac:	2301      	movs	r3, #1
 8006aae:	4093      	lsls	r3, r2
 8006ab0:	608b      	str	r3, [r1, #8]
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f001 f83c 	bl	8007b30 <_Bfree>
 8006ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006aba:	2200      	movs	r2, #0
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	1e3b      	subs	r3, r7, #0
 8006ac0:	bfaa      	itet	ge
 8006ac2:	2300      	movge	r3, #0
 8006ac4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006ac8:	f8c8 3000 	strge.w	r3, [r8]
 8006acc:	4b9a      	ldr	r3, [pc, #616]	; (8006d38 <_dtoa_r+0x2d8>)
 8006ace:	bfbc      	itt	lt
 8006ad0:	2201      	movlt	r2, #1
 8006ad2:	f8c8 2000 	strlt.w	r2, [r8]
 8006ad6:	ea33 030b 	bics.w	r3, r3, fp
 8006ada:	d11b      	bne.n	8006b14 <_dtoa_r+0xb4>
 8006adc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ade:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ae2:	6013      	str	r3, [r2, #0]
 8006ae4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ae8:	4333      	orrs	r3, r6
 8006aea:	f000 8592 	beq.w	8007612 <_dtoa_r+0xbb2>
 8006aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006af0:	b963      	cbnz	r3, 8006b0c <_dtoa_r+0xac>
 8006af2:	4b92      	ldr	r3, [pc, #584]	; (8006d3c <_dtoa_r+0x2dc>)
 8006af4:	e022      	b.n	8006b3c <_dtoa_r+0xdc>
 8006af6:	4b92      	ldr	r3, [pc, #584]	; (8006d40 <_dtoa_r+0x2e0>)
 8006af8:	9301      	str	r3, [sp, #4]
 8006afa:	3308      	adds	r3, #8
 8006afc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006afe:	6013      	str	r3, [r2, #0]
 8006b00:	9801      	ldr	r0, [sp, #4]
 8006b02:	b013      	add	sp, #76	; 0x4c
 8006b04:	ecbd 8b04 	vpop	{d8-d9}
 8006b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b0c:	4b8b      	ldr	r3, [pc, #556]	; (8006d3c <_dtoa_r+0x2dc>)
 8006b0e:	9301      	str	r3, [sp, #4]
 8006b10:	3303      	adds	r3, #3
 8006b12:	e7f3      	b.n	8006afc <_dtoa_r+0x9c>
 8006b14:	2200      	movs	r2, #0
 8006b16:	2300      	movs	r3, #0
 8006b18:	4650      	mov	r0, sl
 8006b1a:	4659      	mov	r1, fp
 8006b1c:	f7f9 ffe4 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b20:	ec4b ab19 	vmov	d9, sl, fp
 8006b24:	4680      	mov	r8, r0
 8006b26:	b158      	cbz	r0, 8006b40 <_dtoa_r+0xe0>
 8006b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 856b 	beq.w	800760c <_dtoa_r+0xbac>
 8006b36:	4883      	ldr	r0, [pc, #524]	; (8006d44 <_dtoa_r+0x2e4>)
 8006b38:	6018      	str	r0, [r3, #0]
 8006b3a:	1e43      	subs	r3, r0, #1
 8006b3c:	9301      	str	r3, [sp, #4]
 8006b3e:	e7df      	b.n	8006b00 <_dtoa_r+0xa0>
 8006b40:	ec4b ab10 	vmov	d0, sl, fp
 8006b44:	aa10      	add	r2, sp, #64	; 0x40
 8006b46:	a911      	add	r1, sp, #68	; 0x44
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f001 fad9 	bl	8008100 <__d2b>
 8006b4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006b52:	ee08 0a10 	vmov	s16, r0
 8006b56:	2d00      	cmp	r5, #0
 8006b58:	f000 8084 	beq.w	8006c64 <_dtoa_r+0x204>
 8006b5c:	ee19 3a90 	vmov	r3, s19
 8006b60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006b68:	4656      	mov	r6, sl
 8006b6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006b6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006b76:	4b74      	ldr	r3, [pc, #464]	; (8006d48 <_dtoa_r+0x2e8>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	4639      	mov	r1, r7
 8006b7e:	f7f9 fb93 	bl	80002a8 <__aeabi_dsub>
 8006b82:	a365      	add	r3, pc, #404	; (adr r3, 8006d18 <_dtoa_r+0x2b8>)
 8006b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b88:	f7f9 fd46 	bl	8000618 <__aeabi_dmul>
 8006b8c:	a364      	add	r3, pc, #400	; (adr r3, 8006d20 <_dtoa_r+0x2c0>)
 8006b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b92:	f7f9 fb8b 	bl	80002ac <__adddf3>
 8006b96:	4606      	mov	r6, r0
 8006b98:	4628      	mov	r0, r5
 8006b9a:	460f      	mov	r7, r1
 8006b9c:	f7f9 fcd2 	bl	8000544 <__aeabi_i2d>
 8006ba0:	a361      	add	r3, pc, #388	; (adr r3, 8006d28 <_dtoa_r+0x2c8>)
 8006ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba6:	f7f9 fd37 	bl	8000618 <__aeabi_dmul>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4630      	mov	r0, r6
 8006bb0:	4639      	mov	r1, r7
 8006bb2:	f7f9 fb7b 	bl	80002ac <__adddf3>
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	460f      	mov	r7, r1
 8006bba:	f7f9 ffdd 	bl	8000b78 <__aeabi_d2iz>
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	9000      	str	r0, [sp, #0]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	4639      	mov	r1, r7
 8006bc8:	f7f9 ff98 	bl	8000afc <__aeabi_dcmplt>
 8006bcc:	b150      	cbz	r0, 8006be4 <_dtoa_r+0x184>
 8006bce:	9800      	ldr	r0, [sp, #0]
 8006bd0:	f7f9 fcb8 	bl	8000544 <__aeabi_i2d>
 8006bd4:	4632      	mov	r2, r6
 8006bd6:	463b      	mov	r3, r7
 8006bd8:	f7f9 ff86 	bl	8000ae8 <__aeabi_dcmpeq>
 8006bdc:	b910      	cbnz	r0, 8006be4 <_dtoa_r+0x184>
 8006bde:	9b00      	ldr	r3, [sp, #0]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	9b00      	ldr	r3, [sp, #0]
 8006be6:	2b16      	cmp	r3, #22
 8006be8:	d85a      	bhi.n	8006ca0 <_dtoa_r+0x240>
 8006bea:	9a00      	ldr	r2, [sp, #0]
 8006bec:	4b57      	ldr	r3, [pc, #348]	; (8006d4c <_dtoa_r+0x2ec>)
 8006bee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf6:	ec51 0b19 	vmov	r0, r1, d9
 8006bfa:	f7f9 ff7f 	bl	8000afc <__aeabi_dcmplt>
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	d050      	beq.n	8006ca4 <_dtoa_r+0x244>
 8006c02:	9b00      	ldr	r3, [sp, #0]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c0e:	1b5d      	subs	r5, r3, r5
 8006c10:	1e6b      	subs	r3, r5, #1
 8006c12:	9305      	str	r3, [sp, #20]
 8006c14:	bf45      	ittet	mi
 8006c16:	f1c5 0301 	rsbmi	r3, r5, #1
 8006c1a:	9304      	strmi	r3, [sp, #16]
 8006c1c:	2300      	movpl	r3, #0
 8006c1e:	2300      	movmi	r3, #0
 8006c20:	bf4c      	ite	mi
 8006c22:	9305      	strmi	r3, [sp, #20]
 8006c24:	9304      	strpl	r3, [sp, #16]
 8006c26:	9b00      	ldr	r3, [sp, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	db3d      	blt.n	8006ca8 <_dtoa_r+0x248>
 8006c2c:	9b05      	ldr	r3, [sp, #20]
 8006c2e:	9a00      	ldr	r2, [sp, #0]
 8006c30:	920a      	str	r2, [sp, #40]	; 0x28
 8006c32:	4413      	add	r3, r2
 8006c34:	9305      	str	r3, [sp, #20]
 8006c36:	2300      	movs	r3, #0
 8006c38:	9307      	str	r3, [sp, #28]
 8006c3a:	9b06      	ldr	r3, [sp, #24]
 8006c3c:	2b09      	cmp	r3, #9
 8006c3e:	f200 8089 	bhi.w	8006d54 <_dtoa_r+0x2f4>
 8006c42:	2b05      	cmp	r3, #5
 8006c44:	bfc4      	itt	gt
 8006c46:	3b04      	subgt	r3, #4
 8006c48:	9306      	strgt	r3, [sp, #24]
 8006c4a:	9b06      	ldr	r3, [sp, #24]
 8006c4c:	f1a3 0302 	sub.w	r3, r3, #2
 8006c50:	bfcc      	ite	gt
 8006c52:	2500      	movgt	r5, #0
 8006c54:	2501      	movle	r5, #1
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	f200 8087 	bhi.w	8006d6a <_dtoa_r+0x30a>
 8006c5c:	e8df f003 	tbb	[pc, r3]
 8006c60:	59383a2d 	.word	0x59383a2d
 8006c64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006c68:	441d      	add	r5, r3
 8006c6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c6e:	2b20      	cmp	r3, #32
 8006c70:	bfc1      	itttt	gt
 8006c72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006c7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006c7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006c82:	bfda      	itte	le
 8006c84:	f1c3 0320 	rsble	r3, r3, #32
 8006c88:	fa06 f003 	lslle.w	r0, r6, r3
 8006c8c:	4318      	orrgt	r0, r3
 8006c8e:	f7f9 fc49 	bl	8000524 <__aeabi_ui2d>
 8006c92:	2301      	movs	r3, #1
 8006c94:	4606      	mov	r6, r0
 8006c96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006c9a:	3d01      	subs	r5, #1
 8006c9c:	930e      	str	r3, [sp, #56]	; 0x38
 8006c9e:	e76a      	b.n	8006b76 <_dtoa_r+0x116>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e7b2      	b.n	8006c0a <_dtoa_r+0x1aa>
 8006ca4:	900b      	str	r0, [sp, #44]	; 0x2c
 8006ca6:	e7b1      	b.n	8006c0c <_dtoa_r+0x1ac>
 8006ca8:	9b04      	ldr	r3, [sp, #16]
 8006caa:	9a00      	ldr	r2, [sp, #0]
 8006cac:	1a9b      	subs	r3, r3, r2
 8006cae:	9304      	str	r3, [sp, #16]
 8006cb0:	4253      	negs	r3, r2
 8006cb2:	9307      	str	r3, [sp, #28]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8006cb8:	e7bf      	b.n	8006c3a <_dtoa_r+0x1da>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	9308      	str	r3, [sp, #32]
 8006cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	dc55      	bgt.n	8006d70 <_dtoa_r+0x310>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8006cce:	e00c      	b.n	8006cea <_dtoa_r+0x28a>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e7f3      	b.n	8006cbc <_dtoa_r+0x25c>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cd8:	9308      	str	r3, [sp, #32]
 8006cda:	9b00      	ldr	r3, [sp, #0]
 8006cdc:	4413      	add	r3, r2
 8006cde:	9302      	str	r3, [sp, #8]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	9303      	str	r3, [sp, #12]
 8006ce6:	bfb8      	it	lt
 8006ce8:	2301      	movlt	r3, #1
 8006cea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006cec:	2200      	movs	r2, #0
 8006cee:	6042      	str	r2, [r0, #4]
 8006cf0:	2204      	movs	r2, #4
 8006cf2:	f102 0614 	add.w	r6, r2, #20
 8006cf6:	429e      	cmp	r6, r3
 8006cf8:	6841      	ldr	r1, [r0, #4]
 8006cfa:	d93d      	bls.n	8006d78 <_dtoa_r+0x318>
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f000 fed7 	bl	8007ab0 <_Balloc>
 8006d02:	9001      	str	r0, [sp, #4]
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d13b      	bne.n	8006d80 <_dtoa_r+0x320>
 8006d08:	4b11      	ldr	r3, [pc, #68]	; (8006d50 <_dtoa_r+0x2f0>)
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006d10:	e6c0      	b.n	8006a94 <_dtoa_r+0x34>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e7df      	b.n	8006cd6 <_dtoa_r+0x276>
 8006d16:	bf00      	nop
 8006d18:	636f4361 	.word	0x636f4361
 8006d1c:	3fd287a7 	.word	0x3fd287a7
 8006d20:	8b60c8b3 	.word	0x8b60c8b3
 8006d24:	3fc68a28 	.word	0x3fc68a28
 8006d28:	509f79fb 	.word	0x509f79fb
 8006d2c:	3fd34413 	.word	0x3fd34413
 8006d30:	08008c5d 	.word	0x08008c5d
 8006d34:	08008c74 	.word	0x08008c74
 8006d38:	7ff00000 	.word	0x7ff00000
 8006d3c:	08008c59 	.word	0x08008c59
 8006d40:	08008c50 	.word	0x08008c50
 8006d44:	08008c2d 	.word	0x08008c2d
 8006d48:	3ff80000 	.word	0x3ff80000
 8006d4c:	08008dc8 	.word	0x08008dc8
 8006d50:	08008ccf 	.word	0x08008ccf
 8006d54:	2501      	movs	r5, #1
 8006d56:	2300      	movs	r3, #0
 8006d58:	9306      	str	r3, [sp, #24]
 8006d5a:	9508      	str	r5, [sp, #32]
 8006d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d64:	2200      	movs	r2, #0
 8006d66:	2312      	movs	r3, #18
 8006d68:	e7b0      	b.n	8006ccc <_dtoa_r+0x26c>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	9308      	str	r3, [sp, #32]
 8006d6e:	e7f5      	b.n	8006d5c <_dtoa_r+0x2fc>
 8006d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d76:	e7b8      	b.n	8006cea <_dtoa_r+0x28a>
 8006d78:	3101      	adds	r1, #1
 8006d7a:	6041      	str	r1, [r0, #4]
 8006d7c:	0052      	lsls	r2, r2, #1
 8006d7e:	e7b8      	b.n	8006cf2 <_dtoa_r+0x292>
 8006d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d82:	9a01      	ldr	r2, [sp, #4]
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	9b03      	ldr	r3, [sp, #12]
 8006d88:	2b0e      	cmp	r3, #14
 8006d8a:	f200 809d 	bhi.w	8006ec8 <_dtoa_r+0x468>
 8006d8e:	2d00      	cmp	r5, #0
 8006d90:	f000 809a 	beq.w	8006ec8 <_dtoa_r+0x468>
 8006d94:	9b00      	ldr	r3, [sp, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	dd32      	ble.n	8006e00 <_dtoa_r+0x3a0>
 8006d9a:	4ab7      	ldr	r2, [pc, #732]	; (8007078 <_dtoa_r+0x618>)
 8006d9c:	f003 030f 	and.w	r3, r3, #15
 8006da0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006da4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006da8:	9b00      	ldr	r3, [sp, #0]
 8006daa:	05d8      	lsls	r0, r3, #23
 8006dac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006db0:	d516      	bpl.n	8006de0 <_dtoa_r+0x380>
 8006db2:	4bb2      	ldr	r3, [pc, #712]	; (800707c <_dtoa_r+0x61c>)
 8006db4:	ec51 0b19 	vmov	r0, r1, d9
 8006db8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006dbc:	f7f9 fd56 	bl	800086c <__aeabi_ddiv>
 8006dc0:	f007 070f 	and.w	r7, r7, #15
 8006dc4:	4682      	mov	sl, r0
 8006dc6:	468b      	mov	fp, r1
 8006dc8:	2503      	movs	r5, #3
 8006dca:	4eac      	ldr	r6, [pc, #688]	; (800707c <_dtoa_r+0x61c>)
 8006dcc:	b957      	cbnz	r7, 8006de4 <_dtoa_r+0x384>
 8006dce:	4642      	mov	r2, r8
 8006dd0:	464b      	mov	r3, r9
 8006dd2:	4650      	mov	r0, sl
 8006dd4:	4659      	mov	r1, fp
 8006dd6:	f7f9 fd49 	bl	800086c <__aeabi_ddiv>
 8006dda:	4682      	mov	sl, r0
 8006ddc:	468b      	mov	fp, r1
 8006dde:	e028      	b.n	8006e32 <_dtoa_r+0x3d2>
 8006de0:	2502      	movs	r5, #2
 8006de2:	e7f2      	b.n	8006dca <_dtoa_r+0x36a>
 8006de4:	07f9      	lsls	r1, r7, #31
 8006de6:	d508      	bpl.n	8006dfa <_dtoa_r+0x39a>
 8006de8:	4640      	mov	r0, r8
 8006dea:	4649      	mov	r1, r9
 8006dec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006df0:	f7f9 fc12 	bl	8000618 <__aeabi_dmul>
 8006df4:	3501      	adds	r5, #1
 8006df6:	4680      	mov	r8, r0
 8006df8:	4689      	mov	r9, r1
 8006dfa:	107f      	asrs	r7, r7, #1
 8006dfc:	3608      	adds	r6, #8
 8006dfe:	e7e5      	b.n	8006dcc <_dtoa_r+0x36c>
 8006e00:	f000 809b 	beq.w	8006f3a <_dtoa_r+0x4da>
 8006e04:	9b00      	ldr	r3, [sp, #0]
 8006e06:	4f9d      	ldr	r7, [pc, #628]	; (800707c <_dtoa_r+0x61c>)
 8006e08:	425e      	negs	r6, r3
 8006e0a:	4b9b      	ldr	r3, [pc, #620]	; (8007078 <_dtoa_r+0x618>)
 8006e0c:	f006 020f 	and.w	r2, r6, #15
 8006e10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e18:	ec51 0b19 	vmov	r0, r1, d9
 8006e1c:	f7f9 fbfc 	bl	8000618 <__aeabi_dmul>
 8006e20:	1136      	asrs	r6, r6, #4
 8006e22:	4682      	mov	sl, r0
 8006e24:	468b      	mov	fp, r1
 8006e26:	2300      	movs	r3, #0
 8006e28:	2502      	movs	r5, #2
 8006e2a:	2e00      	cmp	r6, #0
 8006e2c:	d17a      	bne.n	8006f24 <_dtoa_r+0x4c4>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1d3      	bne.n	8006dda <_dtoa_r+0x37a>
 8006e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 8082 	beq.w	8006f3e <_dtoa_r+0x4de>
 8006e3a:	4b91      	ldr	r3, [pc, #580]	; (8007080 <_dtoa_r+0x620>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4650      	mov	r0, sl
 8006e40:	4659      	mov	r1, fp
 8006e42:	f7f9 fe5b 	bl	8000afc <__aeabi_dcmplt>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	d079      	beq.n	8006f3e <_dtoa_r+0x4de>
 8006e4a:	9b03      	ldr	r3, [sp, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d076      	beq.n	8006f3e <_dtoa_r+0x4de>
 8006e50:	9b02      	ldr	r3, [sp, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	dd36      	ble.n	8006ec4 <_dtoa_r+0x464>
 8006e56:	9b00      	ldr	r3, [sp, #0]
 8006e58:	4650      	mov	r0, sl
 8006e5a:	4659      	mov	r1, fp
 8006e5c:	1e5f      	subs	r7, r3, #1
 8006e5e:	2200      	movs	r2, #0
 8006e60:	4b88      	ldr	r3, [pc, #544]	; (8007084 <_dtoa_r+0x624>)
 8006e62:	f7f9 fbd9 	bl	8000618 <__aeabi_dmul>
 8006e66:	9e02      	ldr	r6, [sp, #8]
 8006e68:	4682      	mov	sl, r0
 8006e6a:	468b      	mov	fp, r1
 8006e6c:	3501      	adds	r5, #1
 8006e6e:	4628      	mov	r0, r5
 8006e70:	f7f9 fb68 	bl	8000544 <__aeabi_i2d>
 8006e74:	4652      	mov	r2, sl
 8006e76:	465b      	mov	r3, fp
 8006e78:	f7f9 fbce 	bl	8000618 <__aeabi_dmul>
 8006e7c:	4b82      	ldr	r3, [pc, #520]	; (8007088 <_dtoa_r+0x628>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f7f9 fa14 	bl	80002ac <__adddf3>
 8006e84:	46d0      	mov	r8, sl
 8006e86:	46d9      	mov	r9, fp
 8006e88:	4682      	mov	sl, r0
 8006e8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006e8e:	2e00      	cmp	r6, #0
 8006e90:	d158      	bne.n	8006f44 <_dtoa_r+0x4e4>
 8006e92:	4b7e      	ldr	r3, [pc, #504]	; (800708c <_dtoa_r+0x62c>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	4640      	mov	r0, r8
 8006e98:	4649      	mov	r1, r9
 8006e9a:	f7f9 fa05 	bl	80002a8 <__aeabi_dsub>
 8006e9e:	4652      	mov	r2, sl
 8006ea0:	465b      	mov	r3, fp
 8006ea2:	4680      	mov	r8, r0
 8006ea4:	4689      	mov	r9, r1
 8006ea6:	f7f9 fe47 	bl	8000b38 <__aeabi_dcmpgt>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	f040 8295 	bne.w	80073da <_dtoa_r+0x97a>
 8006eb0:	4652      	mov	r2, sl
 8006eb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006eb6:	4640      	mov	r0, r8
 8006eb8:	4649      	mov	r1, r9
 8006eba:	f7f9 fe1f 	bl	8000afc <__aeabi_dcmplt>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	f040 8289 	bne.w	80073d6 <_dtoa_r+0x976>
 8006ec4:	ec5b ab19 	vmov	sl, fp, d9
 8006ec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f2c0 8148 	blt.w	8007160 <_dtoa_r+0x700>
 8006ed0:	9a00      	ldr	r2, [sp, #0]
 8006ed2:	2a0e      	cmp	r2, #14
 8006ed4:	f300 8144 	bgt.w	8007160 <_dtoa_r+0x700>
 8006ed8:	4b67      	ldr	r3, [pc, #412]	; (8007078 <_dtoa_r+0x618>)
 8006eda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ede:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f280 80d5 	bge.w	8007094 <_dtoa_r+0x634>
 8006eea:	9b03      	ldr	r3, [sp, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f300 80d1 	bgt.w	8007094 <_dtoa_r+0x634>
 8006ef2:	f040 826f 	bne.w	80073d4 <_dtoa_r+0x974>
 8006ef6:	4b65      	ldr	r3, [pc, #404]	; (800708c <_dtoa_r+0x62c>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4640      	mov	r0, r8
 8006efc:	4649      	mov	r1, r9
 8006efe:	f7f9 fb8b 	bl	8000618 <__aeabi_dmul>
 8006f02:	4652      	mov	r2, sl
 8006f04:	465b      	mov	r3, fp
 8006f06:	f7f9 fe0d 	bl	8000b24 <__aeabi_dcmpge>
 8006f0a:	9e03      	ldr	r6, [sp, #12]
 8006f0c:	4637      	mov	r7, r6
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	f040 8245 	bne.w	800739e <_dtoa_r+0x93e>
 8006f14:	9d01      	ldr	r5, [sp, #4]
 8006f16:	2331      	movs	r3, #49	; 0x31
 8006f18:	f805 3b01 	strb.w	r3, [r5], #1
 8006f1c:	9b00      	ldr	r3, [sp, #0]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	e240      	b.n	80073a6 <_dtoa_r+0x946>
 8006f24:	07f2      	lsls	r2, r6, #31
 8006f26:	d505      	bpl.n	8006f34 <_dtoa_r+0x4d4>
 8006f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f2c:	f7f9 fb74 	bl	8000618 <__aeabi_dmul>
 8006f30:	3501      	adds	r5, #1
 8006f32:	2301      	movs	r3, #1
 8006f34:	1076      	asrs	r6, r6, #1
 8006f36:	3708      	adds	r7, #8
 8006f38:	e777      	b.n	8006e2a <_dtoa_r+0x3ca>
 8006f3a:	2502      	movs	r5, #2
 8006f3c:	e779      	b.n	8006e32 <_dtoa_r+0x3d2>
 8006f3e:	9f00      	ldr	r7, [sp, #0]
 8006f40:	9e03      	ldr	r6, [sp, #12]
 8006f42:	e794      	b.n	8006e6e <_dtoa_r+0x40e>
 8006f44:	9901      	ldr	r1, [sp, #4]
 8006f46:	4b4c      	ldr	r3, [pc, #304]	; (8007078 <_dtoa_r+0x618>)
 8006f48:	4431      	add	r1, r6
 8006f4a:	910d      	str	r1, [sp, #52]	; 0x34
 8006f4c:	9908      	ldr	r1, [sp, #32]
 8006f4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f56:	2900      	cmp	r1, #0
 8006f58:	d043      	beq.n	8006fe2 <_dtoa_r+0x582>
 8006f5a:	494d      	ldr	r1, [pc, #308]	; (8007090 <_dtoa_r+0x630>)
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	f7f9 fc85 	bl	800086c <__aeabi_ddiv>
 8006f62:	4652      	mov	r2, sl
 8006f64:	465b      	mov	r3, fp
 8006f66:	f7f9 f99f 	bl	80002a8 <__aeabi_dsub>
 8006f6a:	9d01      	ldr	r5, [sp, #4]
 8006f6c:	4682      	mov	sl, r0
 8006f6e:	468b      	mov	fp, r1
 8006f70:	4649      	mov	r1, r9
 8006f72:	4640      	mov	r0, r8
 8006f74:	f7f9 fe00 	bl	8000b78 <__aeabi_d2iz>
 8006f78:	4606      	mov	r6, r0
 8006f7a:	f7f9 fae3 	bl	8000544 <__aeabi_i2d>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	4640      	mov	r0, r8
 8006f84:	4649      	mov	r1, r9
 8006f86:	f7f9 f98f 	bl	80002a8 <__aeabi_dsub>
 8006f8a:	3630      	adds	r6, #48	; 0x30
 8006f8c:	f805 6b01 	strb.w	r6, [r5], #1
 8006f90:	4652      	mov	r2, sl
 8006f92:	465b      	mov	r3, fp
 8006f94:	4680      	mov	r8, r0
 8006f96:	4689      	mov	r9, r1
 8006f98:	f7f9 fdb0 	bl	8000afc <__aeabi_dcmplt>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d163      	bne.n	8007068 <_dtoa_r+0x608>
 8006fa0:	4642      	mov	r2, r8
 8006fa2:	464b      	mov	r3, r9
 8006fa4:	4936      	ldr	r1, [pc, #216]	; (8007080 <_dtoa_r+0x620>)
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	f7f9 f97e 	bl	80002a8 <__aeabi_dsub>
 8006fac:	4652      	mov	r2, sl
 8006fae:	465b      	mov	r3, fp
 8006fb0:	f7f9 fda4 	bl	8000afc <__aeabi_dcmplt>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	f040 80b5 	bne.w	8007124 <_dtoa_r+0x6c4>
 8006fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fbc:	429d      	cmp	r5, r3
 8006fbe:	d081      	beq.n	8006ec4 <_dtoa_r+0x464>
 8006fc0:	4b30      	ldr	r3, [pc, #192]	; (8007084 <_dtoa_r+0x624>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	4650      	mov	r0, sl
 8006fc6:	4659      	mov	r1, fp
 8006fc8:	f7f9 fb26 	bl	8000618 <__aeabi_dmul>
 8006fcc:	4b2d      	ldr	r3, [pc, #180]	; (8007084 <_dtoa_r+0x624>)
 8006fce:	4682      	mov	sl, r0
 8006fd0:	468b      	mov	fp, r1
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	4649      	mov	r1, r9
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f7f9 fb1e 	bl	8000618 <__aeabi_dmul>
 8006fdc:	4680      	mov	r8, r0
 8006fde:	4689      	mov	r9, r1
 8006fe0:	e7c6      	b.n	8006f70 <_dtoa_r+0x510>
 8006fe2:	4650      	mov	r0, sl
 8006fe4:	4659      	mov	r1, fp
 8006fe6:	f7f9 fb17 	bl	8000618 <__aeabi_dmul>
 8006fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fec:	9d01      	ldr	r5, [sp, #4]
 8006fee:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ff0:	4682      	mov	sl, r0
 8006ff2:	468b      	mov	fp, r1
 8006ff4:	4649      	mov	r1, r9
 8006ff6:	4640      	mov	r0, r8
 8006ff8:	f7f9 fdbe 	bl	8000b78 <__aeabi_d2iz>
 8006ffc:	4606      	mov	r6, r0
 8006ffe:	f7f9 faa1 	bl	8000544 <__aeabi_i2d>
 8007002:	3630      	adds	r6, #48	; 0x30
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	4640      	mov	r0, r8
 800700a:	4649      	mov	r1, r9
 800700c:	f7f9 f94c 	bl	80002a8 <__aeabi_dsub>
 8007010:	f805 6b01 	strb.w	r6, [r5], #1
 8007014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007016:	429d      	cmp	r5, r3
 8007018:	4680      	mov	r8, r0
 800701a:	4689      	mov	r9, r1
 800701c:	f04f 0200 	mov.w	r2, #0
 8007020:	d124      	bne.n	800706c <_dtoa_r+0x60c>
 8007022:	4b1b      	ldr	r3, [pc, #108]	; (8007090 <_dtoa_r+0x630>)
 8007024:	4650      	mov	r0, sl
 8007026:	4659      	mov	r1, fp
 8007028:	f7f9 f940 	bl	80002ac <__adddf3>
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	4640      	mov	r0, r8
 8007032:	4649      	mov	r1, r9
 8007034:	f7f9 fd80 	bl	8000b38 <__aeabi_dcmpgt>
 8007038:	2800      	cmp	r0, #0
 800703a:	d173      	bne.n	8007124 <_dtoa_r+0x6c4>
 800703c:	4652      	mov	r2, sl
 800703e:	465b      	mov	r3, fp
 8007040:	4913      	ldr	r1, [pc, #76]	; (8007090 <_dtoa_r+0x630>)
 8007042:	2000      	movs	r0, #0
 8007044:	f7f9 f930 	bl	80002a8 <__aeabi_dsub>
 8007048:	4602      	mov	r2, r0
 800704a:	460b      	mov	r3, r1
 800704c:	4640      	mov	r0, r8
 800704e:	4649      	mov	r1, r9
 8007050:	f7f9 fd54 	bl	8000afc <__aeabi_dcmplt>
 8007054:	2800      	cmp	r0, #0
 8007056:	f43f af35 	beq.w	8006ec4 <_dtoa_r+0x464>
 800705a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800705c:	1e6b      	subs	r3, r5, #1
 800705e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007060:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007064:	2b30      	cmp	r3, #48	; 0x30
 8007066:	d0f8      	beq.n	800705a <_dtoa_r+0x5fa>
 8007068:	9700      	str	r7, [sp, #0]
 800706a:	e049      	b.n	8007100 <_dtoa_r+0x6a0>
 800706c:	4b05      	ldr	r3, [pc, #20]	; (8007084 <_dtoa_r+0x624>)
 800706e:	f7f9 fad3 	bl	8000618 <__aeabi_dmul>
 8007072:	4680      	mov	r8, r0
 8007074:	4689      	mov	r9, r1
 8007076:	e7bd      	b.n	8006ff4 <_dtoa_r+0x594>
 8007078:	08008dc8 	.word	0x08008dc8
 800707c:	08008da0 	.word	0x08008da0
 8007080:	3ff00000 	.word	0x3ff00000
 8007084:	40240000 	.word	0x40240000
 8007088:	401c0000 	.word	0x401c0000
 800708c:	40140000 	.word	0x40140000
 8007090:	3fe00000 	.word	0x3fe00000
 8007094:	9d01      	ldr	r5, [sp, #4]
 8007096:	4656      	mov	r6, sl
 8007098:	465f      	mov	r7, fp
 800709a:	4642      	mov	r2, r8
 800709c:	464b      	mov	r3, r9
 800709e:	4630      	mov	r0, r6
 80070a0:	4639      	mov	r1, r7
 80070a2:	f7f9 fbe3 	bl	800086c <__aeabi_ddiv>
 80070a6:	f7f9 fd67 	bl	8000b78 <__aeabi_d2iz>
 80070aa:	4682      	mov	sl, r0
 80070ac:	f7f9 fa4a 	bl	8000544 <__aeabi_i2d>
 80070b0:	4642      	mov	r2, r8
 80070b2:	464b      	mov	r3, r9
 80070b4:	f7f9 fab0 	bl	8000618 <__aeabi_dmul>
 80070b8:	4602      	mov	r2, r0
 80070ba:	460b      	mov	r3, r1
 80070bc:	4630      	mov	r0, r6
 80070be:	4639      	mov	r1, r7
 80070c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80070c4:	f7f9 f8f0 	bl	80002a8 <__aeabi_dsub>
 80070c8:	f805 6b01 	strb.w	r6, [r5], #1
 80070cc:	9e01      	ldr	r6, [sp, #4]
 80070ce:	9f03      	ldr	r7, [sp, #12]
 80070d0:	1bae      	subs	r6, r5, r6
 80070d2:	42b7      	cmp	r7, r6
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	d135      	bne.n	8007146 <_dtoa_r+0x6e6>
 80070da:	f7f9 f8e7 	bl	80002ac <__adddf3>
 80070de:	4642      	mov	r2, r8
 80070e0:	464b      	mov	r3, r9
 80070e2:	4606      	mov	r6, r0
 80070e4:	460f      	mov	r7, r1
 80070e6:	f7f9 fd27 	bl	8000b38 <__aeabi_dcmpgt>
 80070ea:	b9d0      	cbnz	r0, 8007122 <_dtoa_r+0x6c2>
 80070ec:	4642      	mov	r2, r8
 80070ee:	464b      	mov	r3, r9
 80070f0:	4630      	mov	r0, r6
 80070f2:	4639      	mov	r1, r7
 80070f4:	f7f9 fcf8 	bl	8000ae8 <__aeabi_dcmpeq>
 80070f8:	b110      	cbz	r0, 8007100 <_dtoa_r+0x6a0>
 80070fa:	f01a 0f01 	tst.w	sl, #1
 80070fe:	d110      	bne.n	8007122 <_dtoa_r+0x6c2>
 8007100:	4620      	mov	r0, r4
 8007102:	ee18 1a10 	vmov	r1, s16
 8007106:	f000 fd13 	bl	8007b30 <_Bfree>
 800710a:	2300      	movs	r3, #0
 800710c:	9800      	ldr	r0, [sp, #0]
 800710e:	702b      	strb	r3, [r5, #0]
 8007110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007112:	3001      	adds	r0, #1
 8007114:	6018      	str	r0, [r3, #0]
 8007116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007118:	2b00      	cmp	r3, #0
 800711a:	f43f acf1 	beq.w	8006b00 <_dtoa_r+0xa0>
 800711e:	601d      	str	r5, [r3, #0]
 8007120:	e4ee      	b.n	8006b00 <_dtoa_r+0xa0>
 8007122:	9f00      	ldr	r7, [sp, #0]
 8007124:	462b      	mov	r3, r5
 8007126:	461d      	mov	r5, r3
 8007128:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800712c:	2a39      	cmp	r2, #57	; 0x39
 800712e:	d106      	bne.n	800713e <_dtoa_r+0x6de>
 8007130:	9a01      	ldr	r2, [sp, #4]
 8007132:	429a      	cmp	r2, r3
 8007134:	d1f7      	bne.n	8007126 <_dtoa_r+0x6c6>
 8007136:	9901      	ldr	r1, [sp, #4]
 8007138:	2230      	movs	r2, #48	; 0x30
 800713a:	3701      	adds	r7, #1
 800713c:	700a      	strb	r2, [r1, #0]
 800713e:	781a      	ldrb	r2, [r3, #0]
 8007140:	3201      	adds	r2, #1
 8007142:	701a      	strb	r2, [r3, #0]
 8007144:	e790      	b.n	8007068 <_dtoa_r+0x608>
 8007146:	4ba6      	ldr	r3, [pc, #664]	; (80073e0 <_dtoa_r+0x980>)
 8007148:	2200      	movs	r2, #0
 800714a:	f7f9 fa65 	bl	8000618 <__aeabi_dmul>
 800714e:	2200      	movs	r2, #0
 8007150:	2300      	movs	r3, #0
 8007152:	4606      	mov	r6, r0
 8007154:	460f      	mov	r7, r1
 8007156:	f7f9 fcc7 	bl	8000ae8 <__aeabi_dcmpeq>
 800715a:	2800      	cmp	r0, #0
 800715c:	d09d      	beq.n	800709a <_dtoa_r+0x63a>
 800715e:	e7cf      	b.n	8007100 <_dtoa_r+0x6a0>
 8007160:	9a08      	ldr	r2, [sp, #32]
 8007162:	2a00      	cmp	r2, #0
 8007164:	f000 80d7 	beq.w	8007316 <_dtoa_r+0x8b6>
 8007168:	9a06      	ldr	r2, [sp, #24]
 800716a:	2a01      	cmp	r2, #1
 800716c:	f300 80ba 	bgt.w	80072e4 <_dtoa_r+0x884>
 8007170:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007172:	2a00      	cmp	r2, #0
 8007174:	f000 80b2 	beq.w	80072dc <_dtoa_r+0x87c>
 8007178:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800717c:	9e07      	ldr	r6, [sp, #28]
 800717e:	9d04      	ldr	r5, [sp, #16]
 8007180:	9a04      	ldr	r2, [sp, #16]
 8007182:	441a      	add	r2, r3
 8007184:	9204      	str	r2, [sp, #16]
 8007186:	9a05      	ldr	r2, [sp, #20]
 8007188:	2101      	movs	r1, #1
 800718a:	441a      	add	r2, r3
 800718c:	4620      	mov	r0, r4
 800718e:	9205      	str	r2, [sp, #20]
 8007190:	f000 fd86 	bl	8007ca0 <__i2b>
 8007194:	4607      	mov	r7, r0
 8007196:	2d00      	cmp	r5, #0
 8007198:	dd0c      	ble.n	80071b4 <_dtoa_r+0x754>
 800719a:	9b05      	ldr	r3, [sp, #20]
 800719c:	2b00      	cmp	r3, #0
 800719e:	dd09      	ble.n	80071b4 <_dtoa_r+0x754>
 80071a0:	42ab      	cmp	r3, r5
 80071a2:	9a04      	ldr	r2, [sp, #16]
 80071a4:	bfa8      	it	ge
 80071a6:	462b      	movge	r3, r5
 80071a8:	1ad2      	subs	r2, r2, r3
 80071aa:	9204      	str	r2, [sp, #16]
 80071ac:	9a05      	ldr	r2, [sp, #20]
 80071ae:	1aed      	subs	r5, r5, r3
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	9305      	str	r3, [sp, #20]
 80071b4:	9b07      	ldr	r3, [sp, #28]
 80071b6:	b31b      	cbz	r3, 8007200 <_dtoa_r+0x7a0>
 80071b8:	9b08      	ldr	r3, [sp, #32]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 80af 	beq.w	800731e <_dtoa_r+0x8be>
 80071c0:	2e00      	cmp	r6, #0
 80071c2:	dd13      	ble.n	80071ec <_dtoa_r+0x78c>
 80071c4:	4639      	mov	r1, r7
 80071c6:	4632      	mov	r2, r6
 80071c8:	4620      	mov	r0, r4
 80071ca:	f000 fe29 	bl	8007e20 <__pow5mult>
 80071ce:	ee18 2a10 	vmov	r2, s16
 80071d2:	4601      	mov	r1, r0
 80071d4:	4607      	mov	r7, r0
 80071d6:	4620      	mov	r0, r4
 80071d8:	f000 fd78 	bl	8007ccc <__multiply>
 80071dc:	ee18 1a10 	vmov	r1, s16
 80071e0:	4680      	mov	r8, r0
 80071e2:	4620      	mov	r0, r4
 80071e4:	f000 fca4 	bl	8007b30 <_Bfree>
 80071e8:	ee08 8a10 	vmov	s16, r8
 80071ec:	9b07      	ldr	r3, [sp, #28]
 80071ee:	1b9a      	subs	r2, r3, r6
 80071f0:	d006      	beq.n	8007200 <_dtoa_r+0x7a0>
 80071f2:	ee18 1a10 	vmov	r1, s16
 80071f6:	4620      	mov	r0, r4
 80071f8:	f000 fe12 	bl	8007e20 <__pow5mult>
 80071fc:	ee08 0a10 	vmov	s16, r0
 8007200:	2101      	movs	r1, #1
 8007202:	4620      	mov	r0, r4
 8007204:	f000 fd4c 	bl	8007ca0 <__i2b>
 8007208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800720a:	2b00      	cmp	r3, #0
 800720c:	4606      	mov	r6, r0
 800720e:	f340 8088 	ble.w	8007322 <_dtoa_r+0x8c2>
 8007212:	461a      	mov	r2, r3
 8007214:	4601      	mov	r1, r0
 8007216:	4620      	mov	r0, r4
 8007218:	f000 fe02 	bl	8007e20 <__pow5mult>
 800721c:	9b06      	ldr	r3, [sp, #24]
 800721e:	2b01      	cmp	r3, #1
 8007220:	4606      	mov	r6, r0
 8007222:	f340 8081 	ble.w	8007328 <_dtoa_r+0x8c8>
 8007226:	f04f 0800 	mov.w	r8, #0
 800722a:	6933      	ldr	r3, [r6, #16]
 800722c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007230:	6918      	ldr	r0, [r3, #16]
 8007232:	f000 fce5 	bl	8007c00 <__hi0bits>
 8007236:	f1c0 0020 	rsb	r0, r0, #32
 800723a:	9b05      	ldr	r3, [sp, #20]
 800723c:	4418      	add	r0, r3
 800723e:	f010 001f 	ands.w	r0, r0, #31
 8007242:	f000 8092 	beq.w	800736a <_dtoa_r+0x90a>
 8007246:	f1c0 0320 	rsb	r3, r0, #32
 800724a:	2b04      	cmp	r3, #4
 800724c:	f340 808a 	ble.w	8007364 <_dtoa_r+0x904>
 8007250:	f1c0 001c 	rsb	r0, r0, #28
 8007254:	9b04      	ldr	r3, [sp, #16]
 8007256:	4403      	add	r3, r0
 8007258:	9304      	str	r3, [sp, #16]
 800725a:	9b05      	ldr	r3, [sp, #20]
 800725c:	4403      	add	r3, r0
 800725e:	4405      	add	r5, r0
 8007260:	9305      	str	r3, [sp, #20]
 8007262:	9b04      	ldr	r3, [sp, #16]
 8007264:	2b00      	cmp	r3, #0
 8007266:	dd07      	ble.n	8007278 <_dtoa_r+0x818>
 8007268:	ee18 1a10 	vmov	r1, s16
 800726c:	461a      	mov	r2, r3
 800726e:	4620      	mov	r0, r4
 8007270:	f000 fe30 	bl	8007ed4 <__lshift>
 8007274:	ee08 0a10 	vmov	s16, r0
 8007278:	9b05      	ldr	r3, [sp, #20]
 800727a:	2b00      	cmp	r3, #0
 800727c:	dd05      	ble.n	800728a <_dtoa_r+0x82a>
 800727e:	4631      	mov	r1, r6
 8007280:	461a      	mov	r2, r3
 8007282:	4620      	mov	r0, r4
 8007284:	f000 fe26 	bl	8007ed4 <__lshift>
 8007288:	4606      	mov	r6, r0
 800728a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800728c:	2b00      	cmp	r3, #0
 800728e:	d06e      	beq.n	800736e <_dtoa_r+0x90e>
 8007290:	ee18 0a10 	vmov	r0, s16
 8007294:	4631      	mov	r1, r6
 8007296:	f000 fe8d 	bl	8007fb4 <__mcmp>
 800729a:	2800      	cmp	r0, #0
 800729c:	da67      	bge.n	800736e <_dtoa_r+0x90e>
 800729e:	9b00      	ldr	r3, [sp, #0]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	ee18 1a10 	vmov	r1, s16
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	220a      	movs	r2, #10
 80072aa:	2300      	movs	r3, #0
 80072ac:	4620      	mov	r0, r4
 80072ae:	f000 fc61 	bl	8007b74 <__multadd>
 80072b2:	9b08      	ldr	r3, [sp, #32]
 80072b4:	ee08 0a10 	vmov	s16, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 81b1 	beq.w	8007620 <_dtoa_r+0xbc0>
 80072be:	2300      	movs	r3, #0
 80072c0:	4639      	mov	r1, r7
 80072c2:	220a      	movs	r2, #10
 80072c4:	4620      	mov	r0, r4
 80072c6:	f000 fc55 	bl	8007b74 <__multadd>
 80072ca:	9b02      	ldr	r3, [sp, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	4607      	mov	r7, r0
 80072d0:	f300 808e 	bgt.w	80073f0 <_dtoa_r+0x990>
 80072d4:	9b06      	ldr	r3, [sp, #24]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	dc51      	bgt.n	800737e <_dtoa_r+0x91e>
 80072da:	e089      	b.n	80073f0 <_dtoa_r+0x990>
 80072dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072e2:	e74b      	b.n	800717c <_dtoa_r+0x71c>
 80072e4:	9b03      	ldr	r3, [sp, #12]
 80072e6:	1e5e      	subs	r6, r3, #1
 80072e8:	9b07      	ldr	r3, [sp, #28]
 80072ea:	42b3      	cmp	r3, r6
 80072ec:	bfbf      	itttt	lt
 80072ee:	9b07      	ldrlt	r3, [sp, #28]
 80072f0:	9607      	strlt	r6, [sp, #28]
 80072f2:	1af2      	sublt	r2, r6, r3
 80072f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80072f6:	bfb6      	itet	lt
 80072f8:	189b      	addlt	r3, r3, r2
 80072fa:	1b9e      	subge	r6, r3, r6
 80072fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80072fe:	9b03      	ldr	r3, [sp, #12]
 8007300:	bfb8      	it	lt
 8007302:	2600      	movlt	r6, #0
 8007304:	2b00      	cmp	r3, #0
 8007306:	bfb7      	itett	lt
 8007308:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800730c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007310:	1a9d      	sublt	r5, r3, r2
 8007312:	2300      	movlt	r3, #0
 8007314:	e734      	b.n	8007180 <_dtoa_r+0x720>
 8007316:	9e07      	ldr	r6, [sp, #28]
 8007318:	9d04      	ldr	r5, [sp, #16]
 800731a:	9f08      	ldr	r7, [sp, #32]
 800731c:	e73b      	b.n	8007196 <_dtoa_r+0x736>
 800731e:	9a07      	ldr	r2, [sp, #28]
 8007320:	e767      	b.n	80071f2 <_dtoa_r+0x792>
 8007322:	9b06      	ldr	r3, [sp, #24]
 8007324:	2b01      	cmp	r3, #1
 8007326:	dc18      	bgt.n	800735a <_dtoa_r+0x8fa>
 8007328:	f1ba 0f00 	cmp.w	sl, #0
 800732c:	d115      	bne.n	800735a <_dtoa_r+0x8fa>
 800732e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007332:	b993      	cbnz	r3, 800735a <_dtoa_r+0x8fa>
 8007334:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007338:	0d1b      	lsrs	r3, r3, #20
 800733a:	051b      	lsls	r3, r3, #20
 800733c:	b183      	cbz	r3, 8007360 <_dtoa_r+0x900>
 800733e:	9b04      	ldr	r3, [sp, #16]
 8007340:	3301      	adds	r3, #1
 8007342:	9304      	str	r3, [sp, #16]
 8007344:	9b05      	ldr	r3, [sp, #20]
 8007346:	3301      	adds	r3, #1
 8007348:	9305      	str	r3, [sp, #20]
 800734a:	f04f 0801 	mov.w	r8, #1
 800734e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007350:	2b00      	cmp	r3, #0
 8007352:	f47f af6a 	bne.w	800722a <_dtoa_r+0x7ca>
 8007356:	2001      	movs	r0, #1
 8007358:	e76f      	b.n	800723a <_dtoa_r+0x7da>
 800735a:	f04f 0800 	mov.w	r8, #0
 800735e:	e7f6      	b.n	800734e <_dtoa_r+0x8ee>
 8007360:	4698      	mov	r8, r3
 8007362:	e7f4      	b.n	800734e <_dtoa_r+0x8ee>
 8007364:	f43f af7d 	beq.w	8007262 <_dtoa_r+0x802>
 8007368:	4618      	mov	r0, r3
 800736a:	301c      	adds	r0, #28
 800736c:	e772      	b.n	8007254 <_dtoa_r+0x7f4>
 800736e:	9b03      	ldr	r3, [sp, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	dc37      	bgt.n	80073e4 <_dtoa_r+0x984>
 8007374:	9b06      	ldr	r3, [sp, #24]
 8007376:	2b02      	cmp	r3, #2
 8007378:	dd34      	ble.n	80073e4 <_dtoa_r+0x984>
 800737a:	9b03      	ldr	r3, [sp, #12]
 800737c:	9302      	str	r3, [sp, #8]
 800737e:	9b02      	ldr	r3, [sp, #8]
 8007380:	b96b      	cbnz	r3, 800739e <_dtoa_r+0x93e>
 8007382:	4631      	mov	r1, r6
 8007384:	2205      	movs	r2, #5
 8007386:	4620      	mov	r0, r4
 8007388:	f000 fbf4 	bl	8007b74 <__multadd>
 800738c:	4601      	mov	r1, r0
 800738e:	4606      	mov	r6, r0
 8007390:	ee18 0a10 	vmov	r0, s16
 8007394:	f000 fe0e 	bl	8007fb4 <__mcmp>
 8007398:	2800      	cmp	r0, #0
 800739a:	f73f adbb 	bgt.w	8006f14 <_dtoa_r+0x4b4>
 800739e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a0:	9d01      	ldr	r5, [sp, #4]
 80073a2:	43db      	mvns	r3, r3
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	f04f 0800 	mov.w	r8, #0
 80073aa:	4631      	mov	r1, r6
 80073ac:	4620      	mov	r0, r4
 80073ae:	f000 fbbf 	bl	8007b30 <_Bfree>
 80073b2:	2f00      	cmp	r7, #0
 80073b4:	f43f aea4 	beq.w	8007100 <_dtoa_r+0x6a0>
 80073b8:	f1b8 0f00 	cmp.w	r8, #0
 80073bc:	d005      	beq.n	80073ca <_dtoa_r+0x96a>
 80073be:	45b8      	cmp	r8, r7
 80073c0:	d003      	beq.n	80073ca <_dtoa_r+0x96a>
 80073c2:	4641      	mov	r1, r8
 80073c4:	4620      	mov	r0, r4
 80073c6:	f000 fbb3 	bl	8007b30 <_Bfree>
 80073ca:	4639      	mov	r1, r7
 80073cc:	4620      	mov	r0, r4
 80073ce:	f000 fbaf 	bl	8007b30 <_Bfree>
 80073d2:	e695      	b.n	8007100 <_dtoa_r+0x6a0>
 80073d4:	2600      	movs	r6, #0
 80073d6:	4637      	mov	r7, r6
 80073d8:	e7e1      	b.n	800739e <_dtoa_r+0x93e>
 80073da:	9700      	str	r7, [sp, #0]
 80073dc:	4637      	mov	r7, r6
 80073de:	e599      	b.n	8006f14 <_dtoa_r+0x4b4>
 80073e0:	40240000 	.word	0x40240000
 80073e4:	9b08      	ldr	r3, [sp, #32]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 80ca 	beq.w	8007580 <_dtoa_r+0xb20>
 80073ec:	9b03      	ldr	r3, [sp, #12]
 80073ee:	9302      	str	r3, [sp, #8]
 80073f0:	2d00      	cmp	r5, #0
 80073f2:	dd05      	ble.n	8007400 <_dtoa_r+0x9a0>
 80073f4:	4639      	mov	r1, r7
 80073f6:	462a      	mov	r2, r5
 80073f8:	4620      	mov	r0, r4
 80073fa:	f000 fd6b 	bl	8007ed4 <__lshift>
 80073fe:	4607      	mov	r7, r0
 8007400:	f1b8 0f00 	cmp.w	r8, #0
 8007404:	d05b      	beq.n	80074be <_dtoa_r+0xa5e>
 8007406:	6879      	ldr	r1, [r7, #4]
 8007408:	4620      	mov	r0, r4
 800740a:	f000 fb51 	bl	8007ab0 <_Balloc>
 800740e:	4605      	mov	r5, r0
 8007410:	b928      	cbnz	r0, 800741e <_dtoa_r+0x9be>
 8007412:	4b87      	ldr	r3, [pc, #540]	; (8007630 <_dtoa_r+0xbd0>)
 8007414:	4602      	mov	r2, r0
 8007416:	f240 21ea 	movw	r1, #746	; 0x2ea
 800741a:	f7ff bb3b 	b.w	8006a94 <_dtoa_r+0x34>
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	3202      	adds	r2, #2
 8007422:	0092      	lsls	r2, r2, #2
 8007424:	f107 010c 	add.w	r1, r7, #12
 8007428:	300c      	adds	r0, #12
 800742a:	f000 fb33 	bl	8007a94 <memcpy>
 800742e:	2201      	movs	r2, #1
 8007430:	4629      	mov	r1, r5
 8007432:	4620      	mov	r0, r4
 8007434:	f000 fd4e 	bl	8007ed4 <__lshift>
 8007438:	9b01      	ldr	r3, [sp, #4]
 800743a:	f103 0901 	add.w	r9, r3, #1
 800743e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007442:	4413      	add	r3, r2
 8007444:	9305      	str	r3, [sp, #20]
 8007446:	f00a 0301 	and.w	r3, sl, #1
 800744a:	46b8      	mov	r8, r7
 800744c:	9304      	str	r3, [sp, #16]
 800744e:	4607      	mov	r7, r0
 8007450:	4631      	mov	r1, r6
 8007452:	ee18 0a10 	vmov	r0, s16
 8007456:	f7ff fa75 	bl	8006944 <quorem>
 800745a:	4641      	mov	r1, r8
 800745c:	9002      	str	r0, [sp, #8]
 800745e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007462:	ee18 0a10 	vmov	r0, s16
 8007466:	f000 fda5 	bl	8007fb4 <__mcmp>
 800746a:	463a      	mov	r2, r7
 800746c:	9003      	str	r0, [sp, #12]
 800746e:	4631      	mov	r1, r6
 8007470:	4620      	mov	r0, r4
 8007472:	f000 fdbb 	bl	8007fec <__mdiff>
 8007476:	68c2      	ldr	r2, [r0, #12]
 8007478:	f109 3bff 	add.w	fp, r9, #4294967295
 800747c:	4605      	mov	r5, r0
 800747e:	bb02      	cbnz	r2, 80074c2 <_dtoa_r+0xa62>
 8007480:	4601      	mov	r1, r0
 8007482:	ee18 0a10 	vmov	r0, s16
 8007486:	f000 fd95 	bl	8007fb4 <__mcmp>
 800748a:	4602      	mov	r2, r0
 800748c:	4629      	mov	r1, r5
 800748e:	4620      	mov	r0, r4
 8007490:	9207      	str	r2, [sp, #28]
 8007492:	f000 fb4d 	bl	8007b30 <_Bfree>
 8007496:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800749a:	ea43 0102 	orr.w	r1, r3, r2
 800749e:	9b04      	ldr	r3, [sp, #16]
 80074a0:	430b      	orrs	r3, r1
 80074a2:	464d      	mov	r5, r9
 80074a4:	d10f      	bne.n	80074c6 <_dtoa_r+0xa66>
 80074a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80074aa:	d02a      	beq.n	8007502 <_dtoa_r+0xaa2>
 80074ac:	9b03      	ldr	r3, [sp, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	dd02      	ble.n	80074b8 <_dtoa_r+0xa58>
 80074b2:	9b02      	ldr	r3, [sp, #8]
 80074b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80074b8:	f88b a000 	strb.w	sl, [fp]
 80074bc:	e775      	b.n	80073aa <_dtoa_r+0x94a>
 80074be:	4638      	mov	r0, r7
 80074c0:	e7ba      	b.n	8007438 <_dtoa_r+0x9d8>
 80074c2:	2201      	movs	r2, #1
 80074c4:	e7e2      	b.n	800748c <_dtoa_r+0xa2c>
 80074c6:	9b03      	ldr	r3, [sp, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	db04      	blt.n	80074d6 <_dtoa_r+0xa76>
 80074cc:	9906      	ldr	r1, [sp, #24]
 80074ce:	430b      	orrs	r3, r1
 80074d0:	9904      	ldr	r1, [sp, #16]
 80074d2:	430b      	orrs	r3, r1
 80074d4:	d122      	bne.n	800751c <_dtoa_r+0xabc>
 80074d6:	2a00      	cmp	r2, #0
 80074d8:	ddee      	ble.n	80074b8 <_dtoa_r+0xa58>
 80074da:	ee18 1a10 	vmov	r1, s16
 80074de:	2201      	movs	r2, #1
 80074e0:	4620      	mov	r0, r4
 80074e2:	f000 fcf7 	bl	8007ed4 <__lshift>
 80074e6:	4631      	mov	r1, r6
 80074e8:	ee08 0a10 	vmov	s16, r0
 80074ec:	f000 fd62 	bl	8007fb4 <__mcmp>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	dc03      	bgt.n	80074fc <_dtoa_r+0xa9c>
 80074f4:	d1e0      	bne.n	80074b8 <_dtoa_r+0xa58>
 80074f6:	f01a 0f01 	tst.w	sl, #1
 80074fa:	d0dd      	beq.n	80074b8 <_dtoa_r+0xa58>
 80074fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007500:	d1d7      	bne.n	80074b2 <_dtoa_r+0xa52>
 8007502:	2339      	movs	r3, #57	; 0x39
 8007504:	f88b 3000 	strb.w	r3, [fp]
 8007508:	462b      	mov	r3, r5
 800750a:	461d      	mov	r5, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007512:	2a39      	cmp	r2, #57	; 0x39
 8007514:	d071      	beq.n	80075fa <_dtoa_r+0xb9a>
 8007516:	3201      	adds	r2, #1
 8007518:	701a      	strb	r2, [r3, #0]
 800751a:	e746      	b.n	80073aa <_dtoa_r+0x94a>
 800751c:	2a00      	cmp	r2, #0
 800751e:	dd07      	ble.n	8007530 <_dtoa_r+0xad0>
 8007520:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007524:	d0ed      	beq.n	8007502 <_dtoa_r+0xaa2>
 8007526:	f10a 0301 	add.w	r3, sl, #1
 800752a:	f88b 3000 	strb.w	r3, [fp]
 800752e:	e73c      	b.n	80073aa <_dtoa_r+0x94a>
 8007530:	9b05      	ldr	r3, [sp, #20]
 8007532:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007536:	4599      	cmp	r9, r3
 8007538:	d047      	beq.n	80075ca <_dtoa_r+0xb6a>
 800753a:	ee18 1a10 	vmov	r1, s16
 800753e:	2300      	movs	r3, #0
 8007540:	220a      	movs	r2, #10
 8007542:	4620      	mov	r0, r4
 8007544:	f000 fb16 	bl	8007b74 <__multadd>
 8007548:	45b8      	cmp	r8, r7
 800754a:	ee08 0a10 	vmov	s16, r0
 800754e:	f04f 0300 	mov.w	r3, #0
 8007552:	f04f 020a 	mov.w	r2, #10
 8007556:	4641      	mov	r1, r8
 8007558:	4620      	mov	r0, r4
 800755a:	d106      	bne.n	800756a <_dtoa_r+0xb0a>
 800755c:	f000 fb0a 	bl	8007b74 <__multadd>
 8007560:	4680      	mov	r8, r0
 8007562:	4607      	mov	r7, r0
 8007564:	f109 0901 	add.w	r9, r9, #1
 8007568:	e772      	b.n	8007450 <_dtoa_r+0x9f0>
 800756a:	f000 fb03 	bl	8007b74 <__multadd>
 800756e:	4639      	mov	r1, r7
 8007570:	4680      	mov	r8, r0
 8007572:	2300      	movs	r3, #0
 8007574:	220a      	movs	r2, #10
 8007576:	4620      	mov	r0, r4
 8007578:	f000 fafc 	bl	8007b74 <__multadd>
 800757c:	4607      	mov	r7, r0
 800757e:	e7f1      	b.n	8007564 <_dtoa_r+0xb04>
 8007580:	9b03      	ldr	r3, [sp, #12]
 8007582:	9302      	str	r3, [sp, #8]
 8007584:	9d01      	ldr	r5, [sp, #4]
 8007586:	ee18 0a10 	vmov	r0, s16
 800758a:	4631      	mov	r1, r6
 800758c:	f7ff f9da 	bl	8006944 <quorem>
 8007590:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007594:	9b01      	ldr	r3, [sp, #4]
 8007596:	f805 ab01 	strb.w	sl, [r5], #1
 800759a:	1aea      	subs	r2, r5, r3
 800759c:	9b02      	ldr	r3, [sp, #8]
 800759e:	4293      	cmp	r3, r2
 80075a0:	dd09      	ble.n	80075b6 <_dtoa_r+0xb56>
 80075a2:	ee18 1a10 	vmov	r1, s16
 80075a6:	2300      	movs	r3, #0
 80075a8:	220a      	movs	r2, #10
 80075aa:	4620      	mov	r0, r4
 80075ac:	f000 fae2 	bl	8007b74 <__multadd>
 80075b0:	ee08 0a10 	vmov	s16, r0
 80075b4:	e7e7      	b.n	8007586 <_dtoa_r+0xb26>
 80075b6:	9b02      	ldr	r3, [sp, #8]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	bfc8      	it	gt
 80075bc:	461d      	movgt	r5, r3
 80075be:	9b01      	ldr	r3, [sp, #4]
 80075c0:	bfd8      	it	le
 80075c2:	2501      	movle	r5, #1
 80075c4:	441d      	add	r5, r3
 80075c6:	f04f 0800 	mov.w	r8, #0
 80075ca:	ee18 1a10 	vmov	r1, s16
 80075ce:	2201      	movs	r2, #1
 80075d0:	4620      	mov	r0, r4
 80075d2:	f000 fc7f 	bl	8007ed4 <__lshift>
 80075d6:	4631      	mov	r1, r6
 80075d8:	ee08 0a10 	vmov	s16, r0
 80075dc:	f000 fcea 	bl	8007fb4 <__mcmp>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	dc91      	bgt.n	8007508 <_dtoa_r+0xaa8>
 80075e4:	d102      	bne.n	80075ec <_dtoa_r+0xb8c>
 80075e6:	f01a 0f01 	tst.w	sl, #1
 80075ea:	d18d      	bne.n	8007508 <_dtoa_r+0xaa8>
 80075ec:	462b      	mov	r3, r5
 80075ee:	461d      	mov	r5, r3
 80075f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075f4:	2a30      	cmp	r2, #48	; 0x30
 80075f6:	d0fa      	beq.n	80075ee <_dtoa_r+0xb8e>
 80075f8:	e6d7      	b.n	80073aa <_dtoa_r+0x94a>
 80075fa:	9a01      	ldr	r2, [sp, #4]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d184      	bne.n	800750a <_dtoa_r+0xaaa>
 8007600:	9b00      	ldr	r3, [sp, #0]
 8007602:	3301      	adds	r3, #1
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	2331      	movs	r3, #49	; 0x31
 8007608:	7013      	strb	r3, [r2, #0]
 800760a:	e6ce      	b.n	80073aa <_dtoa_r+0x94a>
 800760c:	4b09      	ldr	r3, [pc, #36]	; (8007634 <_dtoa_r+0xbd4>)
 800760e:	f7ff ba95 	b.w	8006b3c <_dtoa_r+0xdc>
 8007612:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007614:	2b00      	cmp	r3, #0
 8007616:	f47f aa6e 	bne.w	8006af6 <_dtoa_r+0x96>
 800761a:	4b07      	ldr	r3, [pc, #28]	; (8007638 <_dtoa_r+0xbd8>)
 800761c:	f7ff ba8e 	b.w	8006b3c <_dtoa_r+0xdc>
 8007620:	9b02      	ldr	r3, [sp, #8]
 8007622:	2b00      	cmp	r3, #0
 8007624:	dcae      	bgt.n	8007584 <_dtoa_r+0xb24>
 8007626:	9b06      	ldr	r3, [sp, #24]
 8007628:	2b02      	cmp	r3, #2
 800762a:	f73f aea8 	bgt.w	800737e <_dtoa_r+0x91e>
 800762e:	e7a9      	b.n	8007584 <_dtoa_r+0xb24>
 8007630:	08008ccf 	.word	0x08008ccf
 8007634:	08008c2c 	.word	0x08008c2c
 8007638:	08008c50 	.word	0x08008c50

0800763c <__sflush_r>:
 800763c:	898a      	ldrh	r2, [r1, #12]
 800763e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007642:	4605      	mov	r5, r0
 8007644:	0710      	lsls	r0, r2, #28
 8007646:	460c      	mov	r4, r1
 8007648:	d458      	bmi.n	80076fc <__sflush_r+0xc0>
 800764a:	684b      	ldr	r3, [r1, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	dc05      	bgt.n	800765c <__sflush_r+0x20>
 8007650:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007652:	2b00      	cmp	r3, #0
 8007654:	dc02      	bgt.n	800765c <__sflush_r+0x20>
 8007656:	2000      	movs	r0, #0
 8007658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800765c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800765e:	2e00      	cmp	r6, #0
 8007660:	d0f9      	beq.n	8007656 <__sflush_r+0x1a>
 8007662:	2300      	movs	r3, #0
 8007664:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007668:	682f      	ldr	r7, [r5, #0]
 800766a:	602b      	str	r3, [r5, #0]
 800766c:	d032      	beq.n	80076d4 <__sflush_r+0x98>
 800766e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007670:	89a3      	ldrh	r3, [r4, #12]
 8007672:	075a      	lsls	r2, r3, #29
 8007674:	d505      	bpl.n	8007682 <__sflush_r+0x46>
 8007676:	6863      	ldr	r3, [r4, #4]
 8007678:	1ac0      	subs	r0, r0, r3
 800767a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800767c:	b10b      	cbz	r3, 8007682 <__sflush_r+0x46>
 800767e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007680:	1ac0      	subs	r0, r0, r3
 8007682:	2300      	movs	r3, #0
 8007684:	4602      	mov	r2, r0
 8007686:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007688:	6a21      	ldr	r1, [r4, #32]
 800768a:	4628      	mov	r0, r5
 800768c:	47b0      	blx	r6
 800768e:	1c43      	adds	r3, r0, #1
 8007690:	89a3      	ldrh	r3, [r4, #12]
 8007692:	d106      	bne.n	80076a2 <__sflush_r+0x66>
 8007694:	6829      	ldr	r1, [r5, #0]
 8007696:	291d      	cmp	r1, #29
 8007698:	d82c      	bhi.n	80076f4 <__sflush_r+0xb8>
 800769a:	4a2a      	ldr	r2, [pc, #168]	; (8007744 <__sflush_r+0x108>)
 800769c:	40ca      	lsrs	r2, r1
 800769e:	07d6      	lsls	r6, r2, #31
 80076a0:	d528      	bpl.n	80076f4 <__sflush_r+0xb8>
 80076a2:	2200      	movs	r2, #0
 80076a4:	6062      	str	r2, [r4, #4]
 80076a6:	04d9      	lsls	r1, r3, #19
 80076a8:	6922      	ldr	r2, [r4, #16]
 80076aa:	6022      	str	r2, [r4, #0]
 80076ac:	d504      	bpl.n	80076b8 <__sflush_r+0x7c>
 80076ae:	1c42      	adds	r2, r0, #1
 80076b0:	d101      	bne.n	80076b6 <__sflush_r+0x7a>
 80076b2:	682b      	ldr	r3, [r5, #0]
 80076b4:	b903      	cbnz	r3, 80076b8 <__sflush_r+0x7c>
 80076b6:	6560      	str	r0, [r4, #84]	; 0x54
 80076b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076ba:	602f      	str	r7, [r5, #0]
 80076bc:	2900      	cmp	r1, #0
 80076be:	d0ca      	beq.n	8007656 <__sflush_r+0x1a>
 80076c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076c4:	4299      	cmp	r1, r3
 80076c6:	d002      	beq.n	80076ce <__sflush_r+0x92>
 80076c8:	4628      	mov	r0, r5
 80076ca:	f000 fd8b 	bl	80081e4 <_free_r>
 80076ce:	2000      	movs	r0, #0
 80076d0:	6360      	str	r0, [r4, #52]	; 0x34
 80076d2:	e7c1      	b.n	8007658 <__sflush_r+0x1c>
 80076d4:	6a21      	ldr	r1, [r4, #32]
 80076d6:	2301      	movs	r3, #1
 80076d8:	4628      	mov	r0, r5
 80076da:	47b0      	blx	r6
 80076dc:	1c41      	adds	r1, r0, #1
 80076de:	d1c7      	bne.n	8007670 <__sflush_r+0x34>
 80076e0:	682b      	ldr	r3, [r5, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d0c4      	beq.n	8007670 <__sflush_r+0x34>
 80076e6:	2b1d      	cmp	r3, #29
 80076e8:	d001      	beq.n	80076ee <__sflush_r+0xb2>
 80076ea:	2b16      	cmp	r3, #22
 80076ec:	d101      	bne.n	80076f2 <__sflush_r+0xb6>
 80076ee:	602f      	str	r7, [r5, #0]
 80076f0:	e7b1      	b.n	8007656 <__sflush_r+0x1a>
 80076f2:	89a3      	ldrh	r3, [r4, #12]
 80076f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076f8:	81a3      	strh	r3, [r4, #12]
 80076fa:	e7ad      	b.n	8007658 <__sflush_r+0x1c>
 80076fc:	690f      	ldr	r7, [r1, #16]
 80076fe:	2f00      	cmp	r7, #0
 8007700:	d0a9      	beq.n	8007656 <__sflush_r+0x1a>
 8007702:	0793      	lsls	r3, r2, #30
 8007704:	680e      	ldr	r6, [r1, #0]
 8007706:	bf08      	it	eq
 8007708:	694b      	ldreq	r3, [r1, #20]
 800770a:	600f      	str	r7, [r1, #0]
 800770c:	bf18      	it	ne
 800770e:	2300      	movne	r3, #0
 8007710:	eba6 0807 	sub.w	r8, r6, r7
 8007714:	608b      	str	r3, [r1, #8]
 8007716:	f1b8 0f00 	cmp.w	r8, #0
 800771a:	dd9c      	ble.n	8007656 <__sflush_r+0x1a>
 800771c:	6a21      	ldr	r1, [r4, #32]
 800771e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007720:	4643      	mov	r3, r8
 8007722:	463a      	mov	r2, r7
 8007724:	4628      	mov	r0, r5
 8007726:	47b0      	blx	r6
 8007728:	2800      	cmp	r0, #0
 800772a:	dc06      	bgt.n	800773a <__sflush_r+0xfe>
 800772c:	89a3      	ldrh	r3, [r4, #12]
 800772e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007732:	81a3      	strh	r3, [r4, #12]
 8007734:	f04f 30ff 	mov.w	r0, #4294967295
 8007738:	e78e      	b.n	8007658 <__sflush_r+0x1c>
 800773a:	4407      	add	r7, r0
 800773c:	eba8 0800 	sub.w	r8, r8, r0
 8007740:	e7e9      	b.n	8007716 <__sflush_r+0xda>
 8007742:	bf00      	nop
 8007744:	20400001 	.word	0x20400001

08007748 <_fflush_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	690b      	ldr	r3, [r1, #16]
 800774c:	4605      	mov	r5, r0
 800774e:	460c      	mov	r4, r1
 8007750:	b913      	cbnz	r3, 8007758 <_fflush_r+0x10>
 8007752:	2500      	movs	r5, #0
 8007754:	4628      	mov	r0, r5
 8007756:	bd38      	pop	{r3, r4, r5, pc}
 8007758:	b118      	cbz	r0, 8007762 <_fflush_r+0x1a>
 800775a:	6983      	ldr	r3, [r0, #24]
 800775c:	b90b      	cbnz	r3, 8007762 <_fflush_r+0x1a>
 800775e:	f000 f887 	bl	8007870 <__sinit>
 8007762:	4b14      	ldr	r3, [pc, #80]	; (80077b4 <_fflush_r+0x6c>)
 8007764:	429c      	cmp	r4, r3
 8007766:	d11b      	bne.n	80077a0 <_fflush_r+0x58>
 8007768:	686c      	ldr	r4, [r5, #4]
 800776a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d0ef      	beq.n	8007752 <_fflush_r+0xa>
 8007772:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007774:	07d0      	lsls	r0, r2, #31
 8007776:	d404      	bmi.n	8007782 <_fflush_r+0x3a>
 8007778:	0599      	lsls	r1, r3, #22
 800777a:	d402      	bmi.n	8007782 <_fflush_r+0x3a>
 800777c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800777e:	f000 f91a 	bl	80079b6 <__retarget_lock_acquire_recursive>
 8007782:	4628      	mov	r0, r5
 8007784:	4621      	mov	r1, r4
 8007786:	f7ff ff59 	bl	800763c <__sflush_r>
 800778a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800778c:	07da      	lsls	r2, r3, #31
 800778e:	4605      	mov	r5, r0
 8007790:	d4e0      	bmi.n	8007754 <_fflush_r+0xc>
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	059b      	lsls	r3, r3, #22
 8007796:	d4dd      	bmi.n	8007754 <_fflush_r+0xc>
 8007798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800779a:	f000 f90d 	bl	80079b8 <__retarget_lock_release_recursive>
 800779e:	e7d9      	b.n	8007754 <_fflush_r+0xc>
 80077a0:	4b05      	ldr	r3, [pc, #20]	; (80077b8 <_fflush_r+0x70>)
 80077a2:	429c      	cmp	r4, r3
 80077a4:	d101      	bne.n	80077aa <_fflush_r+0x62>
 80077a6:	68ac      	ldr	r4, [r5, #8]
 80077a8:	e7df      	b.n	800776a <_fflush_r+0x22>
 80077aa:	4b04      	ldr	r3, [pc, #16]	; (80077bc <_fflush_r+0x74>)
 80077ac:	429c      	cmp	r4, r3
 80077ae:	bf08      	it	eq
 80077b0:	68ec      	ldreq	r4, [r5, #12]
 80077b2:	e7da      	b.n	800776a <_fflush_r+0x22>
 80077b4:	08008d00 	.word	0x08008d00
 80077b8:	08008d20 	.word	0x08008d20
 80077bc:	08008ce0 	.word	0x08008ce0

080077c0 <std>:
 80077c0:	2300      	movs	r3, #0
 80077c2:	b510      	push	{r4, lr}
 80077c4:	4604      	mov	r4, r0
 80077c6:	e9c0 3300 	strd	r3, r3, [r0]
 80077ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077ce:	6083      	str	r3, [r0, #8]
 80077d0:	8181      	strh	r1, [r0, #12]
 80077d2:	6643      	str	r3, [r0, #100]	; 0x64
 80077d4:	81c2      	strh	r2, [r0, #14]
 80077d6:	6183      	str	r3, [r0, #24]
 80077d8:	4619      	mov	r1, r3
 80077da:	2208      	movs	r2, #8
 80077dc:	305c      	adds	r0, #92	; 0x5c
 80077de:	f7fe faf1 	bl	8005dc4 <memset>
 80077e2:	4b05      	ldr	r3, [pc, #20]	; (80077f8 <std+0x38>)
 80077e4:	6263      	str	r3, [r4, #36]	; 0x24
 80077e6:	4b05      	ldr	r3, [pc, #20]	; (80077fc <std+0x3c>)
 80077e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80077ea:	4b05      	ldr	r3, [pc, #20]	; (8007800 <std+0x40>)
 80077ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077ee:	4b05      	ldr	r3, [pc, #20]	; (8007804 <std+0x44>)
 80077f0:	6224      	str	r4, [r4, #32]
 80077f2:	6323      	str	r3, [r4, #48]	; 0x30
 80077f4:	bd10      	pop	{r4, pc}
 80077f6:	bf00      	nop
 80077f8:	08008679 	.word	0x08008679
 80077fc:	0800869b 	.word	0x0800869b
 8007800:	080086d3 	.word	0x080086d3
 8007804:	080086f7 	.word	0x080086f7

08007808 <_cleanup_r>:
 8007808:	4901      	ldr	r1, [pc, #4]	; (8007810 <_cleanup_r+0x8>)
 800780a:	f000 b8af 	b.w	800796c <_fwalk_reent>
 800780e:	bf00      	nop
 8007810:	08007749 	.word	0x08007749

08007814 <__sfmoreglue>:
 8007814:	b570      	push	{r4, r5, r6, lr}
 8007816:	2268      	movs	r2, #104	; 0x68
 8007818:	1e4d      	subs	r5, r1, #1
 800781a:	4355      	muls	r5, r2
 800781c:	460e      	mov	r6, r1
 800781e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007822:	f000 fd4b 	bl	80082bc <_malloc_r>
 8007826:	4604      	mov	r4, r0
 8007828:	b140      	cbz	r0, 800783c <__sfmoreglue+0x28>
 800782a:	2100      	movs	r1, #0
 800782c:	e9c0 1600 	strd	r1, r6, [r0]
 8007830:	300c      	adds	r0, #12
 8007832:	60a0      	str	r0, [r4, #8]
 8007834:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007838:	f7fe fac4 	bl	8005dc4 <memset>
 800783c:	4620      	mov	r0, r4
 800783e:	bd70      	pop	{r4, r5, r6, pc}

08007840 <__sfp_lock_acquire>:
 8007840:	4801      	ldr	r0, [pc, #4]	; (8007848 <__sfp_lock_acquire+0x8>)
 8007842:	f000 b8b8 	b.w	80079b6 <__retarget_lock_acquire_recursive>
 8007846:	bf00      	nop
 8007848:	20000359 	.word	0x20000359

0800784c <__sfp_lock_release>:
 800784c:	4801      	ldr	r0, [pc, #4]	; (8007854 <__sfp_lock_release+0x8>)
 800784e:	f000 b8b3 	b.w	80079b8 <__retarget_lock_release_recursive>
 8007852:	bf00      	nop
 8007854:	20000359 	.word	0x20000359

08007858 <__sinit_lock_acquire>:
 8007858:	4801      	ldr	r0, [pc, #4]	; (8007860 <__sinit_lock_acquire+0x8>)
 800785a:	f000 b8ac 	b.w	80079b6 <__retarget_lock_acquire_recursive>
 800785e:	bf00      	nop
 8007860:	2000035a 	.word	0x2000035a

08007864 <__sinit_lock_release>:
 8007864:	4801      	ldr	r0, [pc, #4]	; (800786c <__sinit_lock_release+0x8>)
 8007866:	f000 b8a7 	b.w	80079b8 <__retarget_lock_release_recursive>
 800786a:	bf00      	nop
 800786c:	2000035a 	.word	0x2000035a

08007870 <__sinit>:
 8007870:	b510      	push	{r4, lr}
 8007872:	4604      	mov	r4, r0
 8007874:	f7ff fff0 	bl	8007858 <__sinit_lock_acquire>
 8007878:	69a3      	ldr	r3, [r4, #24]
 800787a:	b11b      	cbz	r3, 8007884 <__sinit+0x14>
 800787c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007880:	f7ff bff0 	b.w	8007864 <__sinit_lock_release>
 8007884:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007888:	6523      	str	r3, [r4, #80]	; 0x50
 800788a:	4b13      	ldr	r3, [pc, #76]	; (80078d8 <__sinit+0x68>)
 800788c:	4a13      	ldr	r2, [pc, #76]	; (80078dc <__sinit+0x6c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	62a2      	str	r2, [r4, #40]	; 0x28
 8007892:	42a3      	cmp	r3, r4
 8007894:	bf04      	itt	eq
 8007896:	2301      	moveq	r3, #1
 8007898:	61a3      	streq	r3, [r4, #24]
 800789a:	4620      	mov	r0, r4
 800789c:	f000 f820 	bl	80078e0 <__sfp>
 80078a0:	6060      	str	r0, [r4, #4]
 80078a2:	4620      	mov	r0, r4
 80078a4:	f000 f81c 	bl	80078e0 <__sfp>
 80078a8:	60a0      	str	r0, [r4, #8]
 80078aa:	4620      	mov	r0, r4
 80078ac:	f000 f818 	bl	80078e0 <__sfp>
 80078b0:	2200      	movs	r2, #0
 80078b2:	60e0      	str	r0, [r4, #12]
 80078b4:	2104      	movs	r1, #4
 80078b6:	6860      	ldr	r0, [r4, #4]
 80078b8:	f7ff ff82 	bl	80077c0 <std>
 80078bc:	68a0      	ldr	r0, [r4, #8]
 80078be:	2201      	movs	r2, #1
 80078c0:	2109      	movs	r1, #9
 80078c2:	f7ff ff7d 	bl	80077c0 <std>
 80078c6:	68e0      	ldr	r0, [r4, #12]
 80078c8:	2202      	movs	r2, #2
 80078ca:	2112      	movs	r1, #18
 80078cc:	f7ff ff78 	bl	80077c0 <std>
 80078d0:	2301      	movs	r3, #1
 80078d2:	61a3      	str	r3, [r4, #24]
 80078d4:	e7d2      	b.n	800787c <__sinit+0xc>
 80078d6:	bf00      	nop
 80078d8:	08008c18 	.word	0x08008c18
 80078dc:	08007809 	.word	0x08007809

080078e0 <__sfp>:
 80078e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e2:	4607      	mov	r7, r0
 80078e4:	f7ff ffac 	bl	8007840 <__sfp_lock_acquire>
 80078e8:	4b1e      	ldr	r3, [pc, #120]	; (8007964 <__sfp+0x84>)
 80078ea:	681e      	ldr	r6, [r3, #0]
 80078ec:	69b3      	ldr	r3, [r6, #24]
 80078ee:	b913      	cbnz	r3, 80078f6 <__sfp+0x16>
 80078f0:	4630      	mov	r0, r6
 80078f2:	f7ff ffbd 	bl	8007870 <__sinit>
 80078f6:	3648      	adds	r6, #72	; 0x48
 80078f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	d503      	bpl.n	8007908 <__sfp+0x28>
 8007900:	6833      	ldr	r3, [r6, #0]
 8007902:	b30b      	cbz	r3, 8007948 <__sfp+0x68>
 8007904:	6836      	ldr	r6, [r6, #0]
 8007906:	e7f7      	b.n	80078f8 <__sfp+0x18>
 8007908:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800790c:	b9d5      	cbnz	r5, 8007944 <__sfp+0x64>
 800790e:	4b16      	ldr	r3, [pc, #88]	; (8007968 <__sfp+0x88>)
 8007910:	60e3      	str	r3, [r4, #12]
 8007912:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007916:	6665      	str	r5, [r4, #100]	; 0x64
 8007918:	f000 f84c 	bl	80079b4 <__retarget_lock_init_recursive>
 800791c:	f7ff ff96 	bl	800784c <__sfp_lock_release>
 8007920:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007924:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007928:	6025      	str	r5, [r4, #0]
 800792a:	61a5      	str	r5, [r4, #24]
 800792c:	2208      	movs	r2, #8
 800792e:	4629      	mov	r1, r5
 8007930:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007934:	f7fe fa46 	bl	8005dc4 <memset>
 8007938:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800793c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007940:	4620      	mov	r0, r4
 8007942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007944:	3468      	adds	r4, #104	; 0x68
 8007946:	e7d9      	b.n	80078fc <__sfp+0x1c>
 8007948:	2104      	movs	r1, #4
 800794a:	4638      	mov	r0, r7
 800794c:	f7ff ff62 	bl	8007814 <__sfmoreglue>
 8007950:	4604      	mov	r4, r0
 8007952:	6030      	str	r0, [r6, #0]
 8007954:	2800      	cmp	r0, #0
 8007956:	d1d5      	bne.n	8007904 <__sfp+0x24>
 8007958:	f7ff ff78 	bl	800784c <__sfp_lock_release>
 800795c:	230c      	movs	r3, #12
 800795e:	603b      	str	r3, [r7, #0]
 8007960:	e7ee      	b.n	8007940 <__sfp+0x60>
 8007962:	bf00      	nop
 8007964:	08008c18 	.word	0x08008c18
 8007968:	ffff0001 	.word	0xffff0001

0800796c <_fwalk_reent>:
 800796c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007970:	4606      	mov	r6, r0
 8007972:	4688      	mov	r8, r1
 8007974:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007978:	2700      	movs	r7, #0
 800797a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800797e:	f1b9 0901 	subs.w	r9, r9, #1
 8007982:	d505      	bpl.n	8007990 <_fwalk_reent+0x24>
 8007984:	6824      	ldr	r4, [r4, #0]
 8007986:	2c00      	cmp	r4, #0
 8007988:	d1f7      	bne.n	800797a <_fwalk_reent+0xe>
 800798a:	4638      	mov	r0, r7
 800798c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007990:	89ab      	ldrh	r3, [r5, #12]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d907      	bls.n	80079a6 <_fwalk_reent+0x3a>
 8007996:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800799a:	3301      	adds	r3, #1
 800799c:	d003      	beq.n	80079a6 <_fwalk_reent+0x3a>
 800799e:	4629      	mov	r1, r5
 80079a0:	4630      	mov	r0, r6
 80079a2:	47c0      	blx	r8
 80079a4:	4307      	orrs	r7, r0
 80079a6:	3568      	adds	r5, #104	; 0x68
 80079a8:	e7e9      	b.n	800797e <_fwalk_reent+0x12>
	...

080079ac <_localeconv_r>:
 80079ac:	4800      	ldr	r0, [pc, #0]	; (80079b0 <_localeconv_r+0x4>)
 80079ae:	4770      	bx	lr
 80079b0:	20000164 	.word	0x20000164

080079b4 <__retarget_lock_init_recursive>:
 80079b4:	4770      	bx	lr

080079b6 <__retarget_lock_acquire_recursive>:
 80079b6:	4770      	bx	lr

080079b8 <__retarget_lock_release_recursive>:
 80079b8:	4770      	bx	lr

080079ba <__swhatbuf_r>:
 80079ba:	b570      	push	{r4, r5, r6, lr}
 80079bc:	460e      	mov	r6, r1
 80079be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c2:	2900      	cmp	r1, #0
 80079c4:	b096      	sub	sp, #88	; 0x58
 80079c6:	4614      	mov	r4, r2
 80079c8:	461d      	mov	r5, r3
 80079ca:	da08      	bge.n	80079de <__swhatbuf_r+0x24>
 80079cc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	602a      	str	r2, [r5, #0]
 80079d4:	061a      	lsls	r2, r3, #24
 80079d6:	d410      	bmi.n	80079fa <__swhatbuf_r+0x40>
 80079d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079dc:	e00e      	b.n	80079fc <__swhatbuf_r+0x42>
 80079de:	466a      	mov	r2, sp
 80079e0:	f000 fee0 	bl	80087a4 <_fstat_r>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	dbf1      	blt.n	80079cc <__swhatbuf_r+0x12>
 80079e8:	9a01      	ldr	r2, [sp, #4]
 80079ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80079ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80079f2:	425a      	negs	r2, r3
 80079f4:	415a      	adcs	r2, r3
 80079f6:	602a      	str	r2, [r5, #0]
 80079f8:	e7ee      	b.n	80079d8 <__swhatbuf_r+0x1e>
 80079fa:	2340      	movs	r3, #64	; 0x40
 80079fc:	2000      	movs	r0, #0
 80079fe:	6023      	str	r3, [r4, #0]
 8007a00:	b016      	add	sp, #88	; 0x58
 8007a02:	bd70      	pop	{r4, r5, r6, pc}

08007a04 <__smakebuf_r>:
 8007a04:	898b      	ldrh	r3, [r1, #12]
 8007a06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a08:	079d      	lsls	r5, r3, #30
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	d507      	bpl.n	8007a20 <__smakebuf_r+0x1c>
 8007a10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	6123      	str	r3, [r4, #16]
 8007a18:	2301      	movs	r3, #1
 8007a1a:	6163      	str	r3, [r4, #20]
 8007a1c:	b002      	add	sp, #8
 8007a1e:	bd70      	pop	{r4, r5, r6, pc}
 8007a20:	ab01      	add	r3, sp, #4
 8007a22:	466a      	mov	r2, sp
 8007a24:	f7ff ffc9 	bl	80079ba <__swhatbuf_r>
 8007a28:	9900      	ldr	r1, [sp, #0]
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	f000 fc45 	bl	80082bc <_malloc_r>
 8007a32:	b948      	cbnz	r0, 8007a48 <__smakebuf_r+0x44>
 8007a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a38:	059a      	lsls	r2, r3, #22
 8007a3a:	d4ef      	bmi.n	8007a1c <__smakebuf_r+0x18>
 8007a3c:	f023 0303 	bic.w	r3, r3, #3
 8007a40:	f043 0302 	orr.w	r3, r3, #2
 8007a44:	81a3      	strh	r3, [r4, #12]
 8007a46:	e7e3      	b.n	8007a10 <__smakebuf_r+0xc>
 8007a48:	4b0d      	ldr	r3, [pc, #52]	; (8007a80 <__smakebuf_r+0x7c>)
 8007a4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a4c:	89a3      	ldrh	r3, [r4, #12]
 8007a4e:	6020      	str	r0, [r4, #0]
 8007a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a54:	81a3      	strh	r3, [r4, #12]
 8007a56:	9b00      	ldr	r3, [sp, #0]
 8007a58:	6163      	str	r3, [r4, #20]
 8007a5a:	9b01      	ldr	r3, [sp, #4]
 8007a5c:	6120      	str	r0, [r4, #16]
 8007a5e:	b15b      	cbz	r3, 8007a78 <__smakebuf_r+0x74>
 8007a60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a64:	4630      	mov	r0, r6
 8007a66:	f000 feaf 	bl	80087c8 <_isatty_r>
 8007a6a:	b128      	cbz	r0, 8007a78 <__smakebuf_r+0x74>
 8007a6c:	89a3      	ldrh	r3, [r4, #12]
 8007a6e:	f023 0303 	bic.w	r3, r3, #3
 8007a72:	f043 0301 	orr.w	r3, r3, #1
 8007a76:	81a3      	strh	r3, [r4, #12]
 8007a78:	89a0      	ldrh	r0, [r4, #12]
 8007a7a:	4305      	orrs	r5, r0
 8007a7c:	81a5      	strh	r5, [r4, #12]
 8007a7e:	e7cd      	b.n	8007a1c <__smakebuf_r+0x18>
 8007a80:	08007809 	.word	0x08007809

08007a84 <malloc>:
 8007a84:	4b02      	ldr	r3, [pc, #8]	; (8007a90 <malloc+0xc>)
 8007a86:	4601      	mov	r1, r0
 8007a88:	6818      	ldr	r0, [r3, #0]
 8007a8a:	f000 bc17 	b.w	80082bc <_malloc_r>
 8007a8e:	bf00      	nop
 8007a90:	20000010 	.word	0x20000010

08007a94 <memcpy>:
 8007a94:	440a      	add	r2, r1
 8007a96:	4291      	cmp	r1, r2
 8007a98:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a9c:	d100      	bne.n	8007aa0 <memcpy+0xc>
 8007a9e:	4770      	bx	lr
 8007aa0:	b510      	push	{r4, lr}
 8007aa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aaa:	4291      	cmp	r1, r2
 8007aac:	d1f9      	bne.n	8007aa2 <memcpy+0xe>
 8007aae:	bd10      	pop	{r4, pc}

08007ab0 <_Balloc>:
 8007ab0:	b570      	push	{r4, r5, r6, lr}
 8007ab2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	460d      	mov	r5, r1
 8007ab8:	b976      	cbnz	r6, 8007ad8 <_Balloc+0x28>
 8007aba:	2010      	movs	r0, #16
 8007abc:	f7ff ffe2 	bl	8007a84 <malloc>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	6260      	str	r0, [r4, #36]	; 0x24
 8007ac4:	b920      	cbnz	r0, 8007ad0 <_Balloc+0x20>
 8007ac6:	4b18      	ldr	r3, [pc, #96]	; (8007b28 <_Balloc+0x78>)
 8007ac8:	4818      	ldr	r0, [pc, #96]	; (8007b2c <_Balloc+0x7c>)
 8007aca:	2166      	movs	r1, #102	; 0x66
 8007acc:	f000 fe2a 	bl	8008724 <__assert_func>
 8007ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ad4:	6006      	str	r6, [r0, #0]
 8007ad6:	60c6      	str	r6, [r0, #12]
 8007ad8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ada:	68f3      	ldr	r3, [r6, #12]
 8007adc:	b183      	cbz	r3, 8007b00 <_Balloc+0x50>
 8007ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ae6:	b9b8      	cbnz	r0, 8007b18 <_Balloc+0x68>
 8007ae8:	2101      	movs	r1, #1
 8007aea:	fa01 f605 	lsl.w	r6, r1, r5
 8007aee:	1d72      	adds	r2, r6, #5
 8007af0:	0092      	lsls	r2, r2, #2
 8007af2:	4620      	mov	r0, r4
 8007af4:	f000 fb60 	bl	80081b8 <_calloc_r>
 8007af8:	b160      	cbz	r0, 8007b14 <_Balloc+0x64>
 8007afa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007afe:	e00e      	b.n	8007b1e <_Balloc+0x6e>
 8007b00:	2221      	movs	r2, #33	; 0x21
 8007b02:	2104      	movs	r1, #4
 8007b04:	4620      	mov	r0, r4
 8007b06:	f000 fb57 	bl	80081b8 <_calloc_r>
 8007b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b0c:	60f0      	str	r0, [r6, #12]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e4      	bne.n	8007ade <_Balloc+0x2e>
 8007b14:	2000      	movs	r0, #0
 8007b16:	bd70      	pop	{r4, r5, r6, pc}
 8007b18:	6802      	ldr	r2, [r0, #0]
 8007b1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b24:	e7f7      	b.n	8007b16 <_Balloc+0x66>
 8007b26:	bf00      	nop
 8007b28:	08008c5d 	.word	0x08008c5d
 8007b2c:	08008d40 	.word	0x08008d40

08007b30 <_Bfree>:
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b34:	4605      	mov	r5, r0
 8007b36:	460c      	mov	r4, r1
 8007b38:	b976      	cbnz	r6, 8007b58 <_Bfree+0x28>
 8007b3a:	2010      	movs	r0, #16
 8007b3c:	f7ff ffa2 	bl	8007a84 <malloc>
 8007b40:	4602      	mov	r2, r0
 8007b42:	6268      	str	r0, [r5, #36]	; 0x24
 8007b44:	b920      	cbnz	r0, 8007b50 <_Bfree+0x20>
 8007b46:	4b09      	ldr	r3, [pc, #36]	; (8007b6c <_Bfree+0x3c>)
 8007b48:	4809      	ldr	r0, [pc, #36]	; (8007b70 <_Bfree+0x40>)
 8007b4a:	218a      	movs	r1, #138	; 0x8a
 8007b4c:	f000 fdea 	bl	8008724 <__assert_func>
 8007b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b54:	6006      	str	r6, [r0, #0]
 8007b56:	60c6      	str	r6, [r0, #12]
 8007b58:	b13c      	cbz	r4, 8007b6a <_Bfree+0x3a>
 8007b5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b5c:	6862      	ldr	r2, [r4, #4]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b64:	6021      	str	r1, [r4, #0]
 8007b66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b6a:	bd70      	pop	{r4, r5, r6, pc}
 8007b6c:	08008c5d 	.word	0x08008c5d
 8007b70:	08008d40 	.word	0x08008d40

08007b74 <__multadd>:
 8007b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b78:	690d      	ldr	r5, [r1, #16]
 8007b7a:	4607      	mov	r7, r0
 8007b7c:	460c      	mov	r4, r1
 8007b7e:	461e      	mov	r6, r3
 8007b80:	f101 0c14 	add.w	ip, r1, #20
 8007b84:	2000      	movs	r0, #0
 8007b86:	f8dc 3000 	ldr.w	r3, [ip]
 8007b8a:	b299      	uxth	r1, r3
 8007b8c:	fb02 6101 	mla	r1, r2, r1, r6
 8007b90:	0c1e      	lsrs	r6, r3, #16
 8007b92:	0c0b      	lsrs	r3, r1, #16
 8007b94:	fb02 3306 	mla	r3, r2, r6, r3
 8007b98:	b289      	uxth	r1, r1
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ba0:	4285      	cmp	r5, r0
 8007ba2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ba6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007baa:	dcec      	bgt.n	8007b86 <__multadd+0x12>
 8007bac:	b30e      	cbz	r6, 8007bf2 <__multadd+0x7e>
 8007bae:	68a3      	ldr	r3, [r4, #8]
 8007bb0:	42ab      	cmp	r3, r5
 8007bb2:	dc19      	bgt.n	8007be8 <__multadd+0x74>
 8007bb4:	6861      	ldr	r1, [r4, #4]
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	3101      	adds	r1, #1
 8007bba:	f7ff ff79 	bl	8007ab0 <_Balloc>
 8007bbe:	4680      	mov	r8, r0
 8007bc0:	b928      	cbnz	r0, 8007bce <__multadd+0x5a>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <__multadd+0x84>)
 8007bc6:	480d      	ldr	r0, [pc, #52]	; (8007bfc <__multadd+0x88>)
 8007bc8:	21b5      	movs	r1, #181	; 0xb5
 8007bca:	f000 fdab 	bl	8008724 <__assert_func>
 8007bce:	6922      	ldr	r2, [r4, #16]
 8007bd0:	3202      	adds	r2, #2
 8007bd2:	f104 010c 	add.w	r1, r4, #12
 8007bd6:	0092      	lsls	r2, r2, #2
 8007bd8:	300c      	adds	r0, #12
 8007bda:	f7ff ff5b 	bl	8007a94 <memcpy>
 8007bde:	4621      	mov	r1, r4
 8007be0:	4638      	mov	r0, r7
 8007be2:	f7ff ffa5 	bl	8007b30 <_Bfree>
 8007be6:	4644      	mov	r4, r8
 8007be8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bec:	3501      	adds	r5, #1
 8007bee:	615e      	str	r6, [r3, #20]
 8007bf0:	6125      	str	r5, [r4, #16]
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf8:	08008ccf 	.word	0x08008ccf
 8007bfc:	08008d40 	.word	0x08008d40

08007c00 <__hi0bits>:
 8007c00:	0c03      	lsrs	r3, r0, #16
 8007c02:	041b      	lsls	r3, r3, #16
 8007c04:	b9d3      	cbnz	r3, 8007c3c <__hi0bits+0x3c>
 8007c06:	0400      	lsls	r0, r0, #16
 8007c08:	2310      	movs	r3, #16
 8007c0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c0e:	bf04      	itt	eq
 8007c10:	0200      	lsleq	r0, r0, #8
 8007c12:	3308      	addeq	r3, #8
 8007c14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c18:	bf04      	itt	eq
 8007c1a:	0100      	lsleq	r0, r0, #4
 8007c1c:	3304      	addeq	r3, #4
 8007c1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c22:	bf04      	itt	eq
 8007c24:	0080      	lsleq	r0, r0, #2
 8007c26:	3302      	addeq	r3, #2
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	db05      	blt.n	8007c38 <__hi0bits+0x38>
 8007c2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007c30:	f103 0301 	add.w	r3, r3, #1
 8007c34:	bf08      	it	eq
 8007c36:	2320      	moveq	r3, #32
 8007c38:	4618      	mov	r0, r3
 8007c3a:	4770      	bx	lr
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	e7e4      	b.n	8007c0a <__hi0bits+0xa>

08007c40 <__lo0bits>:
 8007c40:	6803      	ldr	r3, [r0, #0]
 8007c42:	f013 0207 	ands.w	r2, r3, #7
 8007c46:	4601      	mov	r1, r0
 8007c48:	d00b      	beq.n	8007c62 <__lo0bits+0x22>
 8007c4a:	07da      	lsls	r2, r3, #31
 8007c4c:	d423      	bmi.n	8007c96 <__lo0bits+0x56>
 8007c4e:	0798      	lsls	r0, r3, #30
 8007c50:	bf49      	itett	mi
 8007c52:	085b      	lsrmi	r3, r3, #1
 8007c54:	089b      	lsrpl	r3, r3, #2
 8007c56:	2001      	movmi	r0, #1
 8007c58:	600b      	strmi	r3, [r1, #0]
 8007c5a:	bf5c      	itt	pl
 8007c5c:	600b      	strpl	r3, [r1, #0]
 8007c5e:	2002      	movpl	r0, #2
 8007c60:	4770      	bx	lr
 8007c62:	b298      	uxth	r0, r3
 8007c64:	b9a8      	cbnz	r0, 8007c92 <__lo0bits+0x52>
 8007c66:	0c1b      	lsrs	r3, r3, #16
 8007c68:	2010      	movs	r0, #16
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	b90a      	cbnz	r2, 8007c72 <__lo0bits+0x32>
 8007c6e:	3008      	adds	r0, #8
 8007c70:	0a1b      	lsrs	r3, r3, #8
 8007c72:	071a      	lsls	r2, r3, #28
 8007c74:	bf04      	itt	eq
 8007c76:	091b      	lsreq	r3, r3, #4
 8007c78:	3004      	addeq	r0, #4
 8007c7a:	079a      	lsls	r2, r3, #30
 8007c7c:	bf04      	itt	eq
 8007c7e:	089b      	lsreq	r3, r3, #2
 8007c80:	3002      	addeq	r0, #2
 8007c82:	07da      	lsls	r2, r3, #31
 8007c84:	d403      	bmi.n	8007c8e <__lo0bits+0x4e>
 8007c86:	085b      	lsrs	r3, r3, #1
 8007c88:	f100 0001 	add.w	r0, r0, #1
 8007c8c:	d005      	beq.n	8007c9a <__lo0bits+0x5a>
 8007c8e:	600b      	str	r3, [r1, #0]
 8007c90:	4770      	bx	lr
 8007c92:	4610      	mov	r0, r2
 8007c94:	e7e9      	b.n	8007c6a <__lo0bits+0x2a>
 8007c96:	2000      	movs	r0, #0
 8007c98:	4770      	bx	lr
 8007c9a:	2020      	movs	r0, #32
 8007c9c:	4770      	bx	lr
	...

08007ca0 <__i2b>:
 8007ca0:	b510      	push	{r4, lr}
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	f7ff ff03 	bl	8007ab0 <_Balloc>
 8007caa:	4602      	mov	r2, r0
 8007cac:	b928      	cbnz	r0, 8007cba <__i2b+0x1a>
 8007cae:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <__i2b+0x24>)
 8007cb0:	4805      	ldr	r0, [pc, #20]	; (8007cc8 <__i2b+0x28>)
 8007cb2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007cb6:	f000 fd35 	bl	8008724 <__assert_func>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	6144      	str	r4, [r0, #20]
 8007cbe:	6103      	str	r3, [r0, #16]
 8007cc0:	bd10      	pop	{r4, pc}
 8007cc2:	bf00      	nop
 8007cc4:	08008ccf 	.word	0x08008ccf
 8007cc8:	08008d40 	.word	0x08008d40

08007ccc <__multiply>:
 8007ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd0:	4691      	mov	r9, r2
 8007cd2:	690a      	ldr	r2, [r1, #16]
 8007cd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	bfb8      	it	lt
 8007cdc:	460b      	movlt	r3, r1
 8007cde:	460c      	mov	r4, r1
 8007ce0:	bfbc      	itt	lt
 8007ce2:	464c      	movlt	r4, r9
 8007ce4:	4699      	movlt	r9, r3
 8007ce6:	6927      	ldr	r7, [r4, #16]
 8007ce8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007cec:	68a3      	ldr	r3, [r4, #8]
 8007cee:	6861      	ldr	r1, [r4, #4]
 8007cf0:	eb07 060a 	add.w	r6, r7, sl
 8007cf4:	42b3      	cmp	r3, r6
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	bfb8      	it	lt
 8007cfa:	3101      	addlt	r1, #1
 8007cfc:	f7ff fed8 	bl	8007ab0 <_Balloc>
 8007d00:	b930      	cbnz	r0, 8007d10 <__multiply+0x44>
 8007d02:	4602      	mov	r2, r0
 8007d04:	4b44      	ldr	r3, [pc, #272]	; (8007e18 <__multiply+0x14c>)
 8007d06:	4845      	ldr	r0, [pc, #276]	; (8007e1c <__multiply+0x150>)
 8007d08:	f240 115d 	movw	r1, #349	; 0x15d
 8007d0c:	f000 fd0a 	bl	8008724 <__assert_func>
 8007d10:	f100 0514 	add.w	r5, r0, #20
 8007d14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d18:	462b      	mov	r3, r5
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	4543      	cmp	r3, r8
 8007d1e:	d321      	bcc.n	8007d64 <__multiply+0x98>
 8007d20:	f104 0314 	add.w	r3, r4, #20
 8007d24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007d28:	f109 0314 	add.w	r3, r9, #20
 8007d2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007d30:	9202      	str	r2, [sp, #8]
 8007d32:	1b3a      	subs	r2, r7, r4
 8007d34:	3a15      	subs	r2, #21
 8007d36:	f022 0203 	bic.w	r2, r2, #3
 8007d3a:	3204      	adds	r2, #4
 8007d3c:	f104 0115 	add.w	r1, r4, #21
 8007d40:	428f      	cmp	r7, r1
 8007d42:	bf38      	it	cc
 8007d44:	2204      	movcc	r2, #4
 8007d46:	9201      	str	r2, [sp, #4]
 8007d48:	9a02      	ldr	r2, [sp, #8]
 8007d4a:	9303      	str	r3, [sp, #12]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d80c      	bhi.n	8007d6a <__multiply+0x9e>
 8007d50:	2e00      	cmp	r6, #0
 8007d52:	dd03      	ble.n	8007d5c <__multiply+0x90>
 8007d54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d05a      	beq.n	8007e12 <__multiply+0x146>
 8007d5c:	6106      	str	r6, [r0, #16]
 8007d5e:	b005      	add	sp, #20
 8007d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d64:	f843 2b04 	str.w	r2, [r3], #4
 8007d68:	e7d8      	b.n	8007d1c <__multiply+0x50>
 8007d6a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d6e:	f1ba 0f00 	cmp.w	sl, #0
 8007d72:	d024      	beq.n	8007dbe <__multiply+0xf2>
 8007d74:	f104 0e14 	add.w	lr, r4, #20
 8007d78:	46a9      	mov	r9, r5
 8007d7a:	f04f 0c00 	mov.w	ip, #0
 8007d7e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d82:	f8d9 1000 	ldr.w	r1, [r9]
 8007d86:	fa1f fb82 	uxth.w	fp, r2
 8007d8a:	b289      	uxth	r1, r1
 8007d8c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007d94:	f8d9 2000 	ldr.w	r2, [r9]
 8007d98:	4461      	add	r1, ip
 8007d9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d9e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007da2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007da6:	b289      	uxth	r1, r1
 8007da8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007dac:	4577      	cmp	r7, lr
 8007dae:	f849 1b04 	str.w	r1, [r9], #4
 8007db2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007db6:	d8e2      	bhi.n	8007d7e <__multiply+0xb2>
 8007db8:	9a01      	ldr	r2, [sp, #4]
 8007dba:	f845 c002 	str.w	ip, [r5, r2]
 8007dbe:	9a03      	ldr	r2, [sp, #12]
 8007dc0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	f1b9 0f00 	cmp.w	r9, #0
 8007dca:	d020      	beq.n	8007e0e <__multiply+0x142>
 8007dcc:	6829      	ldr	r1, [r5, #0]
 8007dce:	f104 0c14 	add.w	ip, r4, #20
 8007dd2:	46ae      	mov	lr, r5
 8007dd4:	f04f 0a00 	mov.w	sl, #0
 8007dd8:	f8bc b000 	ldrh.w	fp, [ip]
 8007ddc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007de0:	fb09 220b 	mla	r2, r9, fp, r2
 8007de4:	4492      	add	sl, r2
 8007de6:	b289      	uxth	r1, r1
 8007de8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007dec:	f84e 1b04 	str.w	r1, [lr], #4
 8007df0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007df4:	f8be 1000 	ldrh.w	r1, [lr]
 8007df8:	0c12      	lsrs	r2, r2, #16
 8007dfa:	fb09 1102 	mla	r1, r9, r2, r1
 8007dfe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007e02:	4567      	cmp	r7, ip
 8007e04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e08:	d8e6      	bhi.n	8007dd8 <__multiply+0x10c>
 8007e0a:	9a01      	ldr	r2, [sp, #4]
 8007e0c:	50a9      	str	r1, [r5, r2]
 8007e0e:	3504      	adds	r5, #4
 8007e10:	e79a      	b.n	8007d48 <__multiply+0x7c>
 8007e12:	3e01      	subs	r6, #1
 8007e14:	e79c      	b.n	8007d50 <__multiply+0x84>
 8007e16:	bf00      	nop
 8007e18:	08008ccf 	.word	0x08008ccf
 8007e1c:	08008d40 	.word	0x08008d40

08007e20 <__pow5mult>:
 8007e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e24:	4615      	mov	r5, r2
 8007e26:	f012 0203 	ands.w	r2, r2, #3
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	460f      	mov	r7, r1
 8007e2e:	d007      	beq.n	8007e40 <__pow5mult+0x20>
 8007e30:	4c25      	ldr	r4, [pc, #148]	; (8007ec8 <__pow5mult+0xa8>)
 8007e32:	3a01      	subs	r2, #1
 8007e34:	2300      	movs	r3, #0
 8007e36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e3a:	f7ff fe9b 	bl	8007b74 <__multadd>
 8007e3e:	4607      	mov	r7, r0
 8007e40:	10ad      	asrs	r5, r5, #2
 8007e42:	d03d      	beq.n	8007ec0 <__pow5mult+0xa0>
 8007e44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e46:	b97c      	cbnz	r4, 8007e68 <__pow5mult+0x48>
 8007e48:	2010      	movs	r0, #16
 8007e4a:	f7ff fe1b 	bl	8007a84 <malloc>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	6270      	str	r0, [r6, #36]	; 0x24
 8007e52:	b928      	cbnz	r0, 8007e60 <__pow5mult+0x40>
 8007e54:	4b1d      	ldr	r3, [pc, #116]	; (8007ecc <__pow5mult+0xac>)
 8007e56:	481e      	ldr	r0, [pc, #120]	; (8007ed0 <__pow5mult+0xb0>)
 8007e58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e5c:	f000 fc62 	bl	8008724 <__assert_func>
 8007e60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e64:	6004      	str	r4, [r0, #0]
 8007e66:	60c4      	str	r4, [r0, #12]
 8007e68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e70:	b94c      	cbnz	r4, 8007e86 <__pow5mult+0x66>
 8007e72:	f240 2171 	movw	r1, #625	; 0x271
 8007e76:	4630      	mov	r0, r6
 8007e78:	f7ff ff12 	bl	8007ca0 <__i2b>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e82:	4604      	mov	r4, r0
 8007e84:	6003      	str	r3, [r0, #0]
 8007e86:	f04f 0900 	mov.w	r9, #0
 8007e8a:	07eb      	lsls	r3, r5, #31
 8007e8c:	d50a      	bpl.n	8007ea4 <__pow5mult+0x84>
 8007e8e:	4639      	mov	r1, r7
 8007e90:	4622      	mov	r2, r4
 8007e92:	4630      	mov	r0, r6
 8007e94:	f7ff ff1a 	bl	8007ccc <__multiply>
 8007e98:	4639      	mov	r1, r7
 8007e9a:	4680      	mov	r8, r0
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f7ff fe47 	bl	8007b30 <_Bfree>
 8007ea2:	4647      	mov	r7, r8
 8007ea4:	106d      	asrs	r5, r5, #1
 8007ea6:	d00b      	beq.n	8007ec0 <__pow5mult+0xa0>
 8007ea8:	6820      	ldr	r0, [r4, #0]
 8007eaa:	b938      	cbnz	r0, 8007ebc <__pow5mult+0x9c>
 8007eac:	4622      	mov	r2, r4
 8007eae:	4621      	mov	r1, r4
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	f7ff ff0b 	bl	8007ccc <__multiply>
 8007eb6:	6020      	str	r0, [r4, #0]
 8007eb8:	f8c0 9000 	str.w	r9, [r0]
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	e7e4      	b.n	8007e8a <__pow5mult+0x6a>
 8007ec0:	4638      	mov	r0, r7
 8007ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ec6:	bf00      	nop
 8007ec8:	08008e90 	.word	0x08008e90
 8007ecc:	08008c5d 	.word	0x08008c5d
 8007ed0:	08008d40 	.word	0x08008d40

08007ed4 <__lshift>:
 8007ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed8:	460c      	mov	r4, r1
 8007eda:	6849      	ldr	r1, [r1, #4]
 8007edc:	6923      	ldr	r3, [r4, #16]
 8007ede:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ee2:	68a3      	ldr	r3, [r4, #8]
 8007ee4:	4607      	mov	r7, r0
 8007ee6:	4691      	mov	r9, r2
 8007ee8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007eec:	f108 0601 	add.w	r6, r8, #1
 8007ef0:	42b3      	cmp	r3, r6
 8007ef2:	db0b      	blt.n	8007f0c <__lshift+0x38>
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	f7ff fddb 	bl	8007ab0 <_Balloc>
 8007efa:	4605      	mov	r5, r0
 8007efc:	b948      	cbnz	r0, 8007f12 <__lshift+0x3e>
 8007efe:	4602      	mov	r2, r0
 8007f00:	4b2a      	ldr	r3, [pc, #168]	; (8007fac <__lshift+0xd8>)
 8007f02:	482b      	ldr	r0, [pc, #172]	; (8007fb0 <__lshift+0xdc>)
 8007f04:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007f08:	f000 fc0c 	bl	8008724 <__assert_func>
 8007f0c:	3101      	adds	r1, #1
 8007f0e:	005b      	lsls	r3, r3, #1
 8007f10:	e7ee      	b.n	8007ef0 <__lshift+0x1c>
 8007f12:	2300      	movs	r3, #0
 8007f14:	f100 0114 	add.w	r1, r0, #20
 8007f18:	f100 0210 	add.w	r2, r0, #16
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	4553      	cmp	r3, sl
 8007f20:	db37      	blt.n	8007f92 <__lshift+0xbe>
 8007f22:	6920      	ldr	r0, [r4, #16]
 8007f24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f28:	f104 0314 	add.w	r3, r4, #20
 8007f2c:	f019 091f 	ands.w	r9, r9, #31
 8007f30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007f38:	d02f      	beq.n	8007f9a <__lshift+0xc6>
 8007f3a:	f1c9 0e20 	rsb	lr, r9, #32
 8007f3e:	468a      	mov	sl, r1
 8007f40:	f04f 0c00 	mov.w	ip, #0
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	fa02 f209 	lsl.w	r2, r2, r9
 8007f4a:	ea42 020c 	orr.w	r2, r2, ip
 8007f4e:	f84a 2b04 	str.w	r2, [sl], #4
 8007f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f56:	4298      	cmp	r0, r3
 8007f58:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007f5c:	d8f2      	bhi.n	8007f44 <__lshift+0x70>
 8007f5e:	1b03      	subs	r3, r0, r4
 8007f60:	3b15      	subs	r3, #21
 8007f62:	f023 0303 	bic.w	r3, r3, #3
 8007f66:	3304      	adds	r3, #4
 8007f68:	f104 0215 	add.w	r2, r4, #21
 8007f6c:	4290      	cmp	r0, r2
 8007f6e:	bf38      	it	cc
 8007f70:	2304      	movcc	r3, #4
 8007f72:	f841 c003 	str.w	ip, [r1, r3]
 8007f76:	f1bc 0f00 	cmp.w	ip, #0
 8007f7a:	d001      	beq.n	8007f80 <__lshift+0xac>
 8007f7c:	f108 0602 	add.w	r6, r8, #2
 8007f80:	3e01      	subs	r6, #1
 8007f82:	4638      	mov	r0, r7
 8007f84:	612e      	str	r6, [r5, #16]
 8007f86:	4621      	mov	r1, r4
 8007f88:	f7ff fdd2 	bl	8007b30 <_Bfree>
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f92:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f96:	3301      	adds	r3, #1
 8007f98:	e7c1      	b.n	8007f1e <__lshift+0x4a>
 8007f9a:	3904      	subs	r1, #4
 8007f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fa0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fa4:	4298      	cmp	r0, r3
 8007fa6:	d8f9      	bhi.n	8007f9c <__lshift+0xc8>
 8007fa8:	e7ea      	b.n	8007f80 <__lshift+0xac>
 8007faa:	bf00      	nop
 8007fac:	08008ccf 	.word	0x08008ccf
 8007fb0:	08008d40 	.word	0x08008d40

08007fb4 <__mcmp>:
 8007fb4:	b530      	push	{r4, r5, lr}
 8007fb6:	6902      	ldr	r2, [r0, #16]
 8007fb8:	690c      	ldr	r4, [r1, #16]
 8007fba:	1b12      	subs	r2, r2, r4
 8007fbc:	d10e      	bne.n	8007fdc <__mcmp+0x28>
 8007fbe:	f100 0314 	add.w	r3, r0, #20
 8007fc2:	3114      	adds	r1, #20
 8007fc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007fc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007fcc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007fd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007fd4:	42a5      	cmp	r5, r4
 8007fd6:	d003      	beq.n	8007fe0 <__mcmp+0x2c>
 8007fd8:	d305      	bcc.n	8007fe6 <__mcmp+0x32>
 8007fda:	2201      	movs	r2, #1
 8007fdc:	4610      	mov	r0, r2
 8007fde:	bd30      	pop	{r4, r5, pc}
 8007fe0:	4283      	cmp	r3, r0
 8007fe2:	d3f3      	bcc.n	8007fcc <__mcmp+0x18>
 8007fe4:	e7fa      	b.n	8007fdc <__mcmp+0x28>
 8007fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fea:	e7f7      	b.n	8007fdc <__mcmp+0x28>

08007fec <__mdiff>:
 8007fec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	4690      	mov	r8, r2
 8007ffa:	f7ff ffdb 	bl	8007fb4 <__mcmp>
 8007ffe:	1e05      	subs	r5, r0, #0
 8008000:	d110      	bne.n	8008024 <__mdiff+0x38>
 8008002:	4629      	mov	r1, r5
 8008004:	4630      	mov	r0, r6
 8008006:	f7ff fd53 	bl	8007ab0 <_Balloc>
 800800a:	b930      	cbnz	r0, 800801a <__mdiff+0x2e>
 800800c:	4b3a      	ldr	r3, [pc, #232]	; (80080f8 <__mdiff+0x10c>)
 800800e:	4602      	mov	r2, r0
 8008010:	f240 2132 	movw	r1, #562	; 0x232
 8008014:	4839      	ldr	r0, [pc, #228]	; (80080fc <__mdiff+0x110>)
 8008016:	f000 fb85 	bl	8008724 <__assert_func>
 800801a:	2301      	movs	r3, #1
 800801c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008020:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008024:	bfa4      	itt	ge
 8008026:	4643      	movge	r3, r8
 8008028:	46a0      	movge	r8, r4
 800802a:	4630      	mov	r0, r6
 800802c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008030:	bfa6      	itte	ge
 8008032:	461c      	movge	r4, r3
 8008034:	2500      	movge	r5, #0
 8008036:	2501      	movlt	r5, #1
 8008038:	f7ff fd3a 	bl	8007ab0 <_Balloc>
 800803c:	b920      	cbnz	r0, 8008048 <__mdiff+0x5c>
 800803e:	4b2e      	ldr	r3, [pc, #184]	; (80080f8 <__mdiff+0x10c>)
 8008040:	4602      	mov	r2, r0
 8008042:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008046:	e7e5      	b.n	8008014 <__mdiff+0x28>
 8008048:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800804c:	6926      	ldr	r6, [r4, #16]
 800804e:	60c5      	str	r5, [r0, #12]
 8008050:	f104 0914 	add.w	r9, r4, #20
 8008054:	f108 0514 	add.w	r5, r8, #20
 8008058:	f100 0e14 	add.w	lr, r0, #20
 800805c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008060:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008064:	f108 0210 	add.w	r2, r8, #16
 8008068:	46f2      	mov	sl, lr
 800806a:	2100      	movs	r1, #0
 800806c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008070:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008074:	fa1f f883 	uxth.w	r8, r3
 8008078:	fa11 f18b 	uxtah	r1, r1, fp
 800807c:	0c1b      	lsrs	r3, r3, #16
 800807e:	eba1 0808 	sub.w	r8, r1, r8
 8008082:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008086:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800808a:	fa1f f888 	uxth.w	r8, r8
 800808e:	1419      	asrs	r1, r3, #16
 8008090:	454e      	cmp	r6, r9
 8008092:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008096:	f84a 3b04 	str.w	r3, [sl], #4
 800809a:	d8e7      	bhi.n	800806c <__mdiff+0x80>
 800809c:	1b33      	subs	r3, r6, r4
 800809e:	3b15      	subs	r3, #21
 80080a0:	f023 0303 	bic.w	r3, r3, #3
 80080a4:	3304      	adds	r3, #4
 80080a6:	3415      	adds	r4, #21
 80080a8:	42a6      	cmp	r6, r4
 80080aa:	bf38      	it	cc
 80080ac:	2304      	movcc	r3, #4
 80080ae:	441d      	add	r5, r3
 80080b0:	4473      	add	r3, lr
 80080b2:	469e      	mov	lr, r3
 80080b4:	462e      	mov	r6, r5
 80080b6:	4566      	cmp	r6, ip
 80080b8:	d30e      	bcc.n	80080d8 <__mdiff+0xec>
 80080ba:	f10c 0203 	add.w	r2, ip, #3
 80080be:	1b52      	subs	r2, r2, r5
 80080c0:	f022 0203 	bic.w	r2, r2, #3
 80080c4:	3d03      	subs	r5, #3
 80080c6:	45ac      	cmp	ip, r5
 80080c8:	bf38      	it	cc
 80080ca:	2200      	movcc	r2, #0
 80080cc:	441a      	add	r2, r3
 80080ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80080d2:	b17b      	cbz	r3, 80080f4 <__mdiff+0x108>
 80080d4:	6107      	str	r7, [r0, #16]
 80080d6:	e7a3      	b.n	8008020 <__mdiff+0x34>
 80080d8:	f856 8b04 	ldr.w	r8, [r6], #4
 80080dc:	fa11 f288 	uxtah	r2, r1, r8
 80080e0:	1414      	asrs	r4, r2, #16
 80080e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80080e6:	b292      	uxth	r2, r2
 80080e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80080ec:	f84e 2b04 	str.w	r2, [lr], #4
 80080f0:	1421      	asrs	r1, r4, #16
 80080f2:	e7e0      	b.n	80080b6 <__mdiff+0xca>
 80080f4:	3f01      	subs	r7, #1
 80080f6:	e7ea      	b.n	80080ce <__mdiff+0xe2>
 80080f8:	08008ccf 	.word	0x08008ccf
 80080fc:	08008d40 	.word	0x08008d40

08008100 <__d2b>:
 8008100:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008104:	4689      	mov	r9, r1
 8008106:	2101      	movs	r1, #1
 8008108:	ec57 6b10 	vmov	r6, r7, d0
 800810c:	4690      	mov	r8, r2
 800810e:	f7ff fccf 	bl	8007ab0 <_Balloc>
 8008112:	4604      	mov	r4, r0
 8008114:	b930      	cbnz	r0, 8008124 <__d2b+0x24>
 8008116:	4602      	mov	r2, r0
 8008118:	4b25      	ldr	r3, [pc, #148]	; (80081b0 <__d2b+0xb0>)
 800811a:	4826      	ldr	r0, [pc, #152]	; (80081b4 <__d2b+0xb4>)
 800811c:	f240 310a 	movw	r1, #778	; 0x30a
 8008120:	f000 fb00 	bl	8008724 <__assert_func>
 8008124:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008128:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800812c:	bb35      	cbnz	r5, 800817c <__d2b+0x7c>
 800812e:	2e00      	cmp	r6, #0
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	d028      	beq.n	8008186 <__d2b+0x86>
 8008134:	4668      	mov	r0, sp
 8008136:	9600      	str	r6, [sp, #0]
 8008138:	f7ff fd82 	bl	8007c40 <__lo0bits>
 800813c:	9900      	ldr	r1, [sp, #0]
 800813e:	b300      	cbz	r0, 8008182 <__d2b+0x82>
 8008140:	9a01      	ldr	r2, [sp, #4]
 8008142:	f1c0 0320 	rsb	r3, r0, #32
 8008146:	fa02 f303 	lsl.w	r3, r2, r3
 800814a:	430b      	orrs	r3, r1
 800814c:	40c2      	lsrs	r2, r0
 800814e:	6163      	str	r3, [r4, #20]
 8008150:	9201      	str	r2, [sp, #4]
 8008152:	9b01      	ldr	r3, [sp, #4]
 8008154:	61a3      	str	r3, [r4, #24]
 8008156:	2b00      	cmp	r3, #0
 8008158:	bf14      	ite	ne
 800815a:	2202      	movne	r2, #2
 800815c:	2201      	moveq	r2, #1
 800815e:	6122      	str	r2, [r4, #16]
 8008160:	b1d5      	cbz	r5, 8008198 <__d2b+0x98>
 8008162:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008166:	4405      	add	r5, r0
 8008168:	f8c9 5000 	str.w	r5, [r9]
 800816c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008170:	f8c8 0000 	str.w	r0, [r8]
 8008174:	4620      	mov	r0, r4
 8008176:	b003      	add	sp, #12
 8008178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800817c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008180:	e7d5      	b.n	800812e <__d2b+0x2e>
 8008182:	6161      	str	r1, [r4, #20]
 8008184:	e7e5      	b.n	8008152 <__d2b+0x52>
 8008186:	a801      	add	r0, sp, #4
 8008188:	f7ff fd5a 	bl	8007c40 <__lo0bits>
 800818c:	9b01      	ldr	r3, [sp, #4]
 800818e:	6163      	str	r3, [r4, #20]
 8008190:	2201      	movs	r2, #1
 8008192:	6122      	str	r2, [r4, #16]
 8008194:	3020      	adds	r0, #32
 8008196:	e7e3      	b.n	8008160 <__d2b+0x60>
 8008198:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800819c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80081a0:	f8c9 0000 	str.w	r0, [r9]
 80081a4:	6918      	ldr	r0, [r3, #16]
 80081a6:	f7ff fd2b 	bl	8007c00 <__hi0bits>
 80081aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081ae:	e7df      	b.n	8008170 <__d2b+0x70>
 80081b0:	08008ccf 	.word	0x08008ccf
 80081b4:	08008d40 	.word	0x08008d40

080081b8 <_calloc_r>:
 80081b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081ba:	fba1 2402 	umull	r2, r4, r1, r2
 80081be:	b94c      	cbnz	r4, 80081d4 <_calloc_r+0x1c>
 80081c0:	4611      	mov	r1, r2
 80081c2:	9201      	str	r2, [sp, #4]
 80081c4:	f000 f87a 	bl	80082bc <_malloc_r>
 80081c8:	9a01      	ldr	r2, [sp, #4]
 80081ca:	4605      	mov	r5, r0
 80081cc:	b930      	cbnz	r0, 80081dc <_calloc_r+0x24>
 80081ce:	4628      	mov	r0, r5
 80081d0:	b003      	add	sp, #12
 80081d2:	bd30      	pop	{r4, r5, pc}
 80081d4:	220c      	movs	r2, #12
 80081d6:	6002      	str	r2, [r0, #0]
 80081d8:	2500      	movs	r5, #0
 80081da:	e7f8      	b.n	80081ce <_calloc_r+0x16>
 80081dc:	4621      	mov	r1, r4
 80081de:	f7fd fdf1 	bl	8005dc4 <memset>
 80081e2:	e7f4      	b.n	80081ce <_calloc_r+0x16>

080081e4 <_free_r>:
 80081e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081e6:	2900      	cmp	r1, #0
 80081e8:	d044      	beq.n	8008274 <_free_r+0x90>
 80081ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ee:	9001      	str	r0, [sp, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f1a1 0404 	sub.w	r4, r1, #4
 80081f6:	bfb8      	it	lt
 80081f8:	18e4      	addlt	r4, r4, r3
 80081fa:	f000 fb19 	bl	8008830 <__malloc_lock>
 80081fe:	4a1e      	ldr	r2, [pc, #120]	; (8008278 <_free_r+0x94>)
 8008200:	9801      	ldr	r0, [sp, #4]
 8008202:	6813      	ldr	r3, [r2, #0]
 8008204:	b933      	cbnz	r3, 8008214 <_free_r+0x30>
 8008206:	6063      	str	r3, [r4, #4]
 8008208:	6014      	str	r4, [r2, #0]
 800820a:	b003      	add	sp, #12
 800820c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008210:	f000 bb14 	b.w	800883c <__malloc_unlock>
 8008214:	42a3      	cmp	r3, r4
 8008216:	d908      	bls.n	800822a <_free_r+0x46>
 8008218:	6825      	ldr	r5, [r4, #0]
 800821a:	1961      	adds	r1, r4, r5
 800821c:	428b      	cmp	r3, r1
 800821e:	bf01      	itttt	eq
 8008220:	6819      	ldreq	r1, [r3, #0]
 8008222:	685b      	ldreq	r3, [r3, #4]
 8008224:	1949      	addeq	r1, r1, r5
 8008226:	6021      	streq	r1, [r4, #0]
 8008228:	e7ed      	b.n	8008206 <_free_r+0x22>
 800822a:	461a      	mov	r2, r3
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	b10b      	cbz	r3, 8008234 <_free_r+0x50>
 8008230:	42a3      	cmp	r3, r4
 8008232:	d9fa      	bls.n	800822a <_free_r+0x46>
 8008234:	6811      	ldr	r1, [r2, #0]
 8008236:	1855      	adds	r5, r2, r1
 8008238:	42a5      	cmp	r5, r4
 800823a:	d10b      	bne.n	8008254 <_free_r+0x70>
 800823c:	6824      	ldr	r4, [r4, #0]
 800823e:	4421      	add	r1, r4
 8008240:	1854      	adds	r4, r2, r1
 8008242:	42a3      	cmp	r3, r4
 8008244:	6011      	str	r1, [r2, #0]
 8008246:	d1e0      	bne.n	800820a <_free_r+0x26>
 8008248:	681c      	ldr	r4, [r3, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	6053      	str	r3, [r2, #4]
 800824e:	4421      	add	r1, r4
 8008250:	6011      	str	r1, [r2, #0]
 8008252:	e7da      	b.n	800820a <_free_r+0x26>
 8008254:	d902      	bls.n	800825c <_free_r+0x78>
 8008256:	230c      	movs	r3, #12
 8008258:	6003      	str	r3, [r0, #0]
 800825a:	e7d6      	b.n	800820a <_free_r+0x26>
 800825c:	6825      	ldr	r5, [r4, #0]
 800825e:	1961      	adds	r1, r4, r5
 8008260:	428b      	cmp	r3, r1
 8008262:	bf04      	itt	eq
 8008264:	6819      	ldreq	r1, [r3, #0]
 8008266:	685b      	ldreq	r3, [r3, #4]
 8008268:	6063      	str	r3, [r4, #4]
 800826a:	bf04      	itt	eq
 800826c:	1949      	addeq	r1, r1, r5
 800826e:	6021      	streq	r1, [r4, #0]
 8008270:	6054      	str	r4, [r2, #4]
 8008272:	e7ca      	b.n	800820a <_free_r+0x26>
 8008274:	b003      	add	sp, #12
 8008276:	bd30      	pop	{r4, r5, pc}
 8008278:	2000035c 	.word	0x2000035c

0800827c <sbrk_aligned>:
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	4e0e      	ldr	r6, [pc, #56]	; (80082b8 <sbrk_aligned+0x3c>)
 8008280:	460c      	mov	r4, r1
 8008282:	6831      	ldr	r1, [r6, #0]
 8008284:	4605      	mov	r5, r0
 8008286:	b911      	cbnz	r1, 800828e <sbrk_aligned+0x12>
 8008288:	f000 f9e6 	bl	8008658 <_sbrk_r>
 800828c:	6030      	str	r0, [r6, #0]
 800828e:	4621      	mov	r1, r4
 8008290:	4628      	mov	r0, r5
 8008292:	f000 f9e1 	bl	8008658 <_sbrk_r>
 8008296:	1c43      	adds	r3, r0, #1
 8008298:	d00a      	beq.n	80082b0 <sbrk_aligned+0x34>
 800829a:	1cc4      	adds	r4, r0, #3
 800829c:	f024 0403 	bic.w	r4, r4, #3
 80082a0:	42a0      	cmp	r0, r4
 80082a2:	d007      	beq.n	80082b4 <sbrk_aligned+0x38>
 80082a4:	1a21      	subs	r1, r4, r0
 80082a6:	4628      	mov	r0, r5
 80082a8:	f000 f9d6 	bl	8008658 <_sbrk_r>
 80082ac:	3001      	adds	r0, #1
 80082ae:	d101      	bne.n	80082b4 <sbrk_aligned+0x38>
 80082b0:	f04f 34ff 	mov.w	r4, #4294967295
 80082b4:	4620      	mov	r0, r4
 80082b6:	bd70      	pop	{r4, r5, r6, pc}
 80082b8:	20000360 	.word	0x20000360

080082bc <_malloc_r>:
 80082bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c0:	1ccd      	adds	r5, r1, #3
 80082c2:	f025 0503 	bic.w	r5, r5, #3
 80082c6:	3508      	adds	r5, #8
 80082c8:	2d0c      	cmp	r5, #12
 80082ca:	bf38      	it	cc
 80082cc:	250c      	movcc	r5, #12
 80082ce:	2d00      	cmp	r5, #0
 80082d0:	4607      	mov	r7, r0
 80082d2:	db01      	blt.n	80082d8 <_malloc_r+0x1c>
 80082d4:	42a9      	cmp	r1, r5
 80082d6:	d905      	bls.n	80082e4 <_malloc_r+0x28>
 80082d8:	230c      	movs	r3, #12
 80082da:	603b      	str	r3, [r7, #0]
 80082dc:	2600      	movs	r6, #0
 80082de:	4630      	mov	r0, r6
 80082e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082e4:	4e2e      	ldr	r6, [pc, #184]	; (80083a0 <_malloc_r+0xe4>)
 80082e6:	f000 faa3 	bl	8008830 <__malloc_lock>
 80082ea:	6833      	ldr	r3, [r6, #0]
 80082ec:	461c      	mov	r4, r3
 80082ee:	bb34      	cbnz	r4, 800833e <_malloc_r+0x82>
 80082f0:	4629      	mov	r1, r5
 80082f2:	4638      	mov	r0, r7
 80082f4:	f7ff ffc2 	bl	800827c <sbrk_aligned>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	4604      	mov	r4, r0
 80082fc:	d14d      	bne.n	800839a <_malloc_r+0xde>
 80082fe:	6834      	ldr	r4, [r6, #0]
 8008300:	4626      	mov	r6, r4
 8008302:	2e00      	cmp	r6, #0
 8008304:	d140      	bne.n	8008388 <_malloc_r+0xcc>
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	4631      	mov	r1, r6
 800830a:	4638      	mov	r0, r7
 800830c:	eb04 0803 	add.w	r8, r4, r3
 8008310:	f000 f9a2 	bl	8008658 <_sbrk_r>
 8008314:	4580      	cmp	r8, r0
 8008316:	d13a      	bne.n	800838e <_malloc_r+0xd2>
 8008318:	6821      	ldr	r1, [r4, #0]
 800831a:	3503      	adds	r5, #3
 800831c:	1a6d      	subs	r5, r5, r1
 800831e:	f025 0503 	bic.w	r5, r5, #3
 8008322:	3508      	adds	r5, #8
 8008324:	2d0c      	cmp	r5, #12
 8008326:	bf38      	it	cc
 8008328:	250c      	movcc	r5, #12
 800832a:	4629      	mov	r1, r5
 800832c:	4638      	mov	r0, r7
 800832e:	f7ff ffa5 	bl	800827c <sbrk_aligned>
 8008332:	3001      	adds	r0, #1
 8008334:	d02b      	beq.n	800838e <_malloc_r+0xd2>
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	442b      	add	r3, r5
 800833a:	6023      	str	r3, [r4, #0]
 800833c:	e00e      	b.n	800835c <_malloc_r+0xa0>
 800833e:	6822      	ldr	r2, [r4, #0]
 8008340:	1b52      	subs	r2, r2, r5
 8008342:	d41e      	bmi.n	8008382 <_malloc_r+0xc6>
 8008344:	2a0b      	cmp	r2, #11
 8008346:	d916      	bls.n	8008376 <_malloc_r+0xba>
 8008348:	1961      	adds	r1, r4, r5
 800834a:	42a3      	cmp	r3, r4
 800834c:	6025      	str	r5, [r4, #0]
 800834e:	bf18      	it	ne
 8008350:	6059      	strne	r1, [r3, #4]
 8008352:	6863      	ldr	r3, [r4, #4]
 8008354:	bf08      	it	eq
 8008356:	6031      	streq	r1, [r6, #0]
 8008358:	5162      	str	r2, [r4, r5]
 800835a:	604b      	str	r3, [r1, #4]
 800835c:	4638      	mov	r0, r7
 800835e:	f104 060b 	add.w	r6, r4, #11
 8008362:	f000 fa6b 	bl	800883c <__malloc_unlock>
 8008366:	f026 0607 	bic.w	r6, r6, #7
 800836a:	1d23      	adds	r3, r4, #4
 800836c:	1af2      	subs	r2, r6, r3
 800836e:	d0b6      	beq.n	80082de <_malloc_r+0x22>
 8008370:	1b9b      	subs	r3, r3, r6
 8008372:	50a3      	str	r3, [r4, r2]
 8008374:	e7b3      	b.n	80082de <_malloc_r+0x22>
 8008376:	6862      	ldr	r2, [r4, #4]
 8008378:	42a3      	cmp	r3, r4
 800837a:	bf0c      	ite	eq
 800837c:	6032      	streq	r2, [r6, #0]
 800837e:	605a      	strne	r2, [r3, #4]
 8008380:	e7ec      	b.n	800835c <_malloc_r+0xa0>
 8008382:	4623      	mov	r3, r4
 8008384:	6864      	ldr	r4, [r4, #4]
 8008386:	e7b2      	b.n	80082ee <_malloc_r+0x32>
 8008388:	4634      	mov	r4, r6
 800838a:	6876      	ldr	r6, [r6, #4]
 800838c:	e7b9      	b.n	8008302 <_malloc_r+0x46>
 800838e:	230c      	movs	r3, #12
 8008390:	603b      	str	r3, [r7, #0]
 8008392:	4638      	mov	r0, r7
 8008394:	f000 fa52 	bl	800883c <__malloc_unlock>
 8008398:	e7a1      	b.n	80082de <_malloc_r+0x22>
 800839a:	6025      	str	r5, [r4, #0]
 800839c:	e7de      	b.n	800835c <_malloc_r+0xa0>
 800839e:	bf00      	nop
 80083a0:	2000035c 	.word	0x2000035c

080083a4 <__sfputc_r>:
 80083a4:	6893      	ldr	r3, [r2, #8]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	b410      	push	{r4}
 80083ac:	6093      	str	r3, [r2, #8]
 80083ae:	da08      	bge.n	80083c2 <__sfputc_r+0x1e>
 80083b0:	6994      	ldr	r4, [r2, #24]
 80083b2:	42a3      	cmp	r3, r4
 80083b4:	db01      	blt.n	80083ba <__sfputc_r+0x16>
 80083b6:	290a      	cmp	r1, #10
 80083b8:	d103      	bne.n	80083c2 <__sfputc_r+0x1e>
 80083ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083be:	f7fe ba01 	b.w	80067c4 <__swbuf_r>
 80083c2:	6813      	ldr	r3, [r2, #0]
 80083c4:	1c58      	adds	r0, r3, #1
 80083c6:	6010      	str	r0, [r2, #0]
 80083c8:	7019      	strb	r1, [r3, #0]
 80083ca:	4608      	mov	r0, r1
 80083cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <__sfputs_r>:
 80083d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d4:	4606      	mov	r6, r0
 80083d6:	460f      	mov	r7, r1
 80083d8:	4614      	mov	r4, r2
 80083da:	18d5      	adds	r5, r2, r3
 80083dc:	42ac      	cmp	r4, r5
 80083de:	d101      	bne.n	80083e4 <__sfputs_r+0x12>
 80083e0:	2000      	movs	r0, #0
 80083e2:	e007      	b.n	80083f4 <__sfputs_r+0x22>
 80083e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083e8:	463a      	mov	r2, r7
 80083ea:	4630      	mov	r0, r6
 80083ec:	f7ff ffda 	bl	80083a4 <__sfputc_r>
 80083f0:	1c43      	adds	r3, r0, #1
 80083f2:	d1f3      	bne.n	80083dc <__sfputs_r+0xa>
 80083f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083f8 <_vfiprintf_r>:
 80083f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fc:	460d      	mov	r5, r1
 80083fe:	b09d      	sub	sp, #116	; 0x74
 8008400:	4614      	mov	r4, r2
 8008402:	4698      	mov	r8, r3
 8008404:	4606      	mov	r6, r0
 8008406:	b118      	cbz	r0, 8008410 <_vfiprintf_r+0x18>
 8008408:	6983      	ldr	r3, [r0, #24]
 800840a:	b90b      	cbnz	r3, 8008410 <_vfiprintf_r+0x18>
 800840c:	f7ff fa30 	bl	8007870 <__sinit>
 8008410:	4b89      	ldr	r3, [pc, #548]	; (8008638 <_vfiprintf_r+0x240>)
 8008412:	429d      	cmp	r5, r3
 8008414:	d11b      	bne.n	800844e <_vfiprintf_r+0x56>
 8008416:	6875      	ldr	r5, [r6, #4]
 8008418:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800841a:	07d9      	lsls	r1, r3, #31
 800841c:	d405      	bmi.n	800842a <_vfiprintf_r+0x32>
 800841e:	89ab      	ldrh	r3, [r5, #12]
 8008420:	059a      	lsls	r2, r3, #22
 8008422:	d402      	bmi.n	800842a <_vfiprintf_r+0x32>
 8008424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008426:	f7ff fac6 	bl	80079b6 <__retarget_lock_acquire_recursive>
 800842a:	89ab      	ldrh	r3, [r5, #12]
 800842c:	071b      	lsls	r3, r3, #28
 800842e:	d501      	bpl.n	8008434 <_vfiprintf_r+0x3c>
 8008430:	692b      	ldr	r3, [r5, #16]
 8008432:	b9eb      	cbnz	r3, 8008470 <_vfiprintf_r+0x78>
 8008434:	4629      	mov	r1, r5
 8008436:	4630      	mov	r0, r6
 8008438:	f7fe fa16 	bl	8006868 <__swsetup_r>
 800843c:	b1c0      	cbz	r0, 8008470 <_vfiprintf_r+0x78>
 800843e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008440:	07dc      	lsls	r4, r3, #31
 8008442:	d50e      	bpl.n	8008462 <_vfiprintf_r+0x6a>
 8008444:	f04f 30ff 	mov.w	r0, #4294967295
 8008448:	b01d      	add	sp, #116	; 0x74
 800844a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800844e:	4b7b      	ldr	r3, [pc, #492]	; (800863c <_vfiprintf_r+0x244>)
 8008450:	429d      	cmp	r5, r3
 8008452:	d101      	bne.n	8008458 <_vfiprintf_r+0x60>
 8008454:	68b5      	ldr	r5, [r6, #8]
 8008456:	e7df      	b.n	8008418 <_vfiprintf_r+0x20>
 8008458:	4b79      	ldr	r3, [pc, #484]	; (8008640 <_vfiprintf_r+0x248>)
 800845a:	429d      	cmp	r5, r3
 800845c:	bf08      	it	eq
 800845e:	68f5      	ldreq	r5, [r6, #12]
 8008460:	e7da      	b.n	8008418 <_vfiprintf_r+0x20>
 8008462:	89ab      	ldrh	r3, [r5, #12]
 8008464:	0598      	lsls	r0, r3, #22
 8008466:	d4ed      	bmi.n	8008444 <_vfiprintf_r+0x4c>
 8008468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800846a:	f7ff faa5 	bl	80079b8 <__retarget_lock_release_recursive>
 800846e:	e7e9      	b.n	8008444 <_vfiprintf_r+0x4c>
 8008470:	2300      	movs	r3, #0
 8008472:	9309      	str	r3, [sp, #36]	; 0x24
 8008474:	2320      	movs	r3, #32
 8008476:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800847a:	f8cd 800c 	str.w	r8, [sp, #12]
 800847e:	2330      	movs	r3, #48	; 0x30
 8008480:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008644 <_vfiprintf_r+0x24c>
 8008484:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008488:	f04f 0901 	mov.w	r9, #1
 800848c:	4623      	mov	r3, r4
 800848e:	469a      	mov	sl, r3
 8008490:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008494:	b10a      	cbz	r2, 800849a <_vfiprintf_r+0xa2>
 8008496:	2a25      	cmp	r2, #37	; 0x25
 8008498:	d1f9      	bne.n	800848e <_vfiprintf_r+0x96>
 800849a:	ebba 0b04 	subs.w	fp, sl, r4
 800849e:	d00b      	beq.n	80084b8 <_vfiprintf_r+0xc0>
 80084a0:	465b      	mov	r3, fp
 80084a2:	4622      	mov	r2, r4
 80084a4:	4629      	mov	r1, r5
 80084a6:	4630      	mov	r0, r6
 80084a8:	f7ff ff93 	bl	80083d2 <__sfputs_r>
 80084ac:	3001      	adds	r0, #1
 80084ae:	f000 80aa 	beq.w	8008606 <_vfiprintf_r+0x20e>
 80084b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084b4:	445a      	add	r2, fp
 80084b6:	9209      	str	r2, [sp, #36]	; 0x24
 80084b8:	f89a 3000 	ldrb.w	r3, [sl]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 80a2 	beq.w	8008606 <_vfiprintf_r+0x20e>
 80084c2:	2300      	movs	r3, #0
 80084c4:	f04f 32ff 	mov.w	r2, #4294967295
 80084c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084cc:	f10a 0a01 	add.w	sl, sl, #1
 80084d0:	9304      	str	r3, [sp, #16]
 80084d2:	9307      	str	r3, [sp, #28]
 80084d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084d8:	931a      	str	r3, [sp, #104]	; 0x68
 80084da:	4654      	mov	r4, sl
 80084dc:	2205      	movs	r2, #5
 80084de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e2:	4858      	ldr	r0, [pc, #352]	; (8008644 <_vfiprintf_r+0x24c>)
 80084e4:	f7f7 fe8c 	bl	8000200 <memchr>
 80084e8:	9a04      	ldr	r2, [sp, #16]
 80084ea:	b9d8      	cbnz	r0, 8008524 <_vfiprintf_r+0x12c>
 80084ec:	06d1      	lsls	r1, r2, #27
 80084ee:	bf44      	itt	mi
 80084f0:	2320      	movmi	r3, #32
 80084f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084f6:	0713      	lsls	r3, r2, #28
 80084f8:	bf44      	itt	mi
 80084fa:	232b      	movmi	r3, #43	; 0x2b
 80084fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008500:	f89a 3000 	ldrb.w	r3, [sl]
 8008504:	2b2a      	cmp	r3, #42	; 0x2a
 8008506:	d015      	beq.n	8008534 <_vfiprintf_r+0x13c>
 8008508:	9a07      	ldr	r2, [sp, #28]
 800850a:	4654      	mov	r4, sl
 800850c:	2000      	movs	r0, #0
 800850e:	f04f 0c0a 	mov.w	ip, #10
 8008512:	4621      	mov	r1, r4
 8008514:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008518:	3b30      	subs	r3, #48	; 0x30
 800851a:	2b09      	cmp	r3, #9
 800851c:	d94e      	bls.n	80085bc <_vfiprintf_r+0x1c4>
 800851e:	b1b0      	cbz	r0, 800854e <_vfiprintf_r+0x156>
 8008520:	9207      	str	r2, [sp, #28]
 8008522:	e014      	b.n	800854e <_vfiprintf_r+0x156>
 8008524:	eba0 0308 	sub.w	r3, r0, r8
 8008528:	fa09 f303 	lsl.w	r3, r9, r3
 800852c:	4313      	orrs	r3, r2
 800852e:	9304      	str	r3, [sp, #16]
 8008530:	46a2      	mov	sl, r4
 8008532:	e7d2      	b.n	80084da <_vfiprintf_r+0xe2>
 8008534:	9b03      	ldr	r3, [sp, #12]
 8008536:	1d19      	adds	r1, r3, #4
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	9103      	str	r1, [sp, #12]
 800853c:	2b00      	cmp	r3, #0
 800853e:	bfbb      	ittet	lt
 8008540:	425b      	neglt	r3, r3
 8008542:	f042 0202 	orrlt.w	r2, r2, #2
 8008546:	9307      	strge	r3, [sp, #28]
 8008548:	9307      	strlt	r3, [sp, #28]
 800854a:	bfb8      	it	lt
 800854c:	9204      	strlt	r2, [sp, #16]
 800854e:	7823      	ldrb	r3, [r4, #0]
 8008550:	2b2e      	cmp	r3, #46	; 0x2e
 8008552:	d10c      	bne.n	800856e <_vfiprintf_r+0x176>
 8008554:	7863      	ldrb	r3, [r4, #1]
 8008556:	2b2a      	cmp	r3, #42	; 0x2a
 8008558:	d135      	bne.n	80085c6 <_vfiprintf_r+0x1ce>
 800855a:	9b03      	ldr	r3, [sp, #12]
 800855c:	1d1a      	adds	r2, r3, #4
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	9203      	str	r2, [sp, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	bfb8      	it	lt
 8008566:	f04f 33ff 	movlt.w	r3, #4294967295
 800856a:	3402      	adds	r4, #2
 800856c:	9305      	str	r3, [sp, #20]
 800856e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008654 <_vfiprintf_r+0x25c>
 8008572:	7821      	ldrb	r1, [r4, #0]
 8008574:	2203      	movs	r2, #3
 8008576:	4650      	mov	r0, sl
 8008578:	f7f7 fe42 	bl	8000200 <memchr>
 800857c:	b140      	cbz	r0, 8008590 <_vfiprintf_r+0x198>
 800857e:	2340      	movs	r3, #64	; 0x40
 8008580:	eba0 000a 	sub.w	r0, r0, sl
 8008584:	fa03 f000 	lsl.w	r0, r3, r0
 8008588:	9b04      	ldr	r3, [sp, #16]
 800858a:	4303      	orrs	r3, r0
 800858c:	3401      	adds	r4, #1
 800858e:	9304      	str	r3, [sp, #16]
 8008590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008594:	482c      	ldr	r0, [pc, #176]	; (8008648 <_vfiprintf_r+0x250>)
 8008596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800859a:	2206      	movs	r2, #6
 800859c:	f7f7 fe30 	bl	8000200 <memchr>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	d03f      	beq.n	8008624 <_vfiprintf_r+0x22c>
 80085a4:	4b29      	ldr	r3, [pc, #164]	; (800864c <_vfiprintf_r+0x254>)
 80085a6:	bb1b      	cbnz	r3, 80085f0 <_vfiprintf_r+0x1f8>
 80085a8:	9b03      	ldr	r3, [sp, #12]
 80085aa:	3307      	adds	r3, #7
 80085ac:	f023 0307 	bic.w	r3, r3, #7
 80085b0:	3308      	adds	r3, #8
 80085b2:	9303      	str	r3, [sp, #12]
 80085b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b6:	443b      	add	r3, r7
 80085b8:	9309      	str	r3, [sp, #36]	; 0x24
 80085ba:	e767      	b.n	800848c <_vfiprintf_r+0x94>
 80085bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80085c0:	460c      	mov	r4, r1
 80085c2:	2001      	movs	r0, #1
 80085c4:	e7a5      	b.n	8008512 <_vfiprintf_r+0x11a>
 80085c6:	2300      	movs	r3, #0
 80085c8:	3401      	adds	r4, #1
 80085ca:	9305      	str	r3, [sp, #20]
 80085cc:	4619      	mov	r1, r3
 80085ce:	f04f 0c0a 	mov.w	ip, #10
 80085d2:	4620      	mov	r0, r4
 80085d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085d8:	3a30      	subs	r2, #48	; 0x30
 80085da:	2a09      	cmp	r2, #9
 80085dc:	d903      	bls.n	80085e6 <_vfiprintf_r+0x1ee>
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0c5      	beq.n	800856e <_vfiprintf_r+0x176>
 80085e2:	9105      	str	r1, [sp, #20]
 80085e4:	e7c3      	b.n	800856e <_vfiprintf_r+0x176>
 80085e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80085ea:	4604      	mov	r4, r0
 80085ec:	2301      	movs	r3, #1
 80085ee:	e7f0      	b.n	80085d2 <_vfiprintf_r+0x1da>
 80085f0:	ab03      	add	r3, sp, #12
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	462a      	mov	r2, r5
 80085f6:	4b16      	ldr	r3, [pc, #88]	; (8008650 <_vfiprintf_r+0x258>)
 80085f8:	a904      	add	r1, sp, #16
 80085fa:	4630      	mov	r0, r6
 80085fc:	f7fd fc8a 	bl	8005f14 <_printf_float>
 8008600:	4607      	mov	r7, r0
 8008602:	1c78      	adds	r0, r7, #1
 8008604:	d1d6      	bne.n	80085b4 <_vfiprintf_r+0x1bc>
 8008606:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008608:	07d9      	lsls	r1, r3, #31
 800860a:	d405      	bmi.n	8008618 <_vfiprintf_r+0x220>
 800860c:	89ab      	ldrh	r3, [r5, #12]
 800860e:	059a      	lsls	r2, r3, #22
 8008610:	d402      	bmi.n	8008618 <_vfiprintf_r+0x220>
 8008612:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008614:	f7ff f9d0 	bl	80079b8 <__retarget_lock_release_recursive>
 8008618:	89ab      	ldrh	r3, [r5, #12]
 800861a:	065b      	lsls	r3, r3, #25
 800861c:	f53f af12 	bmi.w	8008444 <_vfiprintf_r+0x4c>
 8008620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008622:	e711      	b.n	8008448 <_vfiprintf_r+0x50>
 8008624:	ab03      	add	r3, sp, #12
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	462a      	mov	r2, r5
 800862a:	4b09      	ldr	r3, [pc, #36]	; (8008650 <_vfiprintf_r+0x258>)
 800862c:	a904      	add	r1, sp, #16
 800862e:	4630      	mov	r0, r6
 8008630:	f7fd ff14 	bl	800645c <_printf_i>
 8008634:	e7e4      	b.n	8008600 <_vfiprintf_r+0x208>
 8008636:	bf00      	nop
 8008638:	08008d00 	.word	0x08008d00
 800863c:	08008d20 	.word	0x08008d20
 8008640:	08008ce0 	.word	0x08008ce0
 8008644:	08008e9c 	.word	0x08008e9c
 8008648:	08008ea6 	.word	0x08008ea6
 800864c:	08005f15 	.word	0x08005f15
 8008650:	080083d3 	.word	0x080083d3
 8008654:	08008ea2 	.word	0x08008ea2

08008658 <_sbrk_r>:
 8008658:	b538      	push	{r3, r4, r5, lr}
 800865a:	4d06      	ldr	r5, [pc, #24]	; (8008674 <_sbrk_r+0x1c>)
 800865c:	2300      	movs	r3, #0
 800865e:	4604      	mov	r4, r0
 8008660:	4608      	mov	r0, r1
 8008662:	602b      	str	r3, [r5, #0]
 8008664:	f7f9 fef2 	bl	800244c <_sbrk>
 8008668:	1c43      	adds	r3, r0, #1
 800866a:	d102      	bne.n	8008672 <_sbrk_r+0x1a>
 800866c:	682b      	ldr	r3, [r5, #0]
 800866e:	b103      	cbz	r3, 8008672 <_sbrk_r+0x1a>
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	bd38      	pop	{r3, r4, r5, pc}
 8008674:	20000364 	.word	0x20000364

08008678 <__sread>:
 8008678:	b510      	push	{r4, lr}
 800867a:	460c      	mov	r4, r1
 800867c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008680:	f000 f8e2 	bl	8008848 <_read_r>
 8008684:	2800      	cmp	r0, #0
 8008686:	bfab      	itete	ge
 8008688:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800868a:	89a3      	ldrhlt	r3, [r4, #12]
 800868c:	181b      	addge	r3, r3, r0
 800868e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008692:	bfac      	ite	ge
 8008694:	6563      	strge	r3, [r4, #84]	; 0x54
 8008696:	81a3      	strhlt	r3, [r4, #12]
 8008698:	bd10      	pop	{r4, pc}

0800869a <__swrite>:
 800869a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800869e:	461f      	mov	r7, r3
 80086a0:	898b      	ldrh	r3, [r1, #12]
 80086a2:	05db      	lsls	r3, r3, #23
 80086a4:	4605      	mov	r5, r0
 80086a6:	460c      	mov	r4, r1
 80086a8:	4616      	mov	r6, r2
 80086aa:	d505      	bpl.n	80086b8 <__swrite+0x1e>
 80086ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b0:	2302      	movs	r3, #2
 80086b2:	2200      	movs	r2, #0
 80086b4:	f000 f898 	bl	80087e8 <_lseek_r>
 80086b8:	89a3      	ldrh	r3, [r4, #12]
 80086ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086c2:	81a3      	strh	r3, [r4, #12]
 80086c4:	4632      	mov	r2, r6
 80086c6:	463b      	mov	r3, r7
 80086c8:	4628      	mov	r0, r5
 80086ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086ce:	f000 b817 	b.w	8008700 <_write_r>

080086d2 <__sseek>:
 80086d2:	b510      	push	{r4, lr}
 80086d4:	460c      	mov	r4, r1
 80086d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086da:	f000 f885 	bl	80087e8 <_lseek_r>
 80086de:	1c43      	adds	r3, r0, #1
 80086e0:	89a3      	ldrh	r3, [r4, #12]
 80086e2:	bf15      	itete	ne
 80086e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80086e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086ee:	81a3      	strheq	r3, [r4, #12]
 80086f0:	bf18      	it	ne
 80086f2:	81a3      	strhne	r3, [r4, #12]
 80086f4:	bd10      	pop	{r4, pc}

080086f6 <__sclose>:
 80086f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086fa:	f000 b831 	b.w	8008760 <_close_r>
	...

08008700 <_write_r>:
 8008700:	b538      	push	{r3, r4, r5, lr}
 8008702:	4d07      	ldr	r5, [pc, #28]	; (8008720 <_write_r+0x20>)
 8008704:	4604      	mov	r4, r0
 8008706:	4608      	mov	r0, r1
 8008708:	4611      	mov	r1, r2
 800870a:	2200      	movs	r2, #0
 800870c:	602a      	str	r2, [r5, #0]
 800870e:	461a      	mov	r2, r3
 8008710:	f7f8 fe4a 	bl	80013a8 <_write>
 8008714:	1c43      	adds	r3, r0, #1
 8008716:	d102      	bne.n	800871e <_write_r+0x1e>
 8008718:	682b      	ldr	r3, [r5, #0]
 800871a:	b103      	cbz	r3, 800871e <_write_r+0x1e>
 800871c:	6023      	str	r3, [r4, #0]
 800871e:	bd38      	pop	{r3, r4, r5, pc}
 8008720:	20000364 	.word	0x20000364

08008724 <__assert_func>:
 8008724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008726:	4614      	mov	r4, r2
 8008728:	461a      	mov	r2, r3
 800872a:	4b09      	ldr	r3, [pc, #36]	; (8008750 <__assert_func+0x2c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4605      	mov	r5, r0
 8008730:	68d8      	ldr	r0, [r3, #12]
 8008732:	b14c      	cbz	r4, 8008748 <__assert_func+0x24>
 8008734:	4b07      	ldr	r3, [pc, #28]	; (8008754 <__assert_func+0x30>)
 8008736:	9100      	str	r1, [sp, #0]
 8008738:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800873c:	4906      	ldr	r1, [pc, #24]	; (8008758 <__assert_func+0x34>)
 800873e:	462b      	mov	r3, r5
 8008740:	f000 f81e 	bl	8008780 <fiprintf>
 8008744:	f000 f89f 	bl	8008886 <abort>
 8008748:	4b04      	ldr	r3, [pc, #16]	; (800875c <__assert_func+0x38>)
 800874a:	461c      	mov	r4, r3
 800874c:	e7f3      	b.n	8008736 <__assert_func+0x12>
 800874e:	bf00      	nop
 8008750:	20000010 	.word	0x20000010
 8008754:	08008ead 	.word	0x08008ead
 8008758:	08008eba 	.word	0x08008eba
 800875c:	08008ee8 	.word	0x08008ee8

08008760 <_close_r>:
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	4d06      	ldr	r5, [pc, #24]	; (800877c <_close_r+0x1c>)
 8008764:	2300      	movs	r3, #0
 8008766:	4604      	mov	r4, r0
 8008768:	4608      	mov	r0, r1
 800876a:	602b      	str	r3, [r5, #0]
 800876c:	f7f9 fe39 	bl	80023e2 <_close>
 8008770:	1c43      	adds	r3, r0, #1
 8008772:	d102      	bne.n	800877a <_close_r+0x1a>
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	b103      	cbz	r3, 800877a <_close_r+0x1a>
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	bd38      	pop	{r3, r4, r5, pc}
 800877c:	20000364 	.word	0x20000364

08008780 <fiprintf>:
 8008780:	b40e      	push	{r1, r2, r3}
 8008782:	b503      	push	{r0, r1, lr}
 8008784:	4601      	mov	r1, r0
 8008786:	ab03      	add	r3, sp, #12
 8008788:	4805      	ldr	r0, [pc, #20]	; (80087a0 <fiprintf+0x20>)
 800878a:	f853 2b04 	ldr.w	r2, [r3], #4
 800878e:	6800      	ldr	r0, [r0, #0]
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	f7ff fe31 	bl	80083f8 <_vfiprintf_r>
 8008796:	b002      	add	sp, #8
 8008798:	f85d eb04 	ldr.w	lr, [sp], #4
 800879c:	b003      	add	sp, #12
 800879e:	4770      	bx	lr
 80087a0:	20000010 	.word	0x20000010

080087a4 <_fstat_r>:
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	4d07      	ldr	r5, [pc, #28]	; (80087c4 <_fstat_r+0x20>)
 80087a8:	2300      	movs	r3, #0
 80087aa:	4604      	mov	r4, r0
 80087ac:	4608      	mov	r0, r1
 80087ae:	4611      	mov	r1, r2
 80087b0:	602b      	str	r3, [r5, #0]
 80087b2:	f7f9 fe22 	bl	80023fa <_fstat>
 80087b6:	1c43      	adds	r3, r0, #1
 80087b8:	d102      	bne.n	80087c0 <_fstat_r+0x1c>
 80087ba:	682b      	ldr	r3, [r5, #0]
 80087bc:	b103      	cbz	r3, 80087c0 <_fstat_r+0x1c>
 80087be:	6023      	str	r3, [r4, #0]
 80087c0:	bd38      	pop	{r3, r4, r5, pc}
 80087c2:	bf00      	nop
 80087c4:	20000364 	.word	0x20000364

080087c8 <_isatty_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4d06      	ldr	r5, [pc, #24]	; (80087e4 <_isatty_r+0x1c>)
 80087cc:	2300      	movs	r3, #0
 80087ce:	4604      	mov	r4, r0
 80087d0:	4608      	mov	r0, r1
 80087d2:	602b      	str	r3, [r5, #0]
 80087d4:	f7f9 fe21 	bl	800241a <_isatty>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	d102      	bne.n	80087e2 <_isatty_r+0x1a>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	b103      	cbz	r3, 80087e2 <_isatty_r+0x1a>
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
 80087e4:	20000364 	.word	0x20000364

080087e8 <_lseek_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4d07      	ldr	r5, [pc, #28]	; (8008808 <_lseek_r+0x20>)
 80087ec:	4604      	mov	r4, r0
 80087ee:	4608      	mov	r0, r1
 80087f0:	4611      	mov	r1, r2
 80087f2:	2200      	movs	r2, #0
 80087f4:	602a      	str	r2, [r5, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	f7f9 fe1a 	bl	8002430 <_lseek>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_lseek_r+0x1e>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	b103      	cbz	r3, 8008806 <_lseek_r+0x1e>
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	20000364 	.word	0x20000364

0800880c <__ascii_mbtowc>:
 800880c:	b082      	sub	sp, #8
 800880e:	b901      	cbnz	r1, 8008812 <__ascii_mbtowc+0x6>
 8008810:	a901      	add	r1, sp, #4
 8008812:	b142      	cbz	r2, 8008826 <__ascii_mbtowc+0x1a>
 8008814:	b14b      	cbz	r3, 800882a <__ascii_mbtowc+0x1e>
 8008816:	7813      	ldrb	r3, [r2, #0]
 8008818:	600b      	str	r3, [r1, #0]
 800881a:	7812      	ldrb	r2, [r2, #0]
 800881c:	1e10      	subs	r0, r2, #0
 800881e:	bf18      	it	ne
 8008820:	2001      	movne	r0, #1
 8008822:	b002      	add	sp, #8
 8008824:	4770      	bx	lr
 8008826:	4610      	mov	r0, r2
 8008828:	e7fb      	b.n	8008822 <__ascii_mbtowc+0x16>
 800882a:	f06f 0001 	mvn.w	r0, #1
 800882e:	e7f8      	b.n	8008822 <__ascii_mbtowc+0x16>

08008830 <__malloc_lock>:
 8008830:	4801      	ldr	r0, [pc, #4]	; (8008838 <__malloc_lock+0x8>)
 8008832:	f7ff b8c0 	b.w	80079b6 <__retarget_lock_acquire_recursive>
 8008836:	bf00      	nop
 8008838:	20000358 	.word	0x20000358

0800883c <__malloc_unlock>:
 800883c:	4801      	ldr	r0, [pc, #4]	; (8008844 <__malloc_unlock+0x8>)
 800883e:	f7ff b8bb 	b.w	80079b8 <__retarget_lock_release_recursive>
 8008842:	bf00      	nop
 8008844:	20000358 	.word	0x20000358

08008848 <_read_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4d07      	ldr	r5, [pc, #28]	; (8008868 <_read_r+0x20>)
 800884c:	4604      	mov	r4, r0
 800884e:	4608      	mov	r0, r1
 8008850:	4611      	mov	r1, r2
 8008852:	2200      	movs	r2, #0
 8008854:	602a      	str	r2, [r5, #0]
 8008856:	461a      	mov	r2, r3
 8008858:	f7f9 fda6 	bl	80023a8 <_read>
 800885c:	1c43      	adds	r3, r0, #1
 800885e:	d102      	bne.n	8008866 <_read_r+0x1e>
 8008860:	682b      	ldr	r3, [r5, #0]
 8008862:	b103      	cbz	r3, 8008866 <_read_r+0x1e>
 8008864:	6023      	str	r3, [r4, #0]
 8008866:	bd38      	pop	{r3, r4, r5, pc}
 8008868:	20000364 	.word	0x20000364

0800886c <__ascii_wctomb>:
 800886c:	b149      	cbz	r1, 8008882 <__ascii_wctomb+0x16>
 800886e:	2aff      	cmp	r2, #255	; 0xff
 8008870:	bf85      	ittet	hi
 8008872:	238a      	movhi	r3, #138	; 0x8a
 8008874:	6003      	strhi	r3, [r0, #0]
 8008876:	700a      	strbls	r2, [r1, #0]
 8008878:	f04f 30ff 	movhi.w	r0, #4294967295
 800887c:	bf98      	it	ls
 800887e:	2001      	movls	r0, #1
 8008880:	4770      	bx	lr
 8008882:	4608      	mov	r0, r1
 8008884:	4770      	bx	lr

08008886 <abort>:
 8008886:	b508      	push	{r3, lr}
 8008888:	2006      	movs	r0, #6
 800888a:	f000 f82b 	bl	80088e4 <raise>
 800888e:	2001      	movs	r0, #1
 8008890:	f7f9 fd80 	bl	8002394 <_exit>

08008894 <_raise_r>:
 8008894:	291f      	cmp	r1, #31
 8008896:	b538      	push	{r3, r4, r5, lr}
 8008898:	4604      	mov	r4, r0
 800889a:	460d      	mov	r5, r1
 800889c:	d904      	bls.n	80088a8 <_raise_r+0x14>
 800889e:	2316      	movs	r3, #22
 80088a0:	6003      	str	r3, [r0, #0]
 80088a2:	f04f 30ff 	mov.w	r0, #4294967295
 80088a6:	bd38      	pop	{r3, r4, r5, pc}
 80088a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80088aa:	b112      	cbz	r2, 80088b2 <_raise_r+0x1e>
 80088ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088b0:	b94b      	cbnz	r3, 80088c6 <_raise_r+0x32>
 80088b2:	4620      	mov	r0, r4
 80088b4:	f000 f830 	bl	8008918 <_getpid_r>
 80088b8:	462a      	mov	r2, r5
 80088ba:	4601      	mov	r1, r0
 80088bc:	4620      	mov	r0, r4
 80088be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088c2:	f000 b817 	b.w	80088f4 <_kill_r>
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d00a      	beq.n	80088e0 <_raise_r+0x4c>
 80088ca:	1c59      	adds	r1, r3, #1
 80088cc:	d103      	bne.n	80088d6 <_raise_r+0x42>
 80088ce:	2316      	movs	r3, #22
 80088d0:	6003      	str	r3, [r0, #0]
 80088d2:	2001      	movs	r0, #1
 80088d4:	e7e7      	b.n	80088a6 <_raise_r+0x12>
 80088d6:	2400      	movs	r4, #0
 80088d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088dc:	4628      	mov	r0, r5
 80088de:	4798      	blx	r3
 80088e0:	2000      	movs	r0, #0
 80088e2:	e7e0      	b.n	80088a6 <_raise_r+0x12>

080088e4 <raise>:
 80088e4:	4b02      	ldr	r3, [pc, #8]	; (80088f0 <raise+0xc>)
 80088e6:	4601      	mov	r1, r0
 80088e8:	6818      	ldr	r0, [r3, #0]
 80088ea:	f7ff bfd3 	b.w	8008894 <_raise_r>
 80088ee:	bf00      	nop
 80088f0:	20000010 	.word	0x20000010

080088f4 <_kill_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	4d07      	ldr	r5, [pc, #28]	; (8008914 <_kill_r+0x20>)
 80088f8:	2300      	movs	r3, #0
 80088fa:	4604      	mov	r4, r0
 80088fc:	4608      	mov	r0, r1
 80088fe:	4611      	mov	r1, r2
 8008900:	602b      	str	r3, [r5, #0]
 8008902:	f7f9 fd37 	bl	8002374 <_kill>
 8008906:	1c43      	adds	r3, r0, #1
 8008908:	d102      	bne.n	8008910 <_kill_r+0x1c>
 800890a:	682b      	ldr	r3, [r5, #0]
 800890c:	b103      	cbz	r3, 8008910 <_kill_r+0x1c>
 800890e:	6023      	str	r3, [r4, #0]
 8008910:	bd38      	pop	{r3, r4, r5, pc}
 8008912:	bf00      	nop
 8008914:	20000364 	.word	0x20000364

08008918 <_getpid_r>:
 8008918:	f7f9 bd24 	b.w	8002364 <_getpid>

0800891c <_init>:
 800891c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891e:	bf00      	nop
 8008920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008922:	bc08      	pop	{r3}
 8008924:	469e      	mov	lr, r3
 8008926:	4770      	bx	lr

08008928 <_fini>:
 8008928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892a:	bf00      	nop
 800892c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892e:	bc08      	pop	{r3}
 8008930:	469e      	mov	lr, r3
 8008932:	4770      	bx	lr
